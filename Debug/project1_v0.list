
project1_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c90  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08001d48  08001d48  00002d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001de8  08001de8  00003074  2**0
                  CONTENTS
  4 .ARM          00000000  08001de8  08001de8  00003074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001de8  08001de8  00003074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08001de8  08001de8  00002de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001df0  08001df0  00002df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001df4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001348  20000074  08001e68  00003074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013bc  08001e68  000033bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00003074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cde  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d3  00000000  00000000  0000bd7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0000e350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f7  00000000  00000000  0000eb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015331  00000000  00000000  0000f1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0a5  00000000  00000000  00024528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007915e  00000000  00000000  000325cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab72b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012c4  00000000  00000000  000ab770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00002bdc  00000000  00000000  000aca34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  000af610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08001d30 	.word	0x08001d30

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	08001d30 	.word	0x08001d30

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000218:	2301      	movs	r3, #1
 800021a:	4a0a      	ldr	r2, [pc, #40]	@ (8000244 <MX_DMA_Init+0x2c>)
{
 800021c:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800021e:	6b91      	ldr	r1, [r2, #56]	@ 0x38
{
 8000220:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000222:	4319      	orrs	r1, r3
 8000224:	6391      	str	r1, [r2, #56]	@ 0x38
 8000226:	6b92      	ldr	r2, [r2, #56]	@ 0x38

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000228:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800022a:	4013      	ands	r3, r2
 800022c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800022e:	2200      	movs	r2, #0
 8000230:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000232:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000234:	f000 f9a6 	bl	8000584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000238:	2009      	movs	r0, #9
 800023a:	f000 f9cd 	bl	80005d8 <HAL_NVIC_EnableIRQ>

}
 800023e:	b003      	add	sp, #12
 8000240:	bd00      	pop	{pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	40021000 	.word	0x40021000

08000248 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000248:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024a:	2401      	movs	r4, #1
{
 800024c:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024e:	2214      	movs	r2, #20
 8000250:	2100      	movs	r1, #0
 8000252:	a802      	add	r0, sp, #8
 8000254:	f001 fd36 	bl	8001cc4 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000258:	4b15      	ldr	r3, [pc, #84]	@ (80002b0 <MX_GPIO_Init+0x68>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800025a:	25a0      	movs	r5, #160	@ 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800025e:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000260:	4322      	orrs	r2, r4
 8000262:	635a      	str	r2, [r3, #52]	@ 0x34
 8000264:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000266:	0028      	movs	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000268:	4022      	ands	r2, r4
 800026a:	9200      	str	r2, [sp, #0]
 800026c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026e:	2202      	movs	r2, #2
 8000270:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000272:	4311      	orrs	r1, r2
 8000274:	6359      	str	r1, [r3, #52]	@ 0x34
 8000276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000278:	2170      	movs	r1, #112	@ 0x70
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800027a:	401a      	ands	r2, r3
 800027c:	9201      	str	r2, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800027e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000280:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000282:	f000 fb93 	bl	80009ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|LED1_Pin|LED2_Pin;
 8000286:	2370      	movs	r3, #112	@ 0x70
 8000288:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028a:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800028c:	0028      	movs	r0, r5
 800028e:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000292:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000294:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000296:	f000 fa97 	bl	80007c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800029a:	2203      	movs	r2, #3
 800029c:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800029e:	4805      	ldr	r0, [pc, #20]	@ (80002b4 <MX_GPIO_Init+0x6c>)
 80002a0:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80002a2:	9202      	str	r2, [sp, #8]
 80002a4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002a6:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002a8:	f000 fa8e 	bl	80007c8 <HAL_GPIO_Init>

}
 80002ac:	b009      	add	sp, #36	@ 0x24
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	40021000 	.word	0x40021000
 80002b4:	50000400 	.word	0x50000400

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b500      	push	{lr}
 80002ba:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002bc:	2234      	movs	r2, #52	@ 0x34
 80002be:	2100      	movs	r1, #0
 80002c0:	a805      	add	r0, sp, #20
 80002c2:	f001 fcff 	bl	8001cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c6:	2210      	movs	r2, #16
 80002c8:	2100      	movs	r1, #0
 80002ca:	4668      	mov	r0, sp
 80002cc:	f001 fcfa 	bl	8001cc4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002d0:	2080      	movs	r0, #128	@ 0x80
 80002d2:	0080      	lsls	r0, r0, #2
 80002d4:	f000 fb70 	bl	80009b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d8:	2302      	movs	r3, #2
 80002da:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002dc:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002de:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80002e0:	330e      	adds	r3, #14
 80002e2:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 25;
 80002e4:	3309      	adds	r3, #9
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e6:	2280      	movs	r2, #128	@ 0x80
  RCC_OscInitStruct.PLL.PLLN = 25;
 80002e8:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ea:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	0052      	lsls	r2, r2, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ee:	029b      	lsls	r3, r3, #10
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f0:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002f2:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002f4:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80002f6:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002f8:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80002fa:	05db      	lsls	r3, r3, #23
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fc:	3240      	adds	r2, #64	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000300:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000302:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	f000 fb88 	bl	8000a18 <HAL_RCC_OscConfig>
 8000308:	2800      	cmp	r0, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x58>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800030c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800030e:	e7fe      	b.n	800030e <SystemClock_Config+0x56>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000310:	2207      	movs	r2, #7
 8000312:	2302      	movs	r3, #2
 8000314:	9200      	str	r2, [sp, #0]
 8000316:	9301      	str	r3, [sp, #4]
 8000318:	2200      	movs	r2, #0
 800031a:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800031c:	2102      	movs	r1, #2
 800031e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000320:	9202      	str	r2, [sp, #8]
 8000322:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000324:	f000 fe24 	bl	8000f70 <HAL_RCC_ClockConfig>
 8000328:	2800      	cmp	r0, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x78>
 800032c:	b672      	cpsid	i
  while (1)
 800032e:	e7fe      	b.n	800032e <SystemClock_Config+0x76>
}
 8000330:	b013      	add	sp, #76	@ 0x4c
 8000332:	bd00      	pop	{pc}

08000334 <main>:
{
 8000334:	b510      	push	{r4, lr}
  HAL_Init();
 8000336:	f000 f8ff 	bl	8000538 <HAL_Init>
  SystemClock_Config();
 800033a:	f7ff ffbd 	bl	80002b8 <SystemClock_Config>
  MX_GPIO_Init();
 800033e:	f7ff ff83 	bl	8000248 <MX_GPIO_Init>
  MX_DMA_Init();
 8000342:	f7ff ff69 	bl	8000218 <MX_DMA_Init>
  MX_SPI1_Init();
 8000346:	f000 f803 	bl	8000350 <MX_SPI1_Init>
  while (1)
 800034a:	e7fe      	b.n	800034a <main+0x16>

0800034c <Error_Handler>:
 800034c:	b672      	cpsid	i
  while (1)
 800034e:	e7fe      	b.n	800034e <Error_Handler+0x2>

08000350 <MX_SPI1_Init>:

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000350:	22e0      	movs	r2, #224	@ 0xe0
  hspi1.Instance = SPI1;
 8000352:	4811      	ldr	r0, [pc, #68]	@ (8000398 <MX_SPI1_Init+0x48>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000354:	00d2      	lsls	r2, r2, #3
{
 8000356:	b510      	push	{r4, lr}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000358:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800035a:	2201      	movs	r2, #1
  hspi1.Instance = SPI1;
 800035c:	4b0f      	ldr	r3, [pc, #60]	@ (800039c <MX_SPI1_Init+0x4c>)
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800035e:	6142      	str	r2, [r0, #20]
  hspi1.Instance = SPI1;
 8000360:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000362:	2382      	movs	r3, #130	@ 0x82
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000364:	2280      	movs	r2, #128	@ 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000366:	005b      	lsls	r3, r3, #1
 8000368:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800036a:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800036c:	0092      	lsls	r2, r2, #2
 800036e:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000370:	3ae9      	subs	r2, #233	@ 0xe9
 8000372:	3aff      	subs	r2, #255	@ 0xff
 8000374:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8000376:	3a11      	subs	r2, #17
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000378:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800037a:	6103      	str	r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800037c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800037e:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000380:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000382:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000384:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000386:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000388:	f000 ffc4 	bl	8001314 <HAL_SPI_Init>
 800038c:	2800      	cmp	r0, #0
 800038e:	d100      	bne.n	8000392 <MX_SPI1_Init+0x42>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000390:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000392:	f7ff ffdb 	bl	800034c <Error_Handler>
}
 8000396:	e7fb      	b.n	8000390 <MX_SPI1_Init+0x40>
 8000398:	200000ec 	.word	0x200000ec
 800039c:	40013000 	.word	0x40013000

080003a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80003a0:	b530      	push	{r4, r5, lr}
 80003a2:	0004      	movs	r4, r0
 80003a4:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a6:	2214      	movs	r2, #20
 80003a8:	2100      	movs	r1, #0
 80003aa:	a802      	add	r0, sp, #8
 80003ac:	f001 fc8a 	bl	8001cc4 <memset>
  if(spiHandle->Instance==SPI1)
 80003b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <HAL_SPI_MspInit+0x88>)
 80003b2:	6822      	ldr	r2, [r4, #0]
 80003b4:	429a      	cmp	r2, r3
 80003b6:	d001      	beq.n	80003bc <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80003b8:	b009      	add	sp, #36	@ 0x24
 80003ba:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003bc:	2180      	movs	r1, #128	@ 0x80
 80003be:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <HAL_SPI_MspInit+0x8c>)
 80003c0:	0149      	lsls	r1, r1, #5
 80003c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c4:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003c6:	430a      	orrs	r2, r1
 80003c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80003ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003cc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003ce:	400a      	ands	r2, r1
 80003d0:	9200      	str	r2, [sp, #0]
 80003d2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	2201      	movs	r2, #1
 80003d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80003d8:	4311      	orrs	r1, r2
 80003da:	6359      	str	r1, [r3, #52]	@ 0x34
 80003dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003de:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e0:	401a      	ands	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SCK_Pin|DIN_Pin;
 80003e6:	2282      	movs	r2, #130	@ 0x82
 80003e8:	2302      	movs	r3, #2
 80003ea:	9202      	str	r2, [sp, #8]
 80003ec:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ee:	f000 f9eb 	bl	80007c8 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80003f2:	4d0f      	ldr	r5, [pc, #60]	@ (8000430 <HAL_SPI_MspInit+0x90>)
 80003f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000434 <HAL_SPI_MspInit+0x94>)
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80003f6:	2280      	movs	r2, #128	@ 0x80
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80003f8:	602b      	str	r3, [r5, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80003fa:	2311      	movs	r3, #17
 80003fc:	606b      	str	r3, [r5, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80003fe:	3b01      	subs	r3, #1
 8000400:	60ab      	str	r3, [r5, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000402:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000404:	0028      	movs	r0, r5
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000406:	60eb      	str	r3, [r5, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000408:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800040a:	616b      	str	r3, [r5, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800040c:	61ab      	str	r3, [r5, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800040e:	61eb      	str	r3, [r5, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000410:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000412:	f000 f907 	bl	8000624 <HAL_DMA_Init>
 8000416:	2800      	cmp	r0, #0
 8000418:	d102      	bne.n	8000420 <HAL_SPI_MspInit+0x80>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800041a:	6565      	str	r5, [r4, #84]	@ 0x54
 800041c:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 800041e:	e7cb      	b.n	80003b8 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8000420:	f7ff ff94 	bl	800034c <Error_Handler>
 8000424:	e7f9      	b.n	800041a <HAL_SPI_MspInit+0x7a>
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	40013000 	.word	0x40013000
 800042c:	40021000 	.word	0x40021000
 8000430:	20000090 	.word	0x20000090
 8000434:	40020008 	.word	0x40020008

08000438 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000438:	2201      	movs	r2, #1
 800043a:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <HAL_MspInit+0x2c>)
{
 800043c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000440:	4311      	orrs	r1, r2
 8000442:	6419      	str	r1, [r3, #64]	@ 0x40
 8000444:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000446:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000448:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044a:	9200      	str	r2, [sp, #0]
 800044c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000450:	0549      	lsls	r1, r1, #21
 8000452:	430a      	orrs	r2, r1
 8000454:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000458:	400b      	ands	r3, r1
 800045a:	9301      	str	r3, [sp, #4]
 800045c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	b002      	add	sp, #8
 8000460:	4770      	bx	lr
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	40021000 	.word	0x40021000

08000468 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000468:	e7fe      	b.n	8000468 <NMI_Handler>
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046c:	e7fe      	b.n	800046c <HardFault_Handler>
 800046e:	46c0      	nop			@ (mov r8, r8)

08000470 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			@ (mov r8, r8)

08000474 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000474:	4770      	bx	lr
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000478:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800047a:	f000 f871 	bl	8000560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
    task_handler();
 800047e:	f001 fbd5 	bl	8001c2c <task_handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000482:	bd10      	pop	{r4, pc}

08000484 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000484:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000486:	4802      	ldr	r0, [pc, #8]	@ (8000490 <DMA1_Channel1_IRQHandler+0xc>)
 8000488:	f000 f942 	bl	8000710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	20000090 	.word	0x20000090

08000494 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)

08000498 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000498:	480d      	ldr	r0, [pc, #52]	@ (80004d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800049a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800049c:	f7ff fffa 	bl	8000494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a0:	480c      	ldr	r0, [pc, #48]	@ (80004d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004a2:	490d      	ldr	r1, [pc, #52]	@ (80004d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a4:	4a0d      	ldr	r2, [pc, #52]	@ (80004dc <LoopForever+0xe>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a8:	e002      	b.n	80004b0 <LoopCopyDataInit>

080004aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ae:	3304      	adds	r3, #4

080004b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b4:	d3f9      	bcc.n	80004aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004b6:	4a0a      	ldr	r2, [pc, #40]	@ (80004e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004b8:	4c0a      	ldr	r4, [pc, #40]	@ (80004e4 <LoopForever+0x16>)
  movs r3, #0
 80004ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004bc:	e001      	b.n	80004c2 <LoopFillZerobss>

080004be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c0:	3204      	adds	r2, #4

080004c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c4:	d3fb      	bcc.n	80004be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004c6:	f001 fc05 	bl	8001cd4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80004ca:	f7ff ff33 	bl	8000334 <main>

080004ce <LoopForever>:

LoopForever:
  b LoopForever
 80004ce:	e7fe      	b.n	80004ce <LoopForever>
  ldr   r0, =_estack
 80004d0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80004d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80004dc:	08001df4 	.word	0x08001df4
  ldr r2, =_sbss
 80004e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80004e4:	200013bc 	.word	0x200013bc

080004e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e8:	e7fe      	b.n	80004e8 <ADC1_IRQHandler>
	...

080004ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004ec:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80004ee:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <HAL_InitTick+0x40>)
{
 80004f0:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 80004f2:	7819      	ldrb	r1, [r3, #0]
 80004f4:	2900      	cmp	r1, #0
 80004f6:	d101      	bne.n	80004fc <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80004f8:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80004fa:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80004fc:	20fa      	movs	r0, #250	@ 0xfa
 80004fe:	0080      	lsls	r0, r0, #2
 8000500:	f7ff fdfe 	bl	8000100 <__udivsi3>
 8000504:	4d0a      	ldr	r5, [pc, #40]	@ (8000530 <HAL_InitTick+0x44>)
 8000506:	0001      	movs	r1, r0
 8000508:	6828      	ldr	r0, [r5, #0]
 800050a:	f7ff fdf9 	bl	8000100 <__udivsi3>
 800050e:	f000 f86f 	bl	80005f0 <HAL_SYSTICK_Config>
 8000512:	2800      	cmp	r0, #0
 8000514:	d1f0      	bne.n	80004f8 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000516:	2c03      	cmp	r4, #3
 8000518:	d8ee      	bhi.n	80004f8 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800051a:	3801      	subs	r0, #1
 800051c:	2200      	movs	r2, #0
 800051e:	0021      	movs	r1, r4
 8000520:	f000 f830 	bl	8000584 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000524:	4b03      	ldr	r3, [pc, #12]	@ (8000534 <HAL_InitTick+0x48>)
 8000526:	2000      	movs	r0, #0
 8000528:	601c      	str	r4, [r3, #0]
  return status;
 800052a:	e7e6      	b.n	80004fa <HAL_InitTick+0xe>
 800052c:	20000004 	.word	0x20000004
 8000530:	20000000 	.word	0x20000000
 8000534:	20000008 	.word	0x20000008

08000538 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000538:	2380      	movs	r3, #128	@ 0x80
 800053a:	4a08      	ldr	r2, [pc, #32]	@ (800055c <HAL_Init+0x24>)
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	6811      	ldr	r1, [r2, #0]
{
 8000540:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000542:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000544:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000546:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000548:	f7ff ffd0 	bl	80004ec <HAL_InitTick>
 800054c:	1e04      	subs	r4, r0, #0
 800054e:	d002      	beq.n	8000556 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8000550:	2401      	movs	r4, #1
}
 8000552:	0020      	movs	r0, r4
 8000554:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8000556:	f7ff ff6f 	bl	8000438 <HAL_MspInit>
 800055a:	e7fa      	b.n	8000552 <HAL_Init+0x1a>
 800055c:	40022000 	.word	0x40022000

08000560 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000560:	4a03      	ldr	r2, [pc, #12]	@ (8000570 <HAL_IncTick+0x10>)
 8000562:	4b04      	ldr	r3, [pc, #16]	@ (8000574 <HAL_IncTick+0x14>)
 8000564:	6811      	ldr	r1, [r2, #0]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	185b      	adds	r3, r3, r1
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	4770      	bx	lr
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	20000150 	.word	0x20000150
 8000574:	20000004 	.word	0x20000004

08000578 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000578:	4b01      	ldr	r3, [pc, #4]	@ (8000580 <HAL_GetTick+0x8>)
 800057a:	6818      	ldr	r0, [r3, #0]
}
 800057c:	4770      	bx	lr
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	20000150 	.word	0x20000150

08000584 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000584:	22ff      	movs	r2, #255	@ 0xff
 8000586:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000588:	b510      	push	{r4, lr}
 800058a:	0014      	movs	r4, r2
 800058c:	4003      	ands	r3, r0
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000592:	0189      	lsls	r1, r1, #6
 8000594:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000596:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000598:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 800059a:	2800      	cmp	r0, #0
 800059c:	db0b      	blt.n	80005b6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800059e:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <HAL_NVIC_SetPriority+0x4c>)
 80005a0:	21c0      	movs	r1, #192	@ 0xc0
 80005a2:	469c      	mov	ip, r3
 80005a4:	0880      	lsrs	r0, r0, #2
 80005a6:	0080      	lsls	r0, r0, #2
 80005a8:	4460      	add	r0, ip
 80005aa:	0089      	lsls	r1, r1, #2
 80005ac:	5843      	ldr	r3, [r0, r1]
 80005ae:	4023      	ands	r3, r4
 80005b0:	4313      	orrs	r3, r2
 80005b2:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80005b4:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005b6:	230f      	movs	r3, #15
 80005b8:	4906      	ldr	r1, [pc, #24]	@ (80005d4 <HAL_NVIC_SetPriority+0x50>)
 80005ba:	4003      	ands	r3, r0
 80005bc:	468c      	mov	ip, r1
 80005be:	3b08      	subs	r3, #8
 80005c0:	089b      	lsrs	r3, r3, #2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4463      	add	r3, ip
 80005c6:	69d9      	ldr	r1, [r3, #28]
 80005c8:	400c      	ands	r4, r1
 80005ca:	4314      	orrs	r4, r2
 80005cc:	61dc      	str	r4, [r3, #28]
 80005ce:	e7f1      	b.n	80005b4 <HAL_NVIC_SetPriority+0x30>
 80005d0:	e000e100 	.word	0xe000e100
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005d8:	2800      	cmp	r0, #0
 80005da:	db05      	blt.n	80005e8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005dc:	221f      	movs	r2, #31
 80005de:	2301      	movs	r3, #1
 80005e0:	4002      	ands	r2, r0
 80005e2:	4093      	lsls	r3, r2
 80005e4:	4a01      	ldr	r2, [pc, #4]	@ (80005ec <HAL_NVIC_EnableIRQ+0x14>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80005e8:	4770      	bx	lr
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	e000e100 	.word	0xe000e100

080005f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005f0:	2280      	movs	r2, #128	@ 0x80
 80005f2:	1e43      	subs	r3, r0, #1
 80005f4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80005f6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d20e      	bcs.n	800061a <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005fc:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005fe:	4a07      	ldr	r2, [pc, #28]	@ (800061c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000600:	4807      	ldr	r0, [pc, #28]	@ (8000620 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000602:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000604:	6a03      	ldr	r3, [r0, #32]
 8000606:	0609      	lsls	r1, r1, #24
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	0a1b      	lsrs	r3, r3, #8
 800060c:	430b      	orrs	r3, r1
 800060e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000610:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000612:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000614:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000616:	3307      	adds	r3, #7
 8000618:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800061a:	4770      	bx	lr
 800061c:	e000e010 	.word	0xe000e010
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	46c6      	mov	lr, r8
 8000628:	0004      	movs	r4, r0
 800062a:	b500      	push	{lr}
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800062c:	2800      	cmp	r0, #0
 800062e:	d060      	beq.n	80006f2 <HAL_DMA_Init+0xce>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000630:	6805      	ldr	r5, [r0, #0]
 8000632:	4b31      	ldr	r3, [pc, #196]	@ (80006f8 <HAL_DMA_Init+0xd4>)
 8000634:	2114      	movs	r1, #20
 8000636:	18e8      	adds	r0, r5, r3
 8000638:	f7ff fd62 	bl	8000100 <__udivsi3>
 800063c:	0083      	lsls	r3, r0, #2
 800063e:	6423      	str	r3, [r4, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000640:	2202      	movs	r2, #2
 8000642:	2325      	movs	r3, #37	@ 0x25
 8000644:	54e2      	strb	r2, [r4, r3]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000646:	682b      	ldr	r3, [r5, #0]
 8000648:	4a2c      	ldr	r2, [pc, #176]	@ (80006fc <HAL_DMA_Init+0xd8>)
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800064a:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800064c:	4013      	ands	r3, r2
 800064e:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000650:	68e3      	ldr	r3, [r4, #12]
 8000652:	6921      	ldr	r1, [r4, #16]
 8000654:	4333      	orrs	r3, r6
 8000656:	430b      	orrs	r3, r1
 8000658:	6961      	ldr	r1, [r4, #20]
 800065a:	682a      	ldr	r2, [r5, #0]
 800065c:	430b      	orrs	r3, r1
 800065e:	69a1      	ldr	r1, [r4, #24]
 8000660:	430b      	orrs	r3, r1
 8000662:	69e1      	ldr	r1, [r4, #28]
 8000664:	430b      	orrs	r3, r1
 8000666:	6a21      	ldr	r1, [r4, #32]
 8000668:	430b      	orrs	r3, r1
 800066a:	4313      	orrs	r3, r2
 800066c:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800066e:	4b24      	ldr	r3, [pc, #144]	@ (8000700 <HAL_DMA_Init+0xdc>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000670:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000672:	469c      	mov	ip, r3
 8000674:	4460      	add	r0, ip
 8000676:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000678:	20ff      	movs	r0, #255	@ 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800067a:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <HAL_DMA_Init+0xe0>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800067c:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800067e:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000680:	6467      	str	r7, [r4, #68]	@ 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000682:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000684:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000686:	f7ff fd3b 	bl	8000100 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800068a:	231f      	movs	r3, #31
 800068c:	2201      	movs	r2, #1
 800068e:	4003      	ands	r3, r0
 8000690:	0010      	movs	r0, r2
 8000692:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000694:	2380      	movs	r3, #128	@ 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000696:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000698:	01db      	lsls	r3, r3, #7
 800069a:	429e      	cmp	r6, r3
 800069c:	d01f      	beq.n	80006de <HAL_DMA_Init+0xba>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800069e:	233f      	movs	r3, #63	@ 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80006a0:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80006a2:	6861      	ldr	r1, [r4, #4]
 80006a4:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80006a6:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80006a8:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80006aa:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80006ac:	2903      	cmp	r1, #3
 80006ae:	d81b      	bhi.n	80006e8 <HAL_DMA_Init+0xc4>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80006b0:	4915      	ldr	r1, [pc, #84]	@ (8000708 <HAL_DMA_Init+0xe4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80006b2:	4816      	ldr	r0, [pc, #88]	@ (800070c <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80006b4:	1859      	adds	r1, r3, r1

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80006b6:	3b01      	subs	r3, #1
 80006b8:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80006ba:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80006bc:	0089      	lsls	r1, r1, #2
 80006be:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80006c0:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80006c2:	65a2      	str	r2, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80006c4:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80006c6:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006c8:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80006ca:	2225      	movs	r2, #37	@ 0x25
 80006cc:	2101      	movs	r1, #1
  return HAL_OK;
 80006ce:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006d0:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80006d2:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 80006d4:	3a01      	subs	r2, #1
 80006d6:	54a3      	strb	r3, [r4, r2]
}
 80006d8:	bc80      	pop	{r7}
 80006da:	46b8      	mov	r8, r7
 80006dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80006de:	2300      	movs	r3, #0
 80006e0:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80006e2:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80006e4:	4643      	mov	r3, r8
 80006e6:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 80006e8:	2300      	movs	r3, #0
 80006ea:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80006ec:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80006ee:	65a3      	str	r3, [r4, #88]	@ 0x58
 80006f0:	e7ea      	b.n	80006c8 <HAL_DMA_Init+0xa4>
    return HAL_ERROR;
 80006f2:	2001      	movs	r0, #1
 80006f4:	e7f0      	b.n	80006d8 <HAL_DMA_Init+0xb4>
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	bffdfff8 	.word	0xbffdfff8
 80006fc:	ffff800f 	.word	0xffff800f
 8000700:	10008200 	.word	0x10008200
 8000704:	40020880 	.word	0x40020880
 8000708:	1000823f 	.word	0x1000823f
 800070c:	40020940 	.word	0x40020940

08000710 <HAL_DMA_IRQHandler>:
{
 8000710:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000712:	211c      	movs	r1, #28
 8000714:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 8000716:	4b2b      	ldr	r3, [pc, #172]	@ (80007c4 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 8000718:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 800071a:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800071c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800071e:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000720:	400b      	ands	r3, r1
 8000722:	0021      	movs	r1, r4
 8000724:	4099      	lsls	r1, r3
 8000726:	420a      	tst	r2, r1
 8000728:	d010      	beq.n	800074c <HAL_DMA_IRQHandler+0x3c>
 800072a:	422c      	tst	r4, r5
 800072c:	d00e      	beq.n	800074c <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800072e:	6833      	ldr	r3, [r6, #0]
 8000730:	069b      	lsls	r3, r3, #26
 8000732:	d402      	bmi.n	800073a <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000734:	6833      	ldr	r3, [r6, #0]
 8000736:	43a3      	bics	r3, r4
 8000738:	6033      	str	r3, [r6, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800073a:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <HAL_DMA_IRQHandler+0xb4>)
 800073c:	685a      	ldr	r2, [r3, #4]
 800073e:	4311      	orrs	r1, r2
 8000740:	6059      	str	r1, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8000742:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8000744:	2b00      	cmp	r3, #0
 8000746:	d000      	beq.n	800074a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8000748:	4798      	blx	r3
}
 800074a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800074c:	2402      	movs	r4, #2
 800074e:	0021      	movs	r1, r4
 8000750:	4099      	lsls	r1, r3
 8000752:	420a      	tst	r2, r1
 8000754:	d017      	beq.n	8000786 <HAL_DMA_IRQHandler+0x76>
 8000756:	422c      	tst	r4, r5
 8000758:	d015      	beq.n	8000786 <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800075a:	6833      	ldr	r3, [r6, #0]
 800075c:	069b      	lsls	r3, r3, #26
 800075e:	d406      	bmi.n	800076e <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000760:	220a      	movs	r2, #10
 8000762:	6833      	ldr	r3, [r6, #0]
 8000764:	4393      	bics	r3, r2
 8000766:	6033      	str	r3, [r6, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8000768:	2325      	movs	r3, #37	@ 0x25
 800076a:	3a09      	subs	r2, #9
 800076c:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <HAL_DMA_IRQHandler+0xb4>)
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	4311      	orrs	r1, r2
 8000774:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 8000776:	2200      	movs	r2, #0
 8000778:	2324      	movs	r3, #36	@ 0x24
 800077a:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 800077c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0e3      	beq.n	800074a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8000782:	4798      	blx	r3
  return;
 8000784:	e7e1      	b.n	800074a <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000786:	2108      	movs	r1, #8
 8000788:	000c      	movs	r4, r1
 800078a:	409c      	lsls	r4, r3
 800078c:	4222      	tst	r2, r4
 800078e:	d0dc      	beq.n	800074a <HAL_DMA_IRQHandler+0x3a>
 8000790:	4229      	tst	r1, r5
 8000792:	d0da      	beq.n	800074a <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000794:	6832      	ldr	r2, [r6, #0]
 8000796:	3106      	adds	r1, #6
 8000798:	438a      	bics	r2, r1
 800079a:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800079c:	2201      	movs	r2, #1
 800079e:	0015      	movs	r5, r2
 80007a0:	409d      	lsls	r5, r3
 80007a2:	002b      	movs	r3, r5
 80007a4:	4907      	ldr	r1, [pc, #28]	@ (80007c4 <HAL_DMA_IRQHandler+0xb4>)
 80007a6:	684c      	ldr	r4, [r1, #4]
 80007a8:	4323      	orrs	r3, r4
 80007aa:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80007ac:	2325      	movs	r3, #37	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80007ae:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80007b0:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80007b2:	2200      	movs	r2, #0
 80007b4:	3b01      	subs	r3, #1
 80007b6:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80007b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0c5      	beq.n	800074a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80007be:	4798      	blx	r3
  return;
 80007c0:	e7c3      	b.n	800074a <HAL_DMA_IRQHandler+0x3a>
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	40020000 	.word	0x40020000

080007c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ca:	46de      	mov	lr, fp
 80007cc:	4657      	mov	r7, sl
 80007ce:	464e      	mov	r6, r9
 80007d0:	4645      	mov	r5, r8
 80007d2:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007d4:	680c      	ldr	r4, [r1, #0]
{
 80007d6:	468b      	mov	fp, r1
  uint32_t position = 0x00u;
 80007d8:	2300      	movs	r3, #0
{
 80007da:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007dc:	2c00      	cmp	r4, #0
 80007de:	d068      	beq.n	80008b2 <HAL_GPIO_Init+0xea>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007e0:	2201      	movs	r2, #1
 80007e2:	409a      	lsls	r2, r3
 80007e4:	4694      	mov	ip, r2
 80007e6:	4022      	ands	r2, r4
 80007e8:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 80007ea:	4662      	mov	r2, ip
 80007ec:	4214      	tst	r4, r2
 80007ee:	d05c      	beq.n	80008aa <HAL_GPIO_Init+0xe2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007f0:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007f2:	465a      	mov	r2, fp
 80007f4:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007f6:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007f8:	6855      	ldr	r5, [r2, #4]
 80007fa:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007fc:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007fe:	402a      	ands	r2, r5
 8000800:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000802:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000804:	2e01      	cmp	r6, #1
 8000806:	d95b      	bls.n	80008c0 <HAL_GPIO_Init+0xf8>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000808:	2a03      	cmp	r2, #3
 800080a:	d000      	beq.n	800080e <HAL_GPIO_Init+0x46>
 800080c:	e0ad      	b.n	800096a <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800080e:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000810:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000812:	9900      	ldr	r1, [sp, #0]
 8000814:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000816:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8000818:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800081a:	22c0      	movs	r2, #192	@ 0xc0
 800081c:	0292      	lsls	r2, r2, #10
 800081e:	4215      	tst	r5, r2
 8000820:	d043      	beq.n	80008aa <HAL_GPIO_Init+0xe2>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000822:	2703      	movs	r7, #3
 8000824:	260f      	movs	r6, #15
 8000826:	495d      	ldr	r1, [pc, #372]	@ (800099c <HAL_GPIO_Init+0x1d4>)
 8000828:	401f      	ands	r7, r3
 800082a:	468c      	mov	ip, r1
 800082c:	00ff      	lsls	r7, r7, #3
 800082e:	40be      	lsls	r6, r7
        temp = EXTI->EXTICR[position >> 2u];
 8000830:	089a      	lsrs	r2, r3, #2
 8000832:	0092      	lsls	r2, r2, #2
 8000834:	4462      	add	r2, ip
 8000836:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000838:	43b1      	bics	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800083a:	26a0      	movs	r6, #160	@ 0xa0
 800083c:	05f6      	lsls	r6, r6, #23
 800083e:	42b0      	cmp	r0, r6
 8000840:	d00e      	beq.n	8000860 <HAL_GPIO_Init+0x98>
 8000842:	4e57      	ldr	r6, [pc, #348]	@ (80009a0 <HAL_GPIO_Init+0x1d8>)
 8000844:	42b0      	cmp	r0, r6
 8000846:	d100      	bne.n	800084a <HAL_GPIO_Init+0x82>
 8000848:	e0a0      	b.n	800098c <HAL_GPIO_Init+0x1c4>
 800084a:	4e56      	ldr	r6, [pc, #344]	@ (80009a4 <HAL_GPIO_Init+0x1dc>)
 800084c:	42b0      	cmp	r0, r6
 800084e:	d100      	bne.n	8000852 <HAL_GPIO_Init+0x8a>
 8000850:	e0a0      	b.n	8000994 <HAL_GPIO_Init+0x1cc>
 8000852:	4e55      	ldr	r6, [pc, #340]	@ (80009a8 <HAL_GPIO_Init+0x1e0>)
 8000854:	42b0      	cmp	r0, r6
 8000856:	d100      	bne.n	800085a <HAL_GPIO_Init+0x92>
 8000858:	e094      	b.n	8000984 <HAL_GPIO_Init+0x1bc>
 800085a:	2605      	movs	r6, #5
 800085c:	40be      	lsls	r6, r7
 800085e:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000860:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 8000862:	6611      	str	r1, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 8000864:	4651      	mov	r1, sl
        temp = EXTI->RTSR1;
 8000866:	4a4d      	ldr	r2, [pc, #308]	@ (800099c <HAL_GPIO_Init+0x1d4>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000868:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 800086a:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR1;
 800086c:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800086e:	4235      	tst	r5, r6
 8000870:	d000      	beq.n	8000874 <HAL_GPIO_Init+0xac>
 8000872:	e077      	b.n	8000964 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8000874:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8000876:	4e49      	ldr	r6, [pc, #292]	@ (800099c <HAL_GPIO_Init+0x1d4>)
 8000878:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 800087a:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800087c:	2680      	movs	r6, #128	@ 0x80
 800087e:	03b6      	lsls	r6, r6, #14
 8000880:	4235      	tst	r5, r6
 8000882:	d16c      	bne.n	800095e <HAL_GPIO_Init+0x196>
        temp &= ~(iocurrent);
 8000884:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8000886:	4e45      	ldr	r6, [pc, #276]	@ (800099c <HAL_GPIO_Init+0x1d4>)
 8000888:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800088a:	2284      	movs	r2, #132	@ 0x84
 800088c:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800088e:	03af      	lsls	r7, r5, #14
 8000890:	d462      	bmi.n	8000958 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 8000892:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8000894:	2784      	movs	r7, #132	@ 0x84
 8000896:	4e41      	ldr	r6, [pc, #260]	@ (800099c <HAL_GPIO_Init+0x1d4>)
 8000898:	51f2      	str	r2, [r6, r7]

        temp = EXTI->IMR1;
 800089a:	2280      	movs	r2, #128	@ 0x80
 800089c:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800089e:	03ed      	lsls	r5, r5, #15
 80008a0:	d456      	bmi.n	8000950 <HAL_GPIO_Init+0x188>
        temp &= ~(iocurrent);
 80008a2:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80008a4:	2180      	movs	r1, #128	@ 0x80
 80008a6:	4d3d      	ldr	r5, [pc, #244]	@ (800099c <HAL_GPIO_Init+0x1d4>)
 80008a8:	506a      	str	r2, [r5, r1]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008aa:	0022      	movs	r2, r4
      }
    }

    position++;
 80008ac:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ae:	40da      	lsrs	r2, r3
 80008b0:	d196      	bne.n	80007e0 <HAL_GPIO_Init+0x18>
  }
}
 80008b2:	b003      	add	sp, #12
 80008b4:	bcf0      	pop	{r4, r5, r6, r7}
 80008b6:	46bb      	mov	fp, r7
 80008b8:	46b2      	mov	sl, r6
 80008ba:	46a9      	mov	r9, r5
 80008bc:	46a0      	mov	r8, r4
 80008be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80008c0:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008c2:	000e      	movs	r6, r1
 80008c4:	9900      	ldr	r1, [sp, #0]
 80008c6:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008c8:	4659      	mov	r1, fp
 80008ca:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008cc:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008ce:	000e      	movs	r6, r1
 80008d0:	40be      	lsls	r6, r7
 80008d2:	46b0      	mov	r8, r6
 80008d4:	464e      	mov	r6, r9
 80008d6:	4641      	mov	r1, r8
 80008d8:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 80008da:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80008dc:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008de:	000e      	movs	r6, r1
 80008e0:	4661      	mov	r1, ip
 80008e2:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008e4:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008e6:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008e8:	000e      	movs	r6, r1
 80008ea:	2101      	movs	r1, #1
 80008ec:	400e      	ands	r6, r1
 80008ee:	409e      	lsls	r6, r3
 80008f0:	46b4      	mov	ip, r6
 80008f2:	4646      	mov	r6, r8
 80008f4:	4661      	mov	r1, ip
 80008f6:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 80008f8:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80008fa:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008fc:	000e      	movs	r6, r1
 80008fe:	9900      	ldr	r1, [sp, #0]
 8000900:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000902:	4659      	mov	r1, fp
 8000904:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000906:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000908:	000e      	movs	r6, r1
 800090a:	40be      	lsls	r6, r7
 800090c:	46b4      	mov	ip, r6
 800090e:	4646      	mov	r6, r8
 8000910:	4661      	mov	r1, ip
 8000912:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 8000914:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000916:	2a02      	cmp	r2, #2
 8000918:	d000      	beq.n	800091c <HAL_GPIO_Init+0x154>
 800091a:	e778      	b.n	800080e <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 800091c:	08d9      	lsrs	r1, r3, #3
 800091e:	0089      	lsls	r1, r1, #2
 8000920:	468c      	mov	ip, r1
 8000922:	4484      	add	ip, r0
 8000924:	4661      	mov	r1, ip
 8000926:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000928:	2107      	movs	r1, #7
 800092a:	4019      	ands	r1, r3
 800092c:	0089      	lsls	r1, r1, #2
 800092e:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 8000930:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000932:	210f      	movs	r1, #15
 8000934:	4646      	mov	r6, r8
 8000936:	40b1      	lsls	r1, r6
 8000938:	9e01      	ldr	r6, [sp, #4]
 800093a:	438e      	bics	r6, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800093c:	4659      	mov	r1, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800093e:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000940:	4646      	mov	r6, r8
 8000942:	6909      	ldr	r1, [r1, #16]
 8000944:	40b1      	lsls	r1, r6
 8000946:	9e01      	ldr	r6, [sp, #4]
 8000948:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 800094a:	4661      	mov	r1, ip
 800094c:	620e      	str	r6, [r1, #32]
 800094e:	e75e      	b.n	800080e <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 8000950:	4651      	mov	r1, sl
 8000952:	4311      	orrs	r1, r2
 8000954:	000a      	movs	r2, r1
 8000956:	e7a5      	b.n	80008a4 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8000958:	4656      	mov	r6, sl
 800095a:	4332      	orrs	r2, r6
 800095c:	e79a      	b.n	8000894 <HAL_GPIO_Init+0xcc>
          temp |= iocurrent;
 800095e:	4656      	mov	r6, sl
 8000960:	4332      	orrs	r2, r6
 8000962:	e790      	b.n	8000886 <HAL_GPIO_Init+0xbe>
          temp |= iocurrent;
 8000964:	4656      	mov	r6, sl
 8000966:	4332      	orrs	r2, r6
 8000968:	e785      	b.n	8000876 <HAL_GPIO_Init+0xae>
        temp = GPIOx->PUPDR;
 800096a:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800096c:	9e00      	ldr	r6, [sp, #0]
 800096e:	4031      	ands	r1, r6
 8000970:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000972:	4659      	mov	r1, fp
 8000974:	6889      	ldr	r1, [r1, #8]
 8000976:	40b9      	lsls	r1, r7
 8000978:	468c      	mov	ip, r1
 800097a:	4641      	mov	r1, r8
 800097c:	4666      	mov	r6, ip
 800097e:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8000980:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000982:	e744      	b.n	800080e <HAL_GPIO_Init+0x46>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000984:	2603      	movs	r6, #3
 8000986:	40be      	lsls	r6, r7
 8000988:	4331      	orrs	r1, r6
 800098a:	e769      	b.n	8000860 <HAL_GPIO_Init+0x98>
 800098c:	2601      	movs	r6, #1
 800098e:	40be      	lsls	r6, r7
 8000990:	4331      	orrs	r1, r6
 8000992:	e765      	b.n	8000860 <HAL_GPIO_Init+0x98>
 8000994:	2602      	movs	r6, #2
 8000996:	40be      	lsls	r6, r7
 8000998:	4331      	orrs	r1, r6
 800099a:	e761      	b.n	8000860 <HAL_GPIO_Init+0x98>
 800099c:	40021800 	.word	0x40021800
 80009a0:	50000400 	.word	0x50000400
 80009a4:	50000800 	.word	0x50000800
 80009a8:	50000c00 	.word	0x50000c00

080009ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009ac:	2a00      	cmp	r2, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009b0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80009b2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009b4:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80009b6:	e7fc      	b.n	80009b2 <HAL_GPIO_WritePin+0x6>

080009b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80009b8:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80009ba:	4c13      	ldr	r4, [pc, #76]	@ (8000a08 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80009bc:	4a13      	ldr	r2, [pc, #76]	@ (8000a0c <HAL_PWREx_ControlVoltageScaling+0x54>)
 80009be:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80009c0:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80009c2:	4013      	ands	r3, r2
 80009c4:	4303      	orrs	r3, r0
 80009c6:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80009c8:	2380      	movs	r3, #128	@ 0x80
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4298      	cmp	r0, r3
 80009ce:	d001      	beq.n	80009d4 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 80009d0:	0028      	movs	r0, r5
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <HAL_PWREx_ControlVoltageScaling+0x58>)
 80009d6:	490f      	ldr	r1, [pc, #60]	@ (8000a14 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	0058      	lsls	r0, r3, #1
 80009dc:	18c0      	adds	r0, r0, r3
 80009de:	0040      	lsls	r0, r0, #1
 80009e0:	f7ff fb8e 	bl	8000100 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009e4:	2280      	movs	r2, #128	@ 0x80
 80009e6:	6963      	ldr	r3, [r4, #20]
 80009e8:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80009ea:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009ec:	4213      	tst	r3, r2
 80009ee:	d102      	bne.n	80009f6 <HAL_PWREx_ControlVoltageScaling+0x3e>
 80009f0:	e7ee      	b.n	80009d0 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 80009f2:	2800      	cmp	r0, #0
 80009f4:	d005      	beq.n	8000a02 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009f6:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 80009f8:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009fa:	4213      	tst	r3, r2
 80009fc:	d1f9      	bne.n	80009f2 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 80009fe:	2500      	movs	r5, #0
 8000a00:	e7e6      	b.n	80009d0 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8000a02:	2503      	movs	r5, #3
 8000a04:	e7e4      	b.n	80009d0 <HAL_PWREx_ControlVoltageScaling+0x18>
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	40007000 	.word	0x40007000
 8000a0c:	fffff9ff 	.word	0xfffff9ff
 8000a10:	20000000 	.word	0x20000000
 8000a14:	000f4240 	.word	0x000f4240

08000a18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1a:	46ce      	mov	lr, r9
 8000a1c:	4647      	mov	r7, r8
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	0004      	movs	r4, r0
 8000a22:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a24:	2800      	cmp	r0, #0
 8000a26:	d027      	beq.n	8000a78 <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a28:	6803      	ldr	r3, [r0, #0]
 8000a2a:	07da      	lsls	r2, r3, #31
 8000a2c:	d511      	bpl.n	8000a52 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a2e:	2238      	movs	r2, #56	@ 0x38
 8000a30:	49c0      	ldr	r1, [pc, #768]	@ (8000d34 <HAL_RCC_OscConfig+0x31c>)
 8000a32:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a34:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a36:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000a38:	2a10      	cmp	r2, #16
 8000a3a:	d100      	bne.n	8000a3e <HAL_RCC_OscConfig+0x26>
 8000a3c:	e0cc      	b.n	8000bd8 <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000a3e:	2a08      	cmp	r2, #8
 8000a40:	d000      	beq.n	8000a44 <HAL_RCC_OscConfig+0x2c>
 8000a42:	e0cd      	b.n	8000be0 <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a44:	4abb      	ldr	r2, [pc, #748]	@ (8000d34 <HAL_RCC_OscConfig+0x31c>)
 8000a46:	6812      	ldr	r2, [r2, #0]
 8000a48:	0392      	lsls	r2, r2, #14
 8000a4a:	d502      	bpl.n	8000a52 <HAL_RCC_OscConfig+0x3a>
 8000a4c:	6862      	ldr	r2, [r4, #4]
 8000a4e:	2a00      	cmp	r2, #0
 8000a50:	d012      	beq.n	8000a78 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a52:	079a      	lsls	r2, r3, #30
 8000a54:	d532      	bpl.n	8000abc <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a56:	2338      	movs	r3, #56	@ 0x38
 8000a58:	4ab6      	ldr	r2, [pc, #728]	@ (8000d34 <HAL_RCC_OscConfig+0x31c>)
 8000a5a:	6891      	ldr	r1, [r2, #8]
 8000a5c:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a5e:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000a60:	2b10      	cmp	r3, #16
 8000a62:	d100      	bne.n	8000a66 <HAL_RCC_OscConfig+0x4e>
 8000a64:	e10b      	b.n	8000c7e <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d000      	beq.n	8000a6c <HAL_RCC_OscConfig+0x54>
 8000a6a:	e10d      	b.n	8000c88 <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000a6c:	6813      	ldr	r3, [r2, #0]
 8000a6e:	055b      	lsls	r3, r3, #21
 8000a70:	d508      	bpl.n	8000a84 <HAL_RCC_OscConfig+0x6c>
 8000a72:	68e3      	ldr	r3, [r4, #12]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d105      	bne.n	8000a84 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8000a78:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8000a7a:	b003      	add	sp, #12
 8000a7c:	bcc0      	pop	{r6, r7}
 8000a7e:	46b9      	mov	r9, r7
 8000a80:	46b0      	mov	r8, r6
 8000a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a84:	6851      	ldr	r1, [r2, #4]
 8000a86:	6963      	ldr	r3, [r4, #20]
 8000a88:	48ab      	ldr	r0, [pc, #684]	@ (8000d38 <HAL_RCC_OscConfig+0x320>)
 8000a8a:	021b      	lsls	r3, r3, #8
 8000a8c:	4001      	ands	r1, r0
 8000a8e:	430b      	orrs	r3, r1
 8000a90:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000a92:	4aa8      	ldr	r2, [pc, #672]	@ (8000d34 <HAL_RCC_OscConfig+0x31c>)
 8000a94:	49a9      	ldr	r1, [pc, #676]	@ (8000d3c <HAL_RCC_OscConfig+0x324>)
 8000a96:	6813      	ldr	r3, [r2, #0]
 8000a98:	400b      	ands	r3, r1
 8000a9a:	6921      	ldr	r1, [r4, #16]
 8000a9c:	430b      	orrs	r3, r1
 8000a9e:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000aa0:	6813      	ldr	r3, [r2, #0]
 8000aa2:	4aa7      	ldr	r2, [pc, #668]	@ (8000d40 <HAL_RCC_OscConfig+0x328>)
 8000aa4:	049b      	lsls	r3, r3, #18
 8000aa6:	0f5b      	lsrs	r3, r3, #29
 8000aa8:	40da      	lsrs	r2, r3
 8000aaa:	49a6      	ldr	r1, [pc, #664]	@ (8000d44 <HAL_RCC_OscConfig+0x32c>)
 8000aac:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000aae:	4ba6      	ldr	r3, [pc, #664]	@ (8000d48 <HAL_RCC_OscConfig+0x330>)
 8000ab0:	6818      	ldr	r0, [r3, #0]
 8000ab2:	f7ff fd1b 	bl	80004ec <HAL_InitTick>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	d1de      	bne.n	8000a78 <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000aba:	6823      	ldr	r3, [r4, #0]
 8000abc:	071a      	lsls	r2, r3, #28
 8000abe:	d46d      	bmi.n	8000b9c <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ac0:	075b      	lsls	r3, r3, #29
 8000ac2:	d545      	bpl.n	8000b50 <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000ac4:	2338      	movs	r3, #56	@ 0x38
 8000ac6:	4a9b      	ldr	r2, [pc, #620]	@ (8000d34 <HAL_RCC_OscConfig+0x31c>)
 8000ac8:	6891      	ldr	r1, [r2, #8]
 8000aca:	400b      	ands	r3, r1
 8000acc:	2b20      	cmp	r3, #32
 8000ace:	d100      	bne.n	8000ad2 <HAL_RCC_OscConfig+0xba>
 8000ad0:	e0cc      	b.n	8000c6c <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000ad2:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000ad4:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000ad6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000ad8:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8000ada:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000adc:	4219      	tst	r1, r3
 8000ade:	d108      	bne.n	8000af2 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 8000ae0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000ae2:	4319      	orrs	r1, r3
 8000ae4:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8000ae6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8000ae8:	4013      	ands	r3, r2
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8000aee:	2301      	movs	r3, #1
 8000af0:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000af2:	2780      	movs	r7, #128	@ 0x80
 8000af4:	4e95      	ldr	r6, [pc, #596]	@ (8000d4c <HAL_RCC_OscConfig+0x334>)
 8000af6:	007f      	lsls	r7, r7, #1
 8000af8:	6833      	ldr	r3, [r6, #0]
 8000afa:	423b      	tst	r3, r7
 8000afc:	d100      	bne.n	8000b00 <HAL_RCC_OscConfig+0xe8>
 8000afe:	e0ff      	b.n	8000d00 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b00:	68a3      	ldr	r3, [r4, #8]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d100      	bne.n	8000b08 <HAL_RCC_OscConfig+0xf0>
 8000b06:	e0e5      	b.n	8000cd4 <HAL_RCC_OscConfig+0x2bc>
 8000b08:	2b05      	cmp	r3, #5
 8000b0a:	d100      	bne.n	8000b0e <HAL_RCC_OscConfig+0xf6>
 8000b0c:	e1c8      	b.n	8000ea0 <HAL_RCC_OscConfig+0x488>
 8000b0e:	2101      	movs	r1, #1
 8000b10:	4e88      	ldr	r6, [pc, #544]	@ (8000d34 <HAL_RCC_OscConfig+0x31c>)
 8000b12:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8000b14:	438a      	bics	r2, r1
 8000b16:	65f2      	str	r2, [r6, #92]	@ 0x5c
 8000b18:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8000b1a:	3103      	adds	r1, #3
 8000b1c:	438a      	bics	r2, r1
 8000b1e:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d000      	beq.n	8000b26 <HAL_RCC_OscConfig+0x10e>
 8000b24:	e0da      	b.n	8000cdc <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 8000b26:	f7ff fd27 	bl	8000578 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000b2a:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8000b2c:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000b2e:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b30:	4d87      	ldr	r5, [pc, #540]	@ (8000d50 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000b32:	e005      	b.n	8000b40 <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b34:	f7ff fd20 	bl	8000578 <HAL_GetTick>
 8000b38:	1bc0      	subs	r0, r0, r7
 8000b3a:	42a8      	cmp	r0, r5
 8000b3c:	d900      	bls.n	8000b40 <HAL_RCC_OscConfig+0x128>
 8000b3e:	e0ee      	b.n	8000d1e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000b40:	4642      	mov	r2, r8
 8000b42:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8000b44:	421a      	tst	r2, r3
 8000b46:	d1f5      	bne.n	8000b34 <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 8000b48:	464b      	mov	r3, r9
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d100      	bne.n	8000b50 <HAL_RCC_OscConfig+0x138>
 8000b4e:	e163      	b.n	8000e18 <HAL_RCC_OscConfig+0x400>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000b50:	69e3      	ldr	r3, [r4, #28]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d020      	beq.n	8000b98 <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b56:	2238      	movs	r2, #56	@ 0x38
 8000b58:	4d76      	ldr	r5, [pc, #472]	@ (8000d34 <HAL_RCC_OscConfig+0x31c>)
 8000b5a:	68a9      	ldr	r1, [r5, #8]
 8000b5c:	400a      	ands	r2, r1
 8000b5e:	2a10      	cmp	r2, #16
 8000b60:	d100      	bne.n	8000b64 <HAL_RCC_OscConfig+0x14c>
 8000b62:	e11d      	b.n	8000da0 <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d100      	bne.n	8000b6a <HAL_RCC_OscConfig+0x152>
 8000b68:	e15c      	b.n	8000e24 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_PLL_DISABLE();
 8000b6a:	682b      	ldr	r3, [r5, #0]
 8000b6c:	4a79      	ldr	r2, [pc, #484]	@ (8000d54 <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000b6e:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8000b70:	4013      	ands	r3, r2
 8000b72:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b74:	f7ff fd00 	bl	8000578 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000b78:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8000b7a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000b7c:	e005      	b.n	8000b8a <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b7e:	f7ff fcfb 	bl	8000578 <HAL_GetTick>
 8000b82:	1b00      	subs	r0, r0, r4
 8000b84:	2802      	cmp	r0, #2
 8000b86:	d900      	bls.n	8000b8a <HAL_RCC_OscConfig+0x172>
 8000b88:	e0c9      	b.n	8000d1e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000b8a:	682b      	ldr	r3, [r5, #0]
 8000b8c:	4233      	tst	r3, r6
 8000b8e:	d1f6      	bne.n	8000b7e <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8000b90:	68eb      	ldr	r3, [r5, #12]
 8000b92:	4a71      	ldr	r2, [pc, #452]	@ (8000d58 <HAL_RCC_OscConfig+0x340>)
 8000b94:	4013      	ands	r3, r2
 8000b96:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8000b98:	2000      	movs	r0, #0
 8000b9a:	e76e      	b.n	8000a7a <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000b9c:	2238      	movs	r2, #56	@ 0x38
 8000b9e:	4d65      	ldr	r5, [pc, #404]	@ (8000d34 <HAL_RCC_OscConfig+0x31c>)
 8000ba0:	68a9      	ldr	r1, [r5, #8]
 8000ba2:	400a      	ands	r2, r1
 8000ba4:	2a18      	cmp	r2, #24
 8000ba6:	d043      	beq.n	8000c30 <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ba8:	69a3      	ldr	r3, [r4, #24]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d100      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x198>
 8000bae:	e0b8      	b.n	8000d22 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000bb4:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000bba:	f7ff fcdd 	bl	8000578 <HAL_GetTick>
 8000bbe:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000bc0:	e005      	b.n	8000bce <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bc2:	f7ff fcd9 	bl	8000578 <HAL_GetTick>
 8000bc6:	1b80      	subs	r0, r0, r6
 8000bc8:	2802      	cmp	r0, #2
 8000bca:	d900      	bls.n	8000bce <HAL_RCC_OscConfig+0x1b6>
 8000bcc:	e0a7      	b.n	8000d1e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000bce:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8000bd0:	421f      	tst	r7, r3
 8000bd2:	d0f6      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bd4:	6823      	ldr	r3, [r4, #0]
 8000bd6:	e773      	b.n	8000ac0 <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000bd8:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000bda:	0789      	lsls	r1, r1, #30
 8000bdc:	d100      	bne.n	8000be0 <HAL_RCC_OscConfig+0x1c8>
 8000bde:	e731      	b.n	8000a44 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be0:	2280      	movs	r2, #128	@ 0x80
 8000be2:	6863      	ldr	r3, [r4, #4]
 8000be4:	0252      	lsls	r2, r2, #9
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d02b      	beq.n	8000c42 <HAL_RCC_OscConfig+0x22a>
 8000bea:	21a0      	movs	r1, #160	@ 0xa0
 8000bec:	02c9      	lsls	r1, r1, #11
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d100      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x1dc>
 8000bf2:	e0fc      	b.n	8000dee <HAL_RCC_OscConfig+0x3d6>
 8000bf4:	4d4f      	ldr	r5, [pc, #316]	@ (8000d34 <HAL_RCC_OscConfig+0x31c>)
 8000bf6:	4959      	ldr	r1, [pc, #356]	@ (8000d5c <HAL_RCC_OscConfig+0x344>)
 8000bf8:	682a      	ldr	r2, [r5, #0]
 8000bfa:	400a      	ands	r2, r1
 8000bfc:	602a      	str	r2, [r5, #0]
 8000bfe:	682a      	ldr	r2, [r5, #0]
 8000c00:	4957      	ldr	r1, [pc, #348]	@ (8000d60 <HAL_RCC_OscConfig+0x348>)
 8000c02:	400a      	ands	r2, r1
 8000c04:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d11f      	bne.n	8000c4a <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 8000c0a:	f7ff fcb5 	bl	8000578 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c0e:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000c10:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c12:	02bf      	lsls	r7, r7, #10
 8000c14:	e004      	b.n	8000c20 <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c16:	f7ff fcaf 	bl	8000578 <HAL_GetTick>
 8000c1a:	1b80      	subs	r0, r0, r6
 8000c1c:	2864      	cmp	r0, #100	@ 0x64
 8000c1e:	d87e      	bhi.n	8000d1e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c20:	682b      	ldr	r3, [r5, #0]
 8000c22:	423b      	tst	r3, r7
 8000c24:	d1f7      	bne.n	8000c16 <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c26:	6823      	ldr	r3, [r4, #0]
 8000c28:	079a      	lsls	r2, r3, #30
 8000c2a:	d400      	bmi.n	8000c2e <HAL_RCC_OscConfig+0x216>
 8000c2c:	e746      	b.n	8000abc <HAL_RCC_OscConfig+0xa4>
 8000c2e:	e712      	b.n	8000a56 <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000c30:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8000c32:	0792      	lsls	r2, r2, #30
 8000c34:	d400      	bmi.n	8000c38 <HAL_RCC_OscConfig+0x220>
 8000c36:	e743      	b.n	8000ac0 <HAL_RCC_OscConfig+0xa8>
 8000c38:	69a2      	ldr	r2, [r4, #24]
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d000      	beq.n	8000c40 <HAL_RCC_OscConfig+0x228>
 8000c3e:	e73f      	b.n	8000ac0 <HAL_RCC_OscConfig+0xa8>
 8000c40:	e71a      	b.n	8000a78 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c42:	4a3c      	ldr	r2, [pc, #240]	@ (8000d34 <HAL_RCC_OscConfig+0x31c>)
 8000c44:	6811      	ldr	r1, [r2, #0]
 8000c46:	430b      	orrs	r3, r1
 8000c48:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000c4a:	f7ff fc95 	bl	8000578 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c4e:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000c50:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c52:	4f38      	ldr	r7, [pc, #224]	@ (8000d34 <HAL_RCC_OscConfig+0x31c>)
 8000c54:	02b6      	lsls	r6, r6, #10
 8000c56:	e004      	b.n	8000c62 <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c58:	f7ff fc8e 	bl	8000578 <HAL_GetTick>
 8000c5c:	1b40      	subs	r0, r0, r5
 8000c5e:	2864      	cmp	r0, #100	@ 0x64
 8000c60:	d85d      	bhi.n	8000d1e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	4233      	tst	r3, r6
 8000c66:	d0f7      	beq.n	8000c58 <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c68:	6823      	ldr	r3, [r4, #0]
 8000c6a:	e7dd      	b.n	8000c28 <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000c6c:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8000c6e:	079b      	lsls	r3, r3, #30
 8000c70:	d400      	bmi.n	8000c74 <HAL_RCC_OscConfig+0x25c>
 8000c72:	e76d      	b.n	8000b50 <HAL_RCC_OscConfig+0x138>
 8000c74:	68a3      	ldr	r3, [r4, #8]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d000      	beq.n	8000c7c <HAL_RCC_OscConfig+0x264>
 8000c7a:	e769      	b.n	8000b50 <HAL_RCC_OscConfig+0x138>
 8000c7c:	e6fc      	b.n	8000a78 <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c7e:	3b0d      	subs	r3, #13
 8000c80:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d100      	bne.n	8000c88 <HAL_RCC_OscConfig+0x270>
 8000c86:	e0bc      	b.n	8000e02 <HAL_RCC_OscConfig+0x3ea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c88:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000c8a:	4d2a      	ldr	r5, [pc, #168]	@ (8000d34 <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d073      	beq.n	8000d78 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000c90:	682b      	ldr	r3, [r5, #0]
 8000c92:	4a2a      	ldr	r2, [pc, #168]	@ (8000d3c <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c94:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000c96:	4013      	ands	r3, r2
 8000c98:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c9a:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8000ca0:	2380      	movs	r3, #128	@ 0x80
 8000ca2:	682a      	ldr	r2, [r5, #0]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000caa:	f7ff fc65 	bl	8000578 <HAL_GetTick>
 8000cae:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cb0:	e004      	b.n	8000cbc <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cb2:	f7ff fc61 	bl	8000578 <HAL_GetTick>
 8000cb6:	1b80      	subs	r0, r0, r6
 8000cb8:	2802      	cmp	r0, #2
 8000cba:	d830      	bhi.n	8000d1e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cbc:	682b      	ldr	r3, [r5, #0]
 8000cbe:	423b      	tst	r3, r7
 8000cc0:	d0f7      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc2:	686a      	ldr	r2, [r5, #4]
 8000cc4:	6963      	ldr	r3, [r4, #20]
 8000cc6:	491c      	ldr	r1, [pc, #112]	@ (8000d38 <HAL_RCC_OscConfig+0x320>)
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	400a      	ands	r2, r1
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cd0:	6823      	ldr	r3, [r4, #0]
 8000cd2:	e6f3      	b.n	8000abc <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cd4:	4917      	ldr	r1, [pc, #92]	@ (8000d34 <HAL_RCC_OscConfig+0x31c>)
 8000cd6:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fc4c 	bl	8000578 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000ce0:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8000ce2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000ce4:	4698      	mov	r8, r3
 8000ce6:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ce8:	4d19      	ldr	r5, [pc, #100]	@ (8000d50 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000cea:	e004      	b.n	8000cf6 <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cec:	f7ff fc44 	bl	8000578 <HAL_GetTick>
 8000cf0:	1b80      	subs	r0, r0, r6
 8000cf2:	42a8      	cmp	r0, r5
 8000cf4:	d813      	bhi.n	8000d1e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000cf6:	4643      	mov	r3, r8
 8000cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cfa:	421f      	tst	r7, r3
 8000cfc:	d0f6      	beq.n	8000cec <HAL_RCC_OscConfig+0x2d4>
 8000cfe:	e723      	b.n	8000b48 <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d00:	6833      	ldr	r3, [r6, #0]
 8000d02:	433b      	orrs	r3, r7
 8000d04:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000d06:	f7ff fc37 	bl	8000578 <HAL_GetTick>
 8000d0a:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d0c:	6833      	ldr	r3, [r6, #0]
 8000d0e:	423b      	tst	r3, r7
 8000d10:	d000      	beq.n	8000d14 <HAL_RCC_OscConfig+0x2fc>
 8000d12:	e6f5      	b.n	8000b00 <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d14:	f7ff fc30 	bl	8000578 <HAL_GetTick>
 8000d18:	1b40      	subs	r0, r0, r5
 8000d1a:	2802      	cmp	r0, #2
 8000d1c:	d9f6      	bls.n	8000d0c <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 8000d1e:	2003      	movs	r0, #3
 8000d20:	e6ab      	b.n	8000a7a <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 8000d22:	2201      	movs	r2, #1
 8000d24:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d26:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8000d28:	4393      	bics	r3, r2
 8000d2a:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000d2c:	f7ff fc24 	bl	8000578 <HAL_GetTick>
 8000d30:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d32:	e01c      	b.n	8000d6e <HAL_RCC_OscConfig+0x356>
 8000d34:	40021000 	.word	0x40021000
 8000d38:	ffff80ff 	.word	0xffff80ff
 8000d3c:	ffffc7ff 	.word	0xffffc7ff
 8000d40:	00f42400 	.word	0x00f42400
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	40007000 	.word	0x40007000
 8000d50:	00001388 	.word	0x00001388
 8000d54:	feffffff 	.word	0xfeffffff
 8000d58:	effefffc 	.word	0xeffefffc
 8000d5c:	fffeffff 	.word	0xfffeffff
 8000d60:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d64:	f7ff fc08 	bl	8000578 <HAL_GetTick>
 8000d68:	1b80      	subs	r0, r0, r6
 8000d6a:	2802      	cmp	r0, #2
 8000d6c:	d8d7      	bhi.n	8000d1e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d6e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8000d70:	421f      	tst	r7, r3
 8000d72:	d1f7      	bne.n	8000d64 <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	e6a3      	b.n	8000ac0 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 8000d78:	682b      	ldr	r3, [r5, #0]
 8000d7a:	4a50      	ldr	r2, [pc, #320]	@ (8000ebc <HAL_RCC_OscConfig+0x4a4>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d7c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8000d7e:	4013      	ands	r3, r2
 8000d80:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d82:	f7ff fbf9 	bl	8000578 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d86:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8000d88:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d8a:	e004      	b.n	8000d96 <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d8c:	f7ff fbf4 	bl	8000578 <HAL_GetTick>
 8000d90:	1b80      	subs	r0, r0, r6
 8000d92:	2802      	cmp	r0, #2
 8000d94:	d8c3      	bhi.n	8000d1e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d96:	682b      	ldr	r3, [r5, #0]
 8000d98:	423b      	tst	r3, r7
 8000d9a:	d1f7      	bne.n	8000d8c <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	e68d      	b.n	8000abc <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d100      	bne.n	8000da6 <HAL_RCC_OscConfig+0x38e>
 8000da4:	e668      	b.n	8000a78 <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000da6:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8000da8:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000daa:	6a21      	ldr	r1, [r4, #32]
 8000dac:	4002      	ands	r2, r0
 8000dae:	428a      	cmp	r2, r1
 8000db0:	d000      	beq.n	8000db4 <HAL_RCC_OscConfig+0x39c>
 8000db2:	e661      	b.n	8000a78 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000db4:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000db6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000db8:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dba:	428a      	cmp	r2, r1
 8000dbc:	d000      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x3a8>
 8000dbe:	e65b      	b.n	8000a78 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000dc0:	21fe      	movs	r1, #254	@ 0xfe
 8000dc2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000dc4:	01c9      	lsls	r1, r1, #7
 8000dc6:	4001      	ands	r1, r0
 8000dc8:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000dca:	4291      	cmp	r1, r2
 8000dcc:	d000      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x3b8>
 8000dce:	e653      	b.n	8000a78 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000dd0:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000dd2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000dd4:	0392      	lsls	r2, r2, #14
 8000dd6:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000dd8:	428a      	cmp	r2, r1
 8000dda:	d000      	beq.n	8000dde <HAL_RCC_OscConfig+0x3c6>
 8000ddc:	e64c      	b.n	8000a78 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000dde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8000de0:	0f40      	lsrs	r0, r0, #29
 8000de2:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000de4:	1ac0      	subs	r0, r0, r3
 8000de6:	1e43      	subs	r3, r0, #1
 8000de8:	4198      	sbcs	r0, r3
 8000dea:	b2c0      	uxtb	r0, r0
 8000dec:	e645      	b.n	8000a7a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dee:	2180      	movs	r1, #128	@ 0x80
 8000df0:	4b33      	ldr	r3, [pc, #204]	@ (8000ec0 <HAL_RCC_OscConfig+0x4a8>)
 8000df2:	02c9      	lsls	r1, r1, #11
 8000df4:	6818      	ldr	r0, [r3, #0]
 8000df6:	4301      	orrs	r1, r0
 8000df8:	6019      	str	r1, [r3, #0]
 8000dfa:	6819      	ldr	r1, [r3, #0]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e00:	e723      	b.n	8000c4a <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e02:	6813      	ldr	r3, [r2, #0]
 8000e04:	055b      	lsls	r3, r3, #21
 8000e06:	d455      	bmi.n	8000eb4 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e08:	6851      	ldr	r1, [r2, #4]
 8000e0a:	6963      	ldr	r3, [r4, #20]
 8000e0c:	482d      	ldr	r0, [pc, #180]	@ (8000ec4 <HAL_RCC_OscConfig+0x4ac>)
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	4001      	ands	r1, r0
 8000e12:	430b      	orrs	r3, r1
 8000e14:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e16:	e64a      	b.n	8000aae <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 8000e18:	4a29      	ldr	r2, [pc, #164]	@ (8000ec0 <HAL_RCC_OscConfig+0x4a8>)
 8000e1a:	492b      	ldr	r1, [pc, #172]	@ (8000ec8 <HAL_RCC_OscConfig+0x4b0>)
 8000e1c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8000e1e:	400b      	ands	r3, r1
 8000e20:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e22:	e695      	b.n	8000b50 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 8000e24:	682b      	ldr	r3, [r5, #0]
 8000e26:	4a29      	ldr	r2, [pc, #164]	@ (8000ecc <HAL_RCC_OscConfig+0x4b4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e28:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e2e:	f7ff fba3 	bl	8000578 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e32:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8000e34:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e36:	e005      	b.n	8000e44 <HAL_RCC_OscConfig+0x42c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e38:	f7ff fb9e 	bl	8000578 <HAL_GetTick>
 8000e3c:	1b80      	subs	r0, r0, r6
 8000e3e:	2802      	cmp	r0, #2
 8000e40:	d900      	bls.n	8000e44 <HAL_RCC_OscConfig+0x42c>
 8000e42:	e76c      	b.n	8000d1e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e44:	682b      	ldr	r3, [r5, #0]
 8000e46:	423b      	tst	r3, r7
 8000e48:	d1f6      	bne.n	8000e38 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e4a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000e4c:	6a23      	ldr	r3, [r4, #32]
 8000e4e:	68ea      	ldr	r2, [r5, #12]
 8000e50:	430b      	orrs	r3, r1
 8000e52:	491f      	ldr	r1, [pc, #124]	@ (8000ed0 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e54:	4e1a      	ldr	r6, [pc, #104]	@ (8000ec0 <HAL_RCC_OscConfig+0x4a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e56:	400a      	ands	r2, r1
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8000e60:	4313      	orrs	r3, r2
 8000e62:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000e64:	0212      	lsls	r2, r2, #8
 8000e66:	4313      	orrs	r3, r2
 8000e68:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8000e6a:	2380      	movs	r3, #128	@ 0x80
 8000e6c:	682a      	ldr	r2, [r5, #0]
 8000e6e:	045b      	lsls	r3, r3, #17
 8000e70:	4313      	orrs	r3, r2
 8000e72:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8000e74:	2380      	movs	r3, #128	@ 0x80
 8000e76:	68ea      	ldr	r2, [r5, #12]
 8000e78:	055b      	lsls	r3, r3, #21
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8000e7e:	f7ff fb7b 	bl	8000578 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e82:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000e84:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e86:	04ad      	lsls	r5, r5, #18
 8000e88:	e005      	b.n	8000e96 <HAL_RCC_OscConfig+0x47e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e8a:	f7ff fb75 	bl	8000578 <HAL_GetTick>
 8000e8e:	1b00      	subs	r0, r0, r4
 8000e90:	2802      	cmp	r0, #2
 8000e92:	d900      	bls.n	8000e96 <HAL_RCC_OscConfig+0x47e>
 8000e94:	e743      	b.n	8000d1e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e96:	6833      	ldr	r3, [r6, #0]
 8000e98:	422b      	tst	r3, r5
 8000e9a:	d0f6      	beq.n	8000e8a <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	e5ec      	b.n	8000a7a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <HAL_RCC_OscConfig+0x4a8>)
 8000ea4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000eaa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000eac:	3903      	subs	r1, #3
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000eb2:	e713      	b.n	8000cdc <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000eb4:	68e3      	ldr	r3, [r4, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1a6      	bne.n	8000e08 <HAL_RCC_OscConfig+0x3f0>
 8000eba:	e5dd      	b.n	8000a78 <HAL_RCC_OscConfig+0x60>
 8000ebc:	fffffeff 	.word	0xfffffeff
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	ffff80ff 	.word	0xffff80ff
 8000ec8:	efffffff 	.word	0xefffffff
 8000ecc:	feffffff 	.word	0xfeffffff
 8000ed0:	1fc1808c 	.word	0x1fc1808c

08000ed4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ed4:	2338      	movs	r3, #56	@ 0x38
 8000ed6:	4a22      	ldr	r2, [pc, #136]	@ (8000f60 <HAL_RCC_GetSysClockFreq+0x8c>)
{
 8000ed8:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eda:	6891      	ldr	r1, [r2, #8]
 8000edc:	420b      	tst	r3, r1
 8000ede:	d105      	bne.n	8000eec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8000ee0:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8000ee2:	4820      	ldr	r0, [pc, #128]	@ (8000f64 <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8000ee4:	049b      	lsls	r3, r3, #18
 8000ee6:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8000ee8:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8000eea:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eec:	6891      	ldr	r1, [r2, #8]
 8000eee:	4019      	ands	r1, r3
 8000ef0:	2908      	cmp	r1, #8
 8000ef2:	d014      	beq.n	8000f1e <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ef4:	6891      	ldr	r1, [r2, #8]
 8000ef6:	4019      	ands	r1, r3
 8000ef8:	2910      	cmp	r1, #16
 8000efa:	d012      	beq.n	8000f22 <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000efc:	6891      	ldr	r1, [r2, #8]
 8000efe:	4019      	ands	r1, r3
 8000f00:	2920      	cmp	r1, #32
 8000f02:	d024      	beq.n	8000f4e <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000f04:	6890      	ldr	r0, [r2, #8]
 8000f06:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8000f08:	3818      	subs	r0, #24
 8000f0a:	1e43      	subs	r3, r0, #1
 8000f0c:	4198      	sbcs	r0, r3
 8000f0e:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <HAL_RCC_GetSysClockFreq+0x94>)
 8000f10:	4240      	negs	r0, r0
 8000f12:	4018      	ands	r0, r3
 8000f14:	23fa      	movs	r3, #250	@ 0xfa
 8000f16:	01db      	lsls	r3, r3, #7
 8000f18:	469c      	mov	ip, r3
 8000f1a:	4460      	add	r0, ip
 8000f1c:	e7e5      	b.n	8000eea <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8000f1e:	4813      	ldr	r0, [pc, #76]	@ (8000f6c <HAL_RCC_GetSysClockFreq+0x98>)
 8000f20:	e7e3      	b.n	8000eea <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000f22:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f24:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000f26:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000f28:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f2a:	0649      	lsls	r1, r1, #25
 8000f2c:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000f2e:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f30:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000f32:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 8000f34:	079b      	lsls	r3, r3, #30
 8000f36:	d00d      	beq.n	8000f54 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000f38:	480a      	ldr	r0, [pc, #40]	@ (8000f64 <HAL_RCC_GetSysClockFreq+0x90>)
 8000f3a:	f7ff f8e1 	bl	8000100 <__udivsi3>
 8000f3e:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8000f40:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000f42:	68d9      	ldr	r1, [r3, #12]
 8000f44:	0f49      	lsrs	r1, r1, #29
 8000f46:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8000f48:	f7ff f8da 	bl	8000100 <__udivsi3>
 8000f4c:	e7cd      	b.n	8000eea <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8000f4e:	2080      	movs	r0, #128	@ 0x80
 8000f50:	0200      	lsls	r0, r0, #8
 8000f52:	e7ca      	b.n	8000eea <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f54:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <HAL_RCC_GetSysClockFreq+0x98>)
 8000f56:	f7ff f8d3 	bl	8000100 <__udivsi3>
 8000f5a:	4360      	muls	r0, r4
        break;
 8000f5c:	e7f0      	b.n	8000f40 <HAL_RCC_GetSysClockFreq+0x6c>
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	40021000 	.word	0x40021000
 8000f64:	00f42400 	.word	0x00f42400
 8000f68:	ffff8300 	.word	0xffff8300
 8000f6c:	007a1200 	.word	0x007a1200

08000f70 <HAL_RCC_ClockConfig>:
{
 8000f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f72:	46ce      	mov	lr, r9
 8000f74:	4647      	mov	r7, r8
 8000f76:	0005      	movs	r5, r0
 8000f78:	000c      	movs	r4, r1
 8000f7a:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d026      	beq.n	8000fce <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f80:	2207      	movs	r2, #7
 8000f82:	4e57      	ldr	r6, [pc, #348]	@ (80010e0 <HAL_RCC_ClockConfig+0x170>)
 8000f84:	6833      	ldr	r3, [r6, #0]
 8000f86:	4013      	ands	r3, r2
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	d35e      	bcc.n	800104a <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f8c:	682b      	ldr	r3, [r5, #0]
 8000f8e:	079a      	lsls	r2, r3, #30
 8000f90:	d50e      	bpl.n	8000fb0 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f92:	075a      	lsls	r2, r3, #29
 8000f94:	d505      	bpl.n	8000fa2 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000f96:	22e0      	movs	r2, #224	@ 0xe0
 8000f98:	4952      	ldr	r1, [pc, #328]	@ (80010e4 <HAL_RCC_ClockConfig+0x174>)
 8000f9a:	01d2      	lsls	r2, r2, #7
 8000f9c:	6888      	ldr	r0, [r1, #8]
 8000f9e:	4302      	orrs	r2, r0
 8000fa0:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fa2:	4950      	ldr	r1, [pc, #320]	@ (80010e4 <HAL_RCC_ClockConfig+0x174>)
 8000fa4:	4850      	ldr	r0, [pc, #320]	@ (80010e8 <HAL_RCC_ClockConfig+0x178>)
 8000fa6:	688a      	ldr	r2, [r1, #8]
 8000fa8:	4002      	ands	r2, r0
 8000faa:	68a8      	ldr	r0, [r5, #8]
 8000fac:	4302      	orrs	r2, r0
 8000fae:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fb0:	07db      	lsls	r3, r3, #31
 8000fb2:	d52b      	bpl.n	800100c <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb4:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fb6:	4a4b      	ldr	r2, [pc, #300]	@ (80010e4 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d100      	bne.n	8000fbe <HAL_RCC_ClockConfig+0x4e>
 8000fbc:	e07c      	b.n	80010b8 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d007      	beq.n	8000fd2 <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d000      	beq.n	8000fc8 <HAL_RCC_ClockConfig+0x58>
 8000fc6:	e07d      	b.n	80010c4 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fc8:	6812      	ldr	r2, [r2, #0]
 8000fca:	0552      	lsls	r2, r2, #21
 8000fcc:	d404      	bmi.n	8000fd8 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8000fce:	2001      	movs	r0, #1
 8000fd0:	e037      	b.n	8001042 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	0192      	lsls	r2, r2, #6
 8000fd6:	d5fa      	bpl.n	8000fce <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000fd8:	2107      	movs	r1, #7
 8000fda:	4e42      	ldr	r6, [pc, #264]	@ (80010e4 <HAL_RCC_ClockConfig+0x174>)
 8000fdc:	68b2      	ldr	r2, [r6, #8]
 8000fde:	438a      	bics	r2, r1
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000fe4:	f7ff fac8 	bl	8000578 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fe8:	2338      	movs	r3, #56	@ 0x38
 8000fea:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fec:	4b3f      	ldr	r3, [pc, #252]	@ (80010ec <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8000fee:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ff0:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ff2:	e004      	b.n	8000ffe <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ff4:	f7ff fac0 	bl	8000578 <HAL_GetTick>
 8000ff8:	1bc0      	subs	r0, r0, r7
 8000ffa:	4548      	cmp	r0, r9
 8000ffc:	d83b      	bhi.n	8001076 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ffe:	4643      	mov	r3, r8
 8001000:	68b2      	ldr	r2, [r6, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	686b      	ldr	r3, [r5, #4]
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	429a      	cmp	r2, r3
 800100a:	d1f3      	bne.n	8000ff4 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800100c:	2207      	movs	r2, #7
 800100e:	4e34      	ldr	r6, [pc, #208]	@ (80010e0 <HAL_RCC_ClockConfig+0x170>)
 8001010:	6833      	ldr	r3, [r6, #0]
 8001012:	4013      	ands	r3, r2
 8001014:	42a3      	cmp	r3, r4
 8001016:	d838      	bhi.n	800108a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001018:	682b      	ldr	r3, [r5, #0]
 800101a:	075b      	lsls	r3, r3, #29
 800101c:	d42d      	bmi.n	800107a <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800101e:	f7ff ff59 	bl	8000ed4 <HAL_RCC_GetSysClockFreq>
 8001022:	4b30      	ldr	r3, [pc, #192]	@ (80010e4 <HAL_RCC_ClockConfig+0x174>)
 8001024:	4a32      	ldr	r2, [pc, #200]	@ (80010f0 <HAL_RCC_ClockConfig+0x180>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	4932      	ldr	r1, [pc, #200]	@ (80010f4 <HAL_RCC_ClockConfig+0x184>)
 800102a:	051b      	lsls	r3, r3, #20
 800102c:	0f1b      	lsrs	r3, r3, #28
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	589b      	ldr	r3, [r3, r2]
 8001032:	221f      	movs	r2, #31
 8001034:	4013      	ands	r3, r2
 8001036:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 8001038:	4b2f      	ldr	r3, [pc, #188]	@ (80010f8 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800103a:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	f7ff fa55 	bl	80004ec <HAL_InitTick>
}
 8001042:	bcc0      	pop	{r6, r7}
 8001044:	46b9      	mov	r9, r7
 8001046:	46b0      	mov	r8, r6
 8001048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800104a:	6833      	ldr	r3, [r6, #0]
 800104c:	4393      	bics	r3, r2
 800104e:	430b      	orrs	r3, r1
 8001050:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001052:	f7ff fa91 	bl	8000578 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001056:	2307      	movs	r3, #7
 8001058:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800105a:	4b24      	ldr	r3, [pc, #144]	@ (80010ec <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 800105c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800105e:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001060:	4642      	mov	r2, r8
 8001062:	6833      	ldr	r3, [r6, #0]
 8001064:	4013      	ands	r3, r2
 8001066:	42a3      	cmp	r3, r4
 8001068:	d100      	bne.n	800106c <HAL_RCC_ClockConfig+0xfc>
 800106a:	e78f      	b.n	8000f8c <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800106c:	f7ff fa84 	bl	8000578 <HAL_GetTick>
 8001070:	1bc0      	subs	r0, r0, r7
 8001072:	4548      	cmp	r0, r9
 8001074:	d9f4      	bls.n	8001060 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8001076:	2003      	movs	r0, #3
 8001078:	e7e3      	b.n	8001042 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800107a:	4a1a      	ldr	r2, [pc, #104]	@ (80010e4 <HAL_RCC_ClockConfig+0x174>)
 800107c:	491f      	ldr	r1, [pc, #124]	@ (80010fc <HAL_RCC_ClockConfig+0x18c>)
 800107e:	6893      	ldr	r3, [r2, #8]
 8001080:	400b      	ands	r3, r1
 8001082:	68e9      	ldr	r1, [r5, #12]
 8001084:	430b      	orrs	r3, r1
 8001086:	6093      	str	r3, [r2, #8]
 8001088:	e7c9      	b.n	800101e <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800108a:	6833      	ldr	r3, [r6, #0]
 800108c:	4393      	bics	r3, r2
 800108e:	4323      	orrs	r3, r4
 8001090:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001092:	f7ff fa71 	bl	8000578 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001096:	2307      	movs	r3, #7
 8001098:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800109a:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 800109c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800109e:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010a0:	4642      	mov	r2, r8
 80010a2:	6833      	ldr	r3, [r6, #0]
 80010a4:	4013      	ands	r3, r2
 80010a6:	42a3      	cmp	r3, r4
 80010a8:	d0b6      	beq.n	8001018 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010aa:	f7ff fa65 	bl	8000578 <HAL_GetTick>
 80010ae:	1bc0      	subs	r0, r0, r7
 80010b0:	4548      	cmp	r0, r9
 80010b2:	d9f5      	bls.n	80010a0 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 80010b4:	2003      	movs	r0, #3
 80010b6:	e7c4      	b.n	8001042 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	0392      	lsls	r2, r2, #14
 80010bc:	d500      	bpl.n	80010c0 <HAL_RCC_ClockConfig+0x150>
 80010be:	e78b      	b.n	8000fd8 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80010c0:	2001      	movs	r0, #1
 80010c2:	e7be      	b.n	8001042 <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d005      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80010ca:	0792      	lsls	r2, r2, #30
 80010cc:	d500      	bpl.n	80010d0 <HAL_RCC_ClockConfig+0x160>
 80010ce:	e783      	b.n	8000fd8 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80010d0:	2001      	movs	r0, #1
 80010d2:	e7b6      	b.n	8001042 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010d4:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80010d6:	0792      	lsls	r2, r2, #30
 80010d8:	d500      	bpl.n	80010dc <HAL_RCC_ClockConfig+0x16c>
 80010da:	e77d      	b.n	8000fd8 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80010dc:	2001      	movs	r0, #1
 80010de:	e7b0      	b.n	8001042 <HAL_RCC_ClockConfig+0xd2>
 80010e0:	40022000 	.word	0x40022000
 80010e4:	40021000 	.word	0x40021000
 80010e8:	fffff0ff 	.word	0xfffff0ff
 80010ec:	00001388 	.word	0x00001388
 80010f0:	08001da8 	.word	0x08001da8
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000008 	.word	0x20000008
 80010fc:	ffff8fff 	.word	0xffff8fff

08001100 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001102:	46c6      	mov	lr, r8
 8001104:	b500      	push	{lr}
 8001106:	000c      	movs	r4, r1
 8001108:	0016      	movs	r6, r2
 800110a:	b082      	sub	sp, #8
 800110c:	0007      	movs	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800110e:	f7ff fa33 	bl	8000578 <HAL_GetTick>
 8001112:	1936      	adds	r6, r6, r4
 8001114:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8001116:	f7ff fa2f 	bl	8000578 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800111a:	2580      	movs	r5, #128	@ 0x80
  tmp_tickstart = HAL_GetTick();
 800111c:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800111e:	4b26      	ldr	r3, [pc, #152]	@ (80011b8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	015b      	lsls	r3, r3, #5
 8001124:	0d1b      	lsrs	r3, r3, #20
 8001126:	4373      	muls	r3, r6
 8001128:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	e001      	b.n	8001132 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 800112e:	1c63      	adds	r3, r4, #1
 8001130:	d107      	bne.n	8001142 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001132:	6893      	ldr	r3, [r2, #8]
 8001134:	421d      	tst	r5, r3
 8001136:	d1fa      	bne.n	800112e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
      }
      count--;
    }
  }

  return HAL_OK;
 8001138:	2000      	movs	r0, #0
}
 800113a:	b002      	add	sp, #8
 800113c:	bc80      	pop	{r7}
 800113e:	46b8      	mov	r8, r7
 8001140:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001142:	f7ff fa19 	bl	8000578 <HAL_GetTick>
 8001146:	4643      	mov	r3, r8
 8001148:	1ac0      	subs	r0, r0, r3
 800114a:	42b0      	cmp	r0, r6
 800114c:	d208      	bcs.n	8001160 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
      if (count == 0U)
 800114e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001150:	1e5a      	subs	r2, r3, #1
 8001152:	4193      	sbcs	r3, r2
 8001154:	425b      	negs	r3, r3
 8001156:	401e      	ands	r6, r3
      count--;
 8001158:	9b01      	ldr	r3, [sp, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	e7e4      	b.n	800112a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001160:	21e0      	movs	r1, #224	@ 0xe0
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	438a      	bics	r2, r1
 8001168:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800116a:	2282      	movs	r2, #130	@ 0x82
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	0052      	lsls	r2, r2, #1
 8001170:	4291      	cmp	r1, r2
 8001172:	d013      	beq.n	800119c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001174:	2180      	movs	r1, #128	@ 0x80
 8001176:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001178:	0189      	lsls	r1, r1, #6
 800117a:	428a      	cmp	r2, r1
 800117c:	d106      	bne.n	800118c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
          SPI_RESET_CRC(hspi);
 800117e:	6819      	ldr	r1, [r3, #0]
 8001180:	480e      	ldr	r0, [pc, #56]	@ (80011bc <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8001182:	4001      	ands	r1, r0
 8001184:	6019      	str	r1, [r3, #0]
 8001186:	6819      	ldr	r1, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800118c:	235d      	movs	r3, #93	@ 0x5d
 800118e:	2201      	movs	r2, #1
 8001190:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 8001192:	2200      	movs	r2, #0
 8001194:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8001196:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8001198:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 800119a:	e7ce      	b.n	800113a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800119c:	2180      	movs	r1, #128	@ 0x80
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	0209      	lsls	r1, r1, #8
 80011a2:	428a      	cmp	r2, r1
 80011a4:	d003      	beq.n	80011ae <SPI_WaitFlagStateUntilTimeout.constprop.0+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80011a6:	2180      	movs	r1, #128	@ 0x80
 80011a8:	00c9      	lsls	r1, r1, #3
 80011aa:	428a      	cmp	r2, r1
 80011ac:	d1e2      	bne.n	8001174 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
          __HAL_SPI_DISABLE(hspi);
 80011ae:	2140      	movs	r1, #64	@ 0x40
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	438a      	bics	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e7dd      	b.n	8001174 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
 80011b8:	20000000 	.word	0x20000000
 80011bc:	ffffdfff 	.word	0xffffdfff

080011c0 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c2:	46de      	mov	lr, fp
 80011c4:	4657      	mov	r7, sl
 80011c6:	464e      	mov	r6, r9
 80011c8:	4645      	mov	r5, r8
 80011ca:	b5e0      	push	{r5, r6, r7, lr}
 80011cc:	b083      	sub	sp, #12
 80011ce:	001e      	movs	r6, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80011d0:	466b      	mov	r3, sp
 80011d2:	1cdf      	adds	r7, r3, #3
 80011d4:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80011d6:	0015      	movs	r5, r2
 80011d8:	4681      	mov	r9, r0
 80011da:	000c      	movs	r4, r1
  __IO uint8_t  tmpreg8 = 0;
 80011dc:	703b      	strb	r3, [r7, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80011de:	f7ff f9cb 	bl	8000578 <HAL_GetTick>
 80011e2:	1976      	adds	r6, r6, r5
 80011e4:	1a33      	subs	r3, r6, r0
 80011e6:	4698      	mov	r8, r3
  tmp_tickstart = HAL_GetTick();
 80011e8:	f7ff f9c6 	bl	8000578 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80011ec:	464b      	mov	r3, r9
 80011ee:	681b      	ldr	r3, [r3, #0]
  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);

  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80011f0:	26c0      	movs	r6, #192	@ 0xc0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80011f2:	469a      	mov	sl, r3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80011f4:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
  tmp_tickstart = HAL_GetTick();
 80011f6:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80011f8:	681b      	ldr	r3, [r3, #0]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80011fa:	00f6      	lsls	r6, r6, #3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80011fc:	009a      	lsls	r2, r3, #2
 80011fe:	18d2      	adds	r2, r2, r3
 8001200:	00d3      	lsls	r3, r2, #3
 8001202:	1a9b      	subs	r3, r3, r2
 8001204:	4642      	mov	r2, r8
 8001206:	0d1b      	lsrs	r3, r3, #20
 8001208:	4353      	muls	r3, r2
  while ((hspi->Instance->SR & Fifo) != State)
 800120a:	4652      	mov	r2, sl
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800120c:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800120e:	e001      	b.n	8001214 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8001210:	1c6b      	adds	r3, r5, #1
 8001212:	d10b      	bne.n	800122c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8001214:	6893      	ldr	r3, [r2, #8]
 8001216:	4223      	tst	r3, r4
 8001218:	d01d      	beq.n	8001256 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x96>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800121a:	42b4      	cmp	r4, r6
 800121c:	d1f8      	bne.n	8001210 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x50>
      tmpreg8 = *ptmpreg8;
 800121e:	4653      	mov	r3, sl
 8001220:	7b1b      	ldrb	r3, [r3, #12]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	703b      	strb	r3, [r7, #0]
      UNUSED(tmpreg8);
 8001226:	783b      	ldrb	r3, [r7, #0]
    if (Timeout != HAL_MAX_DELAY)
 8001228:	1c6b      	adds	r3, r5, #1
 800122a:	d0f3      	beq.n	8001214 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800122c:	f7ff f9a4 	bl	8000578 <HAL_GetTick>
 8001230:	465b      	mov	r3, fp
 8001232:	1ac0      	subs	r0, r0, r3
 8001234:	4540      	cmp	r0, r8
 8001236:	d216      	bcs.n	8001266 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001238:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 800123a:	1e5a      	subs	r2, r3, #1
 800123c:	4193      	sbcs	r3, r2
 800123e:	4642      	mov	r2, r8
 8001240:	425b      	negs	r3, r3
 8001242:	401a      	ands	r2, r3
      }
      count--;
 8001244:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001246:	4690      	mov	r8, r2
      count--;
 8001248:	3b01      	subs	r3, #1
 800124a:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800124c:	464b      	mov	r3, r9
 800124e:	681a      	ldr	r2, [r3, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8001250:	6893      	ldr	r3, [r2, #8]
 8001252:	4223      	tst	r3, r4
 8001254:	d1e1      	bne.n	800121a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
    }
  }

  return HAL_OK;
 8001256:	2000      	movs	r0, #0
}
 8001258:	b003      	add	sp, #12
 800125a:	bcf0      	pop	{r4, r5, r6, r7}
 800125c:	46bb      	mov	fp, r7
 800125e:	46b2      	mov	sl, r6
 8001260:	46a9      	mov	r9, r5
 8001262:	46a0      	mov	r8, r4
 8001264:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001266:	464b      	mov	r3, r9
 8001268:	21e0      	movs	r1, #224	@ 0xe0
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001270:	4649      	mov	r1, r9
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001272:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001274:	2282      	movs	r2, #130	@ 0x82
 8001276:	6849      	ldr	r1, [r1, #4]
 8001278:	0052      	lsls	r2, r2, #1
 800127a:	4291      	cmp	r1, r2
 800127c:	d015      	beq.n	80012aa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800127e:	464a      	mov	r2, r9
 8001280:	2180      	movs	r1, #128	@ 0x80
 8001282:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001284:	0189      	lsls	r1, r1, #6
 8001286:	428a      	cmp	r2, r1
 8001288:	d106      	bne.n	8001298 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
          SPI_RESET_CRC(hspi);
 800128a:	6819      	ldr	r1, [r3, #0]
 800128c:	480f      	ldr	r0, [pc, #60]	@ (80012cc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x10c>)
 800128e:	4001      	ands	r1, r0
 8001290:	6019      	str	r1, [r3, #0]
 8001292:	6819      	ldr	r1, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001298:	235d      	movs	r3, #93	@ 0x5d
 800129a:	2201      	movs	r2, #1
 800129c:	4649      	mov	r1, r9
 800129e:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 80012a0:	2200      	movs	r2, #0
 80012a2:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 80012a4:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80012a6:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 80012a8:	e7d6      	b.n	8001258 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012aa:	464a      	mov	r2, r9
 80012ac:	2180      	movs	r1, #128	@ 0x80
 80012ae:	6892      	ldr	r2, [r2, #8]
 80012b0:	0209      	lsls	r1, r1, #8
 80012b2:	428a      	cmp	r2, r1
 80012b4:	d003      	beq.n	80012be <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80012b6:	2180      	movs	r1, #128	@ 0x80
 80012b8:	00c9      	lsls	r1, r1, #3
 80012ba:	428a      	cmp	r2, r1
 80012bc:	d1df      	bne.n	800127e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          __HAL_SPI_DISABLE(hspi);
 80012be:	2140      	movs	r1, #64	@ 0x40
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	438a      	bics	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	e7da      	b.n	800127e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
 80012c8:	20000000 	.word	0x20000000
 80012cc:	ffffdfff 	.word	0xffffdfff

080012d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80012d0:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80012d2:	0013      	movs	r3, r2
{
 80012d4:	000d      	movs	r5, r1
 80012d6:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80012d8:	000a      	movs	r2, r1
 80012da:	21c0      	movs	r1, #192	@ 0xc0
 80012dc:	0149      	lsls	r1, r1, #5
{
 80012de:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80012e0:	f7ff ff6e 	bl	80011c0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80012e4:	2800      	cmp	r0, #0
 80012e6:	d10f      	bne.n	8001308 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80012e8:	0032      	movs	r2, r6
 80012ea:	0029      	movs	r1, r5
 80012ec:	0020      	movs	r0, r4
 80012ee:	f7ff ff07 	bl	8001100 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80012f2:	2800      	cmp	r0, #0
 80012f4:	d108      	bne.n	8001308 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80012f6:	21c0      	movs	r1, #192	@ 0xc0
 80012f8:	0033      	movs	r3, r6
 80012fa:	002a      	movs	r2, r5
 80012fc:	0020      	movs	r0, r4
 80012fe:	00c9      	lsls	r1, r1, #3
 8001300:	f7ff ff5e 	bl	80011c0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8001304:	2800      	cmp	r0, #0
 8001306:	d004      	beq.n	8001312 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001308:	2220      	movs	r2, #32
    return HAL_TIMEOUT;
 800130a:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800130c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800130e:	4313      	orrs	r3, r2
 8001310:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001312:	bd70      	pop	{r4, r5, r6, pc}

08001314 <HAL_SPI_Init>:
{
 8001314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001316:	46de      	mov	lr, fp
 8001318:	4657      	mov	r7, sl
 800131a:	464e      	mov	r6, r9
 800131c:	4645      	mov	r5, r8
 800131e:	0004      	movs	r4, r0
 8001320:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 8001322:	2800      	cmp	r0, #0
 8001324:	d100      	bne.n	8001328 <HAL_SPI_Init+0x14>
 8001326:	e093      	b.n	8001450 <HAL_SPI_Init+0x13c>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001328:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 800132a:	2d00      	cmp	r5, #0
 800132c:	d069      	beq.n	8001402 <HAL_SPI_Init+0xee>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001332:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001338:	335d      	adds	r3, #93	@ 0x5d
 800133a:	5ce3      	ldrb	r3, [r4, r3]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d06c      	beq.n	800141c <HAL_SPI_Init+0x108>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001342:	235d      	movs	r3, #93	@ 0x5d
 8001344:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 8001346:	2140      	movs	r1, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8001348:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 800134a:	6822      	ldr	r2, [r4, #0]
 800134c:	6813      	ldr	r3, [r2, #0]
 800134e:	438b      	bics	r3, r1
 8001350:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001352:	23e0      	movs	r3, #224	@ 0xe0
 8001354:	68e1      	ldr	r1, [r4, #12]
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	4299      	cmp	r1, r3
 800135a:	d866      	bhi.n	800142a <HAL_SPI_Init+0x116>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800135c:	d000      	beq.n	8001360 <HAL_SPI_Init+0x4c>
 800135e:	e070      	b.n	8001442 <HAL_SPI_Init+0x12e>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001360:	2380      	movs	r3, #128	@ 0x80
 8001362:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001364:	019b      	lsls	r3, r3, #6
 8001366:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001368:	2380      	movs	r3, #128	@ 0x80
 800136a:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800136c:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800136e:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001370:	2682      	movs	r6, #130	@ 0x82
 8001372:	2784      	movs	r7, #132	@ 0x84
 8001374:	6863      	ldr	r3, [r4, #4]
 8001376:	0076      	lsls	r6, r6, #1
 8001378:	4033      	ands	r3, r6
 800137a:	68a6      	ldr	r6, [r4, #8]
 800137c:	023f      	lsls	r7, r7, #8
 800137e:	403e      	ands	r6, r7
 8001380:	2702      	movs	r7, #2
 8001382:	4333      	orrs	r3, r6
 8001384:	6926      	ldr	r6, [r4, #16]
 8001386:	69a0      	ldr	r0, [r4, #24]
 8001388:	403e      	ands	r6, r7
 800138a:	4333      	orrs	r3, r6
 800138c:	2601      	movs	r6, #1
 800138e:	6967      	ldr	r7, [r4, #20]
 8001390:	46b2      	mov	sl, r6
 8001392:	4037      	ands	r7, r6
 8001394:	433b      	orrs	r3, r7
 8001396:	2780      	movs	r7, #128	@ 0x80
 8001398:	00bf      	lsls	r7, r7, #2
 800139a:	4007      	ands	r7, r0
 800139c:	433b      	orrs	r3, r7
 800139e:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80013a0:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80013a2:	46b8      	mov	r8, r7
 80013a4:	2738      	movs	r7, #56	@ 0x38
 80013a6:	46b9      	mov	r9, r7
 80013a8:	4647      	mov	r7, r8
 80013aa:	464e      	mov	r6, r9
 80013ac:	4037      	ands	r7, r6
 80013ae:	6a26      	ldr	r6, [r4, #32]
 80013b0:	433b      	orrs	r3, r7
 80013b2:	46b0      	mov	r8, r6
 80013b4:	2680      	movs	r6, #128	@ 0x80
 80013b6:	4647      	mov	r7, r8
 80013b8:	4037      	ands	r7, r6
 80013ba:	4666      	mov	r6, ip
 80013bc:	433b      	orrs	r3, r7
 80013be:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80013c0:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80013c2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80013c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80013c6:	4033      	ands	r3, r6
 80013c8:	26f0      	movs	r6, #240	@ 0xf0
 80013ca:	0136      	lsls	r6, r6, #4
 80013cc:	4031      	ands	r1, r6
 80013ce:	4319      	orrs	r1, r3
 80013d0:	2304      	movs	r3, #4
 80013d2:	4003      	ands	r3, r0
 80013d4:	4319      	orrs	r1, r3
 80013d6:	2310      	movs	r3, #16
 80013d8:	402b      	ands	r3, r5
 80013da:	4319      	orrs	r1, r3
 80013dc:	465b      	mov	r3, fp
 80013de:	4319      	orrs	r1, r3
 80013e0:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80013e2:	69d3      	ldr	r3, [r2, #28]
 80013e4:	491d      	ldr	r1, [pc, #116]	@ (800145c <HAL_SPI_Init+0x148>)
  return HAL_OK;
 80013e6:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80013e8:	400b      	ands	r3, r1
 80013ea:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80013ec:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80013ee:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80013f0:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80013f2:	335d      	adds	r3, #93	@ 0x5d
 80013f4:	54e2      	strb	r2, [r4, r3]
}
 80013f6:	bcf0      	pop	{r4, r5, r6, r7}
 80013f8:	46bb      	mov	fp, r7
 80013fa:	46b2      	mov	sl, r6
 80013fc:	46a9      	mov	r9, r5
 80013fe:	46a0      	mov	r8, r4
 8001400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001402:	2382      	movs	r3, #130	@ 0x82
 8001404:	6842      	ldr	r2, [r0, #4]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	429a      	cmp	r2, r3
 800140a:	d093      	beq.n	8001334 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800140c:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800140e:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001410:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001412:	335d      	adds	r3, #93	@ 0x5d
 8001414:	5ce3      	ldrb	r3, [r4, r3]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d192      	bne.n	8001342 <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 800141c:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 800141e:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8001420:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8001422:	f7fe ffbd 	bl	80003a0 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001426:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8001428:	e78b      	b.n	8001342 <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800142a:	23f0      	movs	r3, #240	@ 0xf0
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	4299      	cmp	r1, r3
 8001430:	d110      	bne.n	8001454 <HAL_SPI_Init+0x140>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001432:	2380      	movs	r3, #128	@ 0x80
 8001434:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001436:	019b      	lsls	r3, r3, #6
 8001438:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800143a:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800143c:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800143e:	469b      	mov	fp, r3
 8001440:	e796      	b.n	8001370 <HAL_SPI_Init+0x5c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001442:	2380      	movs	r3, #128	@ 0x80
 8001444:	015b      	lsls	r3, r3, #5
 8001446:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	469c      	mov	ip, r3
 800144c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800144e:	e78f      	b.n	8001370 <HAL_SPI_Init+0x5c>
    return HAL_ERROR;
 8001450:	2001      	movs	r0, #1
 8001452:	e7d0      	b.n	80013f6 <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001454:	2300      	movs	r3, #0
 8001456:	469b      	mov	fp, r3
 8001458:	e7f6      	b.n	8001448 <HAL_SPI_Init+0x134>
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	fffff7ff 	.word	0xfffff7ff

08001460 <HAL_SPI_Transmit>:
{
 8001460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001462:	46ce      	mov	lr, r9
 8001464:	4647      	mov	r7, r8
 8001466:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8001468:	235c      	movs	r3, #92	@ 0x5c
{
 800146a:	b580      	push	{r7, lr}
 800146c:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 800146e:	5cc2      	ldrb	r2, [r0, r3]
{
 8001470:	0004      	movs	r4, r0
 8001472:	4688      	mov	r8, r1
 8001474:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8001476:	2a01      	cmp	r2, #1
 8001478:	d064      	beq.n	8001544 <HAL_SPI_Transmit+0xe4>
 800147a:	2201      	movs	r2, #1
 800147c:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800147e:	f7ff f87b 	bl	8000578 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001482:	225d      	movs	r2, #93	@ 0x5d
 8001484:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 8001486:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001488:	b2df      	uxtb	r7, r3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d009      	beq.n	80014a2 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 800148e:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 8001490:	235c      	movs	r3, #92	@ 0x5c
 8001492:	2200      	movs	r2, #0
 8001494:	54e2      	strb	r2, [r4, r3]
}
 8001496:	0038      	movs	r0, r7
 8001498:	b003      	add	sp, #12
 800149a:	bcc0      	pop	{r6, r7}
 800149c:	46b9      	mov	r9, r7
 800149e:	46b0      	mov	r8, r6
 80014a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 80014a2:	4643      	mov	r3, r8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f3      	beq.n	8001490 <HAL_SPI_Transmit+0x30>
 80014a8:	464b      	mov	r3, r9
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_SPI_Transmit+0x30>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80014ae:	2303      	movs	r3, #3
 80014b0:	54a3      	strb	r3, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80014b2:	4642      	mov	r2, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014b4:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80014b6:	63a2      	str	r2, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80014b8:	464a      	mov	r2, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014ba:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->TxXferSize  = Size;
 80014bc:	87a2      	strh	r2, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80014be:	87e2      	strh	r2, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = 0U;
 80014c0:	2244      	movs	r2, #68	@ 0x44
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80014c2:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80014c4:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 80014c6:	3202      	adds	r2, #2
 80014c8:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 80014ca:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80014cc:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80014ce:	2380      	movs	r3, #128	@ 0x80
 80014d0:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80014d2:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d05b      	beq.n	8001592 <HAL_SPI_Transmit+0x132>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80014da:	2340      	movs	r3, #64	@ 0x40
 80014dc:	6802      	ldr	r2, [r0, #0]
 80014de:	4213      	tst	r3, r2
 80014e0:	d102      	bne.n	80014e8 <HAL_SPI_Transmit+0x88>
    __HAL_SPI_ENABLE(hspi);
 80014e2:	6802      	ldr	r2, [r0, #0]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014e8:	23e0      	movs	r3, #224	@ 0xe0
 80014ea:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80014ec:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d929      	bls.n	8001548 <HAL_SPI_Transmit+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80014f4:	2900      	cmp	r1, #0
 80014f6:	d061      	beq.n	80015bc <HAL_SPI_Transmit+0x15c>
 80014f8:	464b      	mov	r3, r9
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d05e      	beq.n	80015bc <HAL_SPI_Transmit+0x15c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80014fe:	2202      	movs	r2, #2
    while (hspi->TxXferCount > 0U)
 8001500:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001502:	4690      	mov	r8, r2
    while (hspi->TxXferCount > 0U)
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10d      	bne.n	8001524 <HAL_SPI_Transmit+0xc4>
 8001508:	e063      	b.n	80015d2 <HAL_SPI_Transmit+0x172>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800150a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800150c:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800150e:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001510:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 8001512:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001514:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001516:	3901      	subs	r1, #1
 8001518:	b289      	uxth	r1, r1
 800151a:	87e1      	strh	r1, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800151c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800151e:	2b00      	cmp	r3, #0
 8001520:	d057      	beq.n	80015d2 <HAL_SPI_Transmit+0x172>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001522:	6820      	ldr	r0, [r4, #0]
 8001524:	4642      	mov	r2, r8
 8001526:	6883      	ldr	r3, [r0, #8]
 8001528:	421a      	tst	r2, r3
 800152a:	d1ee      	bne.n	800150a <HAL_SPI_Transmit+0xaa>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800152c:	f7ff f824 	bl	8000578 <HAL_GetTick>
 8001530:	1b80      	subs	r0, r0, r6
 8001532:	42a8      	cmp	r0, r5
 8001534:	d3f2      	bcc.n	800151c <HAL_SPI_Transmit+0xbc>
 8001536:	1c6b      	adds	r3, r5, #1
 8001538:	d0f0      	beq.n	800151c <HAL_SPI_Transmit+0xbc>
          hspi->State = HAL_SPI_STATE_READY;
 800153a:	235d      	movs	r3, #93	@ 0x5d
 800153c:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 800153e:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 8001540:	54e2      	strb	r2, [r4, r3]
          goto error;
 8001542:	e7a5      	b.n	8001490 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8001544:	2702      	movs	r7, #2
 8001546:	e7a6      	b.n	8001496 <HAL_SPI_Transmit+0x36>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001548:	2900      	cmp	r1, #0
 800154a:	d02c      	beq.n	80015a6 <HAL_SPI_Transmit+0x146>
 800154c:	464b      	mov	r3, r9
 800154e:	2b01      	cmp	r3, #1
 8001550:	d029      	beq.n	80015a6 <HAL_SPI_Transmit+0x146>
    while (hspi->TxXferCount > 0U)
 8001552:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001554:	2b00      	cmp	r3, #0
 8001556:	d03c      	beq.n	80015d2 <HAL_SPI_Transmit+0x172>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001558:	2302      	movs	r3, #2
 800155a:	4698      	mov	r8, r3
 800155c:	e00c      	b.n	8001578 <HAL_SPI_Transmit+0x118>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800155e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001560:	7812      	ldrb	r2, [r2, #0]
 8001562:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001564:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001566:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001568:	3901      	subs	r1, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800156a:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 800156c:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800156e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001570:	87e1      	strh	r1, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8001572:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001574:	2b00      	cmp	r3, #0
 8001576:	d02c      	beq.n	80015d2 <HAL_SPI_Transmit+0x172>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001578:	4641      	mov	r1, r8
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	4211      	tst	r1, r2
 8001580:	d1ed      	bne.n	800155e <HAL_SPI_Transmit+0xfe>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001582:	f7fe fff9 	bl	8000578 <HAL_GetTick>
 8001586:	1b80      	subs	r0, r0, r6
 8001588:	42a8      	cmp	r0, r5
 800158a:	d3f2      	bcc.n	8001572 <HAL_SPI_Transmit+0x112>
 800158c:	1c6b      	adds	r3, r5, #1
 800158e:	d0f0      	beq.n	8001572 <HAL_SPI_Transmit+0x112>
 8001590:	e7d3      	b.n	800153a <HAL_SPI_Transmit+0xda>
    __HAL_SPI_DISABLE(hspi);
 8001592:	2240      	movs	r2, #64	@ 0x40
 8001594:	6803      	ldr	r3, [r0, #0]
 8001596:	4393      	bics	r3, r2
 8001598:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 800159a:	2380      	movs	r3, #128	@ 0x80
 800159c:	6802      	ldr	r2, [r0, #0]
 800159e:	01db      	lsls	r3, r3, #7
 80015a0:	4313      	orrs	r3, r2
 80015a2:	6003      	str	r3, [r0, #0]
 80015a4:	e799      	b.n	80014da <HAL_SPI_Transmit+0x7a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80015a6:	4643      	mov	r3, r8
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	7303      	strb	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80015ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80015ae:	3301      	adds	r3, #1
 80015b0:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80015b2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80015ba:	e7ca      	b.n	8001552 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015bc:	4643      	mov	r3, r8
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80015c2:	4643      	mov	r3, r8
 80015c4:	3302      	adds	r3, #2
 80015c6:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80015c8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80015ca:	3b01      	subs	r3, #1
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80015d0:	e795      	b.n	80014fe <HAL_SPI_Transmit+0x9e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80015d2:	0032      	movs	r2, r6
 80015d4:	0029      	movs	r1, r5
 80015d6:	0020      	movs	r0, r4
 80015d8:	f7ff fe7a 	bl	80012d0 <SPI_EndRxTxTransaction>
 80015dc:	2800      	cmp	r0, #0
 80015de:	d001      	beq.n	80015e4 <HAL_SPI_Transmit+0x184>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80015e0:	2320      	movs	r3, #32
 80015e2:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80015e4:	68a3      	ldr	r3, [r4, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d106      	bne.n	80015f8 <HAL_SPI_Transmit+0x198>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	9201      	str	r2, [sp, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80015f8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d000      	beq.n	8001600 <HAL_SPI_Transmit+0x1a0>
 80015fe:	e747      	b.n	8001490 <HAL_SPI_Transmit+0x30>
    hspi->State = HAL_SPI_STATE_READY;
 8001600:	2201      	movs	r2, #1
 8001602:	335d      	adds	r3, #93	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001604:	2700      	movs	r7, #0
    hspi->State = HAL_SPI_STATE_READY;
 8001606:	54e2      	strb	r2, [r4, r3]
 8001608:	e742      	b.n	8001490 <HAL_SPI_Transmit+0x30>
 800160a:	46c0      	nop			@ (mov r8, r8)

0800160c <_ZN10LED_Matrix7HandlerEv>:
  ******************************************************************************
**/

#include "LED_Matrix.h"

void LED_Matrix::Handler() {
 800160c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
                               0, 1, 3, 2, 0};
    static int point_list2[] = {7, 6, 2, 3,
                                7, 3, 1, 5,
                                7, 5, 4, 6, 7};

    for(int i = 0; i < 12; i++){
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	e064      	b.n	80016e4 <_ZN10LED_Matrix7HandlerEv+0xd8>
        for(int j = 0; j < 8; j++){
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	e05b      	b.n	80016d8 <_ZN10LED_Matrix7HandlerEv+0xcc>
            ws2812_data[i * 8 + j] = data[point_list1[i]][point_list1[i + 1]][j];
 8001620:	4b6b      	ldr	r3, [pc, #428]	@ (80017d0 <_ZN10LED_Matrix7HandlerEv+0x1c4>)
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	0092      	lsls	r2, r2, #2
 8001626:	58d0      	ldr	r0, [r2, r3]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	4b68      	ldr	r3, [pc, #416]	@ (80017d0 <_ZN10LED_Matrix7HandlerEv+0x1c4>)
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	58d4      	ldr	r4, [r2, r3]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	00da      	lsls	r2, r3, #3
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	18d3      	adds	r3, r2, r3
 800163a:	4e66      	ldr	r6, [pc, #408]	@ (80017d4 <_ZN10LED_Matrix7HandlerEv+0x1c8>)
 800163c:	001a      	movs	r2, r3
 800163e:	0052      	lsls	r2, r2, #1
 8001640:	18d2      	adds	r2, r2, r3
 8001642:	687d      	ldr	r5, [r7, #4]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	0019      	movs	r1, r3
 8001648:	0049      	lsls	r1, r1, #1
 800164a:	18c9      	adds	r1, r1, r3
 800164c:	0023      	movs	r3, r4
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	191b      	adds	r3, r3, r4
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	18c9      	adds	r1, r1, r3
 8001656:	0003      	movs	r3, r0
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	181b      	adds	r3, r3, r0
 800165c:	019b      	lsls	r3, r3, #6
 800165e:	18cb      	adds	r3, r1, r3
 8001660:	18b0      	adds	r0, r6, r2
 8001662:	18eb      	adds	r3, r5, r3
 8001664:	2203      	movs	r2, #3
 8001666:	0019      	movs	r1, r3
 8001668:	f000 fb58 	bl	8001d1c <memcpy>
            WS2812_color_set(data[point_list1[i]][point_list1[i + 1]][j], i * 8 + j);
 800166c:	4b58      	ldr	r3, [pc, #352]	@ (80017d0 <_ZN10LED_Matrix7HandlerEv+0x1c4>)
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	0092      	lsls	r2, r2, #2
 8001672:	58d0      	ldr	r0, [r2, r3]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	4b55      	ldr	r3, [pc, #340]	@ (80017d0 <_ZN10LED_Matrix7HandlerEv+0x1c4>)
 800167a:	0092      	lsls	r2, r2, #2
 800167c:	58d4      	ldr	r4, [r2, r3]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	b2da      	uxtb	r2, r3
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	18d3      	adds	r3, r2, r3
 800168c:	b2dd      	uxtb	r5, r3
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	001a      	movs	r2, r3
 8001694:	0052      	lsls	r2, r2, #1
 8001696:	18d2      	adds	r2, r2, r3
 8001698:	0023      	movs	r3, r4
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	191b      	adds	r3, r3, r4
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	18d2      	adds	r2, r2, r3
 80016a2:	0003      	movs	r3, r0
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	181b      	adds	r3, r3, r0
 80016a8:	019b      	lsls	r3, r3, #6
 80016aa:	18d3      	adds	r3, r2, r3
 80016ac:	5c5a      	ldrb	r2, [r3, r1]
 80016ae:	18c8      	adds	r0, r1, r3
 80016b0:	7840      	ldrb	r0, [r0, #1]
 80016b2:	0200      	lsls	r0, r0, #8
 80016b4:	4302      	orrs	r2, r0
 80016b6:	18cb      	adds	r3, r1, r3
 80016b8:	789b      	ldrb	r3, [r3, #2]
 80016ba:	041b      	lsls	r3, r3, #16
 80016bc:	431a      	orrs	r2, r3
 80016be:	2300      	movs	r3, #0
 80016c0:	0212      	lsls	r2, r2, #8
 80016c2:	0a12      	lsrs	r2, r2, #8
 80016c4:	0e1b      	lsrs	r3, r3, #24
 80016c6:	061b      	lsls	r3, r3, #24
 80016c8:	4313      	orrs	r3, r2
 80016ca:	0029      	movs	r1, r5
 80016cc:	0018      	movs	r0, r3
 80016ce:	f000 f96b 	bl	80019a8 <_Z16WS2812_color_set7Color_th>
        for(int j = 0; j < 8; j++){
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	3301      	adds	r3, #1
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	2b07      	cmp	r3, #7
 80016dc:	dda0      	ble.n	8001620 <_ZN10LED_Matrix7HandlerEv+0x14>
    for(int i = 0; i < 12; i++){
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2b0b      	cmp	r3, #11
 80016e8:	dd97      	ble.n	800161a <_ZN10LED_Matrix7HandlerEv+0xe>
        }
    }
    for(int i = 0; i < 12; i++){
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	e066      	b.n	80017be <_ZN10LED_Matrix7HandlerEv+0x1b2>
        for(int j = 0; j < 8; j++){
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	e05d      	b.n	80017b2 <_ZN10LED_Matrix7HandlerEv+0x1a6>
            ws2812_data[(i + 12) * 8 + j] = data[point_list2[i]][point_list2[i + 1]][j];
 80016f6:	4b38      	ldr	r3, [pc, #224]	@ (80017d8 <_ZN10LED_Matrix7HandlerEv+0x1cc>)
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	0092      	lsls	r2, r2, #2
 80016fc:	58d0      	ldr	r0, [r2, r3]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	4b35      	ldr	r3, [pc, #212]	@ (80017d8 <_ZN10LED_Matrix7HandlerEv+0x1cc>)
 8001704:	0092      	lsls	r2, r2, #2
 8001706:	58d4      	ldr	r4, [r2, r3]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	330c      	adds	r3, #12
 800170c:	00da      	lsls	r2, r3, #3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	18d3      	adds	r3, r2, r3
 8001712:	4e30      	ldr	r6, [pc, #192]	@ (80017d4 <_ZN10LED_Matrix7HandlerEv+0x1c8>)
 8001714:	001a      	movs	r2, r3
 8001716:	0052      	lsls	r2, r2, #1
 8001718:	18d2      	adds	r2, r2, r3
 800171a:	687d      	ldr	r5, [r7, #4]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	0019      	movs	r1, r3
 8001720:	0049      	lsls	r1, r1, #1
 8001722:	18c9      	adds	r1, r1, r3
 8001724:	0023      	movs	r3, r4
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	191b      	adds	r3, r3, r4
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	18c9      	adds	r1, r1, r3
 800172e:	0003      	movs	r3, r0
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	181b      	adds	r3, r3, r0
 8001734:	019b      	lsls	r3, r3, #6
 8001736:	18cb      	adds	r3, r1, r3
 8001738:	18b0      	adds	r0, r6, r2
 800173a:	18eb      	adds	r3, r5, r3
 800173c:	2203      	movs	r2, #3
 800173e:	0019      	movs	r1, r3
 8001740:	f000 faec 	bl	8001d1c <memcpy>
            WS2812_color_set(data[point_list2[i]][point_list2[i + 1]][j], (i + 12) * 8 + j);
 8001744:	4b24      	ldr	r3, [pc, #144]	@ (80017d8 <_ZN10LED_Matrix7HandlerEv+0x1cc>)
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	0092      	lsls	r2, r2, #2
 800174a:	58d0      	ldr	r0, [r2, r3]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	4b21      	ldr	r3, [pc, #132]	@ (80017d8 <_ZN10LED_Matrix7HandlerEv+0x1cc>)
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	58d4      	ldr	r4, [r2, r3]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	330c      	adds	r3, #12
 800175a:	b2db      	uxtb	r3, r3
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	b2da      	uxtb	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	18d3      	adds	r3, r2, r3
 8001766:	b2dd      	uxtb	r5, r3
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	001a      	movs	r2, r3
 800176e:	0052      	lsls	r2, r2, #1
 8001770:	18d2      	adds	r2, r2, r3
 8001772:	0023      	movs	r3, r4
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	191b      	adds	r3, r3, r4
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	18d2      	adds	r2, r2, r3
 800177c:	0003      	movs	r3, r0
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	181b      	adds	r3, r3, r0
 8001782:	019b      	lsls	r3, r3, #6
 8001784:	18d3      	adds	r3, r2, r3
 8001786:	5c5a      	ldrb	r2, [r3, r1]
 8001788:	18c8      	adds	r0, r1, r3
 800178a:	7840      	ldrb	r0, [r0, #1]
 800178c:	0200      	lsls	r0, r0, #8
 800178e:	4302      	orrs	r2, r0
 8001790:	18cb      	adds	r3, r1, r3
 8001792:	789b      	ldrb	r3, [r3, #2]
 8001794:	041b      	lsls	r3, r3, #16
 8001796:	431a      	orrs	r2, r3
 8001798:	2300      	movs	r3, #0
 800179a:	0212      	lsls	r2, r2, #8
 800179c:	0a12      	lsrs	r2, r2, #8
 800179e:	0e1b      	lsrs	r3, r3, #24
 80017a0:	061b      	lsls	r3, r3, #24
 80017a2:	4313      	orrs	r3, r2
 80017a4:	0029      	movs	r1, r5
 80017a6:	0018      	movs	r0, r3
 80017a8:	f000 f8fe 	bl	80019a8 <_Z16WS2812_color_set7Color_th>
        for(int j = 0; j < 8; j++){
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	3301      	adds	r3, #1
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b07      	cmp	r3, #7
 80017b6:	dd9e      	ble.n	80016f6 <_ZN10LED_Matrix7HandlerEv+0xea>
    for(int i = 0; i < 12; i++){
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	3301      	adds	r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2b0b      	cmp	r3, #11
 80017c2:	dd95      	ble.n	80016f0 <_ZN10LED_Matrix7HandlerEv+0xe4>
        }
    }
}
 80017c4:	46c0      	nop			@ (mov r8, r8)
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b007      	add	sp, #28
 80017cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ce:	46c0      	nop			@ (mov r8, r8)
 80017d0:	2000000c 	.word	0x2000000c
 80017d4:	20000154 	.word	0x20000154
 80017d8:	20000040 	.word	0x20000040

080017dc <_Z12WS2812_resetv>:
uint8_t ws2812_data_DMA[WS2812_LEN*3*4];
Color_t violet = {238, 20, 255};



void WS2812_reset(){
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
    static uint8_t buffer[200] = {0};
    HAL_SPI_Transmit(&hspi1, buffer, 200, 10);
 80017e0:	4904      	ldr	r1, [pc, #16]	@ (80017f4 <_Z12WS2812_resetv+0x18>)
 80017e2:	4805      	ldr	r0, [pc, #20]	@ (80017f8 <_Z12WS2812_resetv+0x1c>)
 80017e4:	230a      	movs	r3, #10
 80017e6:	22c8      	movs	r2, #200	@ 0xc8
 80017e8:	f7ff fe3a 	bl	8001460 <HAL_SPI_Transmit>
}
 80017ec:	46c0      	nop			@ (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	46c0      	nop			@ (mov r8, r8)
 80017f4:	20000c94 	.word	0x20000c94
 80017f8:	200000ec 	.word	0x200000ec

080017fc <_Z11WS2812_send7Color_t>:

void WS2812_send(Color_t color){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	6018      	str	r0, [r3, #0]
    uint8_t buffer[12];
    int i;

    i = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
    for(int j = 0; j != 4; ++j){
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
 800180e:	e038      	b.n	8001882 <_Z11WS2812_send7Color_t+0x86>
        buffer[4*i+j] = (color.g & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	0019      	movs	r1, r3
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2207      	movs	r2, #7
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	4119      	asrs	r1, r3
 8001820:	000b      	movs	r3, r1
 8001822:	2201      	movs	r2, #1
 8001824:	4013      	ands	r3, r2
 8001826:	d001      	beq.n	800182c <_Z11WS2812_send7Color_t+0x30>
 8001828:	21c0      	movs	r1, #192	@ 0xc0
 800182a:	e000      	b.n	800182e <_Z11WS2812_send7Color_t+0x32>
 800182c:	2180      	movs	r1, #128	@ 0x80
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	009a      	lsls	r2, r3, #2
 8001832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001834:	18d3      	adds	r3, r2, r3
 8001836:	200c      	movs	r0, #12
 8001838:	183a      	adds	r2, r7, r0
 800183a:	54d1      	strb	r1, [r2, r3]
        buffer[4*i+j] |= color.g & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	009a      	lsls	r2, r3, #2
 8001840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001842:	18d3      	adds	r3, r2, r3
 8001844:	183a      	adds	r2, r7, r0
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	b25a      	sxtb	r2, r3
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	0018      	movs	r0, r3
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	2103      	movs	r1, #3
 8001854:	1acb      	subs	r3, r1, r3
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4118      	asrs	r0, r3
 800185a:	0003      	movs	r3, r0
 800185c:	2101      	movs	r1, #1
 800185e:	400b      	ands	r3, r1
 8001860:	d001      	beq.n	8001866 <_Z11WS2812_send7Color_t+0x6a>
 8001862:	230c      	movs	r3, #12
 8001864:	e000      	b.n	8001868 <_Z11WS2812_send7Color_t+0x6c>
 8001866:	2308      	movs	r3, #8
 8001868:	4313      	orrs	r3, r2
 800186a:	b259      	sxtb	r1, r3
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	009a      	lsls	r2, r3, #2
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001872:	18d3      	adds	r3, r2, r3
 8001874:	b2c9      	uxtb	r1, r1
 8001876:	220c      	movs	r2, #12
 8001878:	18ba      	adds	r2, r7, r2
 800187a:	54d1      	strb	r1, [r2, r3]
    for(int j = 0; j != 4; ++j){
 800187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187e:	3301      	adds	r3, #1
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	2b04      	cmp	r3, #4
 8001886:	d1c3      	bne.n	8001810 <_Z11WS2812_send7Color_t+0x14>
    }
    i = 1;
 8001888:	2301      	movs	r3, #1
 800188a:	61bb      	str	r3, [r7, #24]
    for(int j = 0; j != 4; ++j){
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
 8001890:	e038      	b.n	8001904 <_Z11WS2812_send7Color_t+0x108>
        buffer[4*i+j] = (color.r & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	785b      	ldrb	r3, [r3, #1]
 8001896:	0019      	movs	r1, r3
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	2207      	movs	r2, #7
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	4119      	asrs	r1, r3
 80018a2:	000b      	movs	r3, r1
 80018a4:	2201      	movs	r2, #1
 80018a6:	4013      	ands	r3, r2
 80018a8:	d001      	beq.n	80018ae <_Z11WS2812_send7Color_t+0xb2>
 80018aa:	21c0      	movs	r1, #192	@ 0xc0
 80018ac:	e000      	b.n	80018b0 <_Z11WS2812_send7Color_t+0xb4>
 80018ae:	2180      	movs	r1, #128	@ 0x80
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	009a      	lsls	r2, r3, #2
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	18d3      	adds	r3, r2, r3
 80018b8:	200c      	movs	r0, #12
 80018ba:	183a      	adds	r2, r7, r0
 80018bc:	54d1      	strb	r1, [r2, r3]
        buffer[4*i+j] |= color.r & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	009a      	lsls	r2, r3, #2
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	18d3      	adds	r3, r2, r3
 80018c6:	183a      	adds	r2, r7, r0
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	b25a      	sxtb	r2, r3
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	785b      	ldrb	r3, [r3, #1]
 80018d0:	0018      	movs	r0, r3
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	2103      	movs	r1, #3
 80018d6:	1acb      	subs	r3, r1, r3
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4118      	asrs	r0, r3
 80018dc:	0003      	movs	r3, r0
 80018de:	2101      	movs	r1, #1
 80018e0:	400b      	ands	r3, r1
 80018e2:	d001      	beq.n	80018e8 <_Z11WS2812_send7Color_t+0xec>
 80018e4:	230c      	movs	r3, #12
 80018e6:	e000      	b.n	80018ea <_Z11WS2812_send7Color_t+0xee>
 80018e8:	2308      	movs	r3, #8
 80018ea:	4313      	orrs	r3, r2
 80018ec:	b259      	sxtb	r1, r3
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	009a      	lsls	r2, r3, #2
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	18d3      	adds	r3, r2, r3
 80018f6:	b2c9      	uxtb	r1, r1
 80018f8:	220c      	movs	r2, #12
 80018fa:	18ba      	adds	r2, r7, r2
 80018fc:	54d1      	strb	r1, [r2, r3]
    for(int j = 0; j != 4; ++j){
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	3301      	adds	r3, #1
 8001902:	623b      	str	r3, [r7, #32]
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	2b04      	cmp	r3, #4
 8001908:	d1c3      	bne.n	8001892 <_Z11WS2812_send7Color_t+0x96>
    }
    i = 2;
 800190a:	2302      	movs	r3, #2
 800190c:	61bb      	str	r3, [r7, #24]
    for(int j = 0; j != 4; ++j){
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	e038      	b.n	8001986 <_Z11WS2812_send7Color_t+0x18a>
        buffer[4*i+j] = (color.b & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	789b      	ldrb	r3, [r3, #2]
 8001918:	0019      	movs	r1, r3
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	2207      	movs	r2, #7
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	4119      	asrs	r1, r3
 8001924:	000b      	movs	r3, r1
 8001926:	2201      	movs	r2, #1
 8001928:	4013      	ands	r3, r2
 800192a:	d001      	beq.n	8001930 <_Z11WS2812_send7Color_t+0x134>
 800192c:	21c0      	movs	r1, #192	@ 0xc0
 800192e:	e000      	b.n	8001932 <_Z11WS2812_send7Color_t+0x136>
 8001930:	2180      	movs	r1, #128	@ 0x80
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	009a      	lsls	r2, r3, #2
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	18d3      	adds	r3, r2, r3
 800193a:	200c      	movs	r0, #12
 800193c:	183a      	adds	r2, r7, r0
 800193e:	54d1      	strb	r1, [r2, r3]
        buffer[4*i+j] |= color.b & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	009a      	lsls	r2, r3, #2
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	18d3      	adds	r3, r2, r3
 8001948:	183a      	adds	r2, r7, r0
 800194a:	5cd3      	ldrb	r3, [r2, r3]
 800194c:	b25a      	sxtb	r2, r3
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	789b      	ldrb	r3, [r3, #2]
 8001952:	0018      	movs	r0, r3
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	2103      	movs	r1, #3
 8001958:	1acb      	subs	r3, r1, r3
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4118      	asrs	r0, r3
 800195e:	0003      	movs	r3, r0
 8001960:	2101      	movs	r1, #1
 8001962:	400b      	ands	r3, r1
 8001964:	d001      	beq.n	800196a <_Z11WS2812_send7Color_t+0x16e>
 8001966:	230c      	movs	r3, #12
 8001968:	e000      	b.n	800196c <_Z11WS2812_send7Color_t+0x170>
 800196a:	2308      	movs	r3, #8
 800196c:	4313      	orrs	r3, r2
 800196e:	b259      	sxtb	r1, r3
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	009a      	lsls	r2, r3, #2
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	18d3      	adds	r3, r2, r3
 8001978:	b2c9      	uxtb	r1, r1
 800197a:	220c      	movs	r2, #12
 800197c:	18ba      	adds	r2, r7, r2
 800197e:	54d1      	strb	r1, [r2, r3]
    for(int j = 0; j != 4; ++j){
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	3301      	adds	r3, #1
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	2b04      	cmp	r3, #4
 800198a:	d1c3      	bne.n	8001914 <_Z11WS2812_send7Color_t+0x118>
    }

    HAL_SPI_Transmit(&hspi1, buffer, 12, 10);
 800198c:	230c      	movs	r3, #12
 800198e:	18f9      	adds	r1, r7, r3
 8001990:	4804      	ldr	r0, [pc, #16]	@ (80019a4 <_Z11WS2812_send7Color_t+0x1a8>)
 8001992:	230a      	movs	r3, #10
 8001994:	220c      	movs	r2, #12
 8001996:	f7ff fd63 	bl	8001460 <HAL_SPI_Transmit>
}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	b00a      	add	sp, #40	@ 0x28
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			@ (mov r8, r8)
 80019a4:	200000ec 	.word	0x200000ec

080019a8 <_Z16WS2812_color_set7Color_th>:
{
	HAL_SPI_Transmit_DMA(&hspi1, ws2812_data_DMA, WS2812_LEN*3*4);
}

void WS2812_color_set(Color_t color, uint8_t num)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	6018      	str	r0, [r3, #0]
 80019b2:	000a      	movs	r2, r1
 80019b4:	1cfb      	adds	r3, r7, #3
 80019b6:	701a      	strb	r2, [r3, #0]
	int i;
	i = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
	for(int j = 0; j != 4; ++j)
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	e048      	b.n	8001a54 <_Z16WS2812_color_set7Color_th+0xac>
	{
		ws2812_data_DMA[12*num+4*i+j] = (color.g & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	0019      	movs	r1, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2207      	movs	r2, #7
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	4119      	asrs	r1, r3
 80019d2:	000b      	movs	r3, r1
 80019d4:	2201      	movs	r2, #1
 80019d6:	4013      	ands	r3, r2
 80019d8:	d001      	beq.n	80019de <_Z16WS2812_color_set7Color_th+0x36>
 80019da:	21c0      	movs	r1, #192	@ 0xc0
 80019dc:	e000      	b.n	80019e0 <_Z16WS2812_color_set7Color_th+0x38>
 80019de:	2180      	movs	r1, #128	@ 0x80
 80019e0:	1cfb      	adds	r3, r7, #3
 80019e2:	781a      	ldrb	r2, [r3, #0]
 80019e4:	0013      	movs	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	189a      	adds	r2, r3, r2
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	18d3      	adds	r3, r2, r3
 80019ee:	009a      	lsls	r2, r3, #2
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	18d3      	adds	r3, r2, r3
 80019f4:	4a6c      	ldr	r2, [pc, #432]	@ (8001ba8 <_Z16WS2812_color_set7Color_th+0x200>)
 80019f6:	54d1      	strb	r1, [r2, r3]
		ws2812_data_DMA[12*num+4*i+j] |= color.g & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 80019f8:	1cfb      	adds	r3, r7, #3
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	0013      	movs	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	189a      	adds	r2, r3, r2
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	18d3      	adds	r3, r2, r3
 8001a06:	009a      	lsls	r2, r3, #2
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	18d3      	adds	r3, r2, r3
 8001a0c:	4a66      	ldr	r2, [pc, #408]	@ (8001ba8 <_Z16WS2812_color_set7Color_th+0x200>)
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	b25a      	sxtb	r2, r3
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	0018      	movs	r0, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	2103      	movs	r1, #3
 8001a1c:	1acb      	subs	r3, r1, r3
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4118      	asrs	r0, r3
 8001a22:	0003      	movs	r3, r0
 8001a24:	2101      	movs	r1, #1
 8001a26:	400b      	ands	r3, r1
 8001a28:	d001      	beq.n	8001a2e <_Z16WS2812_color_set7Color_th+0x86>
 8001a2a:	230c      	movs	r3, #12
 8001a2c:	e000      	b.n	8001a30 <_Z16WS2812_color_set7Color_th+0x88>
 8001a2e:	2308      	movs	r3, #8
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b259      	sxtb	r1, r3
 8001a34:	1cfb      	adds	r3, r7, #3
 8001a36:	781a      	ldrb	r2, [r3, #0]
 8001a38:	0013      	movs	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	189a      	adds	r2, r3, r2
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	18d3      	adds	r3, r2, r3
 8001a42:	009a      	lsls	r2, r3, #2
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	18d3      	adds	r3, r2, r3
 8001a48:	b2c9      	uxtb	r1, r1
 8001a4a:	4a57      	ldr	r2, [pc, #348]	@ (8001ba8 <_Z16WS2812_color_set7Color_th+0x200>)
 8001a4c:	54d1      	strb	r1, [r2, r3]
	for(int j = 0; j != 4; ++j)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3301      	adds	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d1b3      	bne.n	80019c2 <_Z16WS2812_color_set7Color_th+0x1a>
	}
	i = 1;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	60bb      	str	r3, [r7, #8]
	for(int j = 0; j != 4; ++j)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	e048      	b.n	8001af6 <_Z16WS2812_color_set7Color_th+0x14e>
	{
		ws2812_data_DMA[12*num+4*i+j] = (color.r & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	785b      	ldrb	r3, [r3, #1]
 8001a68:	0019      	movs	r1, r3
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2207      	movs	r2, #7
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	4119      	asrs	r1, r3
 8001a74:	000b      	movs	r3, r1
 8001a76:	2201      	movs	r2, #1
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d001      	beq.n	8001a80 <_Z16WS2812_color_set7Color_th+0xd8>
 8001a7c:	21c0      	movs	r1, #192	@ 0xc0
 8001a7e:	e000      	b.n	8001a82 <_Z16WS2812_color_set7Color_th+0xda>
 8001a80:	2180      	movs	r1, #128	@ 0x80
 8001a82:	1cfb      	adds	r3, r7, #3
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	0013      	movs	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	189a      	adds	r2, r3, r2
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	18d3      	adds	r3, r2, r3
 8001a90:	009a      	lsls	r2, r3, #2
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	18d3      	adds	r3, r2, r3
 8001a96:	4a44      	ldr	r2, [pc, #272]	@ (8001ba8 <_Z16WS2812_color_set7Color_th+0x200>)
 8001a98:	54d1      	strb	r1, [r2, r3]
		ws2812_data_DMA[12*num+4*i+j] |= color.r & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 8001a9a:	1cfb      	adds	r3, r7, #3
 8001a9c:	781a      	ldrb	r2, [r3, #0]
 8001a9e:	0013      	movs	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	189a      	adds	r2, r3, r2
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	18d3      	adds	r3, r2, r3
 8001aa8:	009a      	lsls	r2, r3, #2
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	18d3      	adds	r3, r2, r3
 8001aae:	4a3e      	ldr	r2, [pc, #248]	@ (8001ba8 <_Z16WS2812_color_set7Color_th+0x200>)
 8001ab0:	5cd3      	ldrb	r3, [r2, r3]
 8001ab2:	b25a      	sxtb	r2, r3
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	785b      	ldrb	r3, [r3, #1]
 8001ab8:	0018      	movs	r0, r3
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	2103      	movs	r1, #3
 8001abe:	1acb      	subs	r3, r1, r3
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4118      	asrs	r0, r3
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	400b      	ands	r3, r1
 8001aca:	d001      	beq.n	8001ad0 <_Z16WS2812_color_set7Color_th+0x128>
 8001acc:	230c      	movs	r3, #12
 8001ace:	e000      	b.n	8001ad2 <_Z16WS2812_color_set7Color_th+0x12a>
 8001ad0:	2308      	movs	r3, #8
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	b259      	sxtb	r1, r3
 8001ad6:	1cfb      	adds	r3, r7, #3
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	0013      	movs	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	189a      	adds	r2, r3, r2
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	18d3      	adds	r3, r2, r3
 8001ae4:	009a      	lsls	r2, r3, #2
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	18d3      	adds	r3, r2, r3
 8001aea:	b2c9      	uxtb	r1, r1
 8001aec:	4a2e      	ldr	r2, [pc, #184]	@ (8001ba8 <_Z16WS2812_color_set7Color_th+0x200>)
 8001aee:	54d1      	strb	r1, [r2, r3]
	for(int j = 0; j != 4; ++j)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	3301      	adds	r3, #1
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d1b3      	bne.n	8001a64 <_Z16WS2812_color_set7Color_th+0xbc>
	}
	i = 2;
 8001afc:	2302      	movs	r3, #2
 8001afe:	60bb      	str	r3, [r7, #8]
	for(int j = 0; j != 4; ++j)
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e048      	b.n	8001b98 <_Z16WS2812_color_set7Color_th+0x1f0>
	{
		ws2812_data_DMA[12*num+4*i+j] = (color.b & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	789b      	ldrb	r3, [r3, #2]
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2207      	movs	r2, #7
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	4119      	asrs	r1, r3
 8001b16:	000b      	movs	r3, r1
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d001      	beq.n	8001b22 <_Z16WS2812_color_set7Color_th+0x17a>
 8001b1e:	21c0      	movs	r1, #192	@ 0xc0
 8001b20:	e000      	b.n	8001b24 <_Z16WS2812_color_set7Color_th+0x17c>
 8001b22:	2180      	movs	r1, #128	@ 0x80
 8001b24:	1cfb      	adds	r3, r7, #3
 8001b26:	781a      	ldrb	r2, [r3, #0]
 8001b28:	0013      	movs	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	189a      	adds	r2, r3, r2
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	18d3      	adds	r3, r2, r3
 8001b32:	009a      	lsls	r2, r3, #2
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	18d3      	adds	r3, r2, r3
 8001b38:	4a1b      	ldr	r2, [pc, #108]	@ (8001ba8 <_Z16WS2812_color_set7Color_th+0x200>)
 8001b3a:	54d1      	strb	r1, [r2, r3]
		ws2812_data_DMA[12*num+4*i+j] |= color.b & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 8001b3c:	1cfb      	adds	r3, r7, #3
 8001b3e:	781a      	ldrb	r2, [r3, #0]
 8001b40:	0013      	movs	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	189a      	adds	r2, r3, r2
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	18d3      	adds	r3, r2, r3
 8001b4a:	009a      	lsls	r2, r3, #2
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	18d3      	adds	r3, r2, r3
 8001b50:	4a15      	ldr	r2, [pc, #84]	@ (8001ba8 <_Z16WS2812_color_set7Color_th+0x200>)
 8001b52:	5cd3      	ldrb	r3, [r2, r3]
 8001b54:	b25a      	sxtb	r2, r3
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	789b      	ldrb	r3, [r3, #2]
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2103      	movs	r1, #3
 8001b60:	1acb      	subs	r3, r1, r3
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4118      	asrs	r0, r3
 8001b66:	0003      	movs	r3, r0
 8001b68:	2101      	movs	r1, #1
 8001b6a:	400b      	ands	r3, r1
 8001b6c:	d001      	beq.n	8001b72 <_Z16WS2812_color_set7Color_th+0x1ca>
 8001b6e:	230c      	movs	r3, #12
 8001b70:	e000      	b.n	8001b74 <_Z16WS2812_color_set7Color_th+0x1cc>
 8001b72:	2308      	movs	r3, #8
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b259      	sxtb	r1, r3
 8001b78:	1cfb      	adds	r3, r7, #3
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	0013      	movs	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	189a      	adds	r2, r3, r2
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	18d3      	adds	r3, r2, r3
 8001b86:	009a      	lsls	r2, r3, #2
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	18d3      	adds	r3, r2, r3
 8001b8c:	b2c9      	uxtb	r1, r1
 8001b8e:	4a06      	ldr	r2, [pc, #24]	@ (8001ba8 <_Z16WS2812_color_set7Color_th+0x200>)
 8001b90:	54d1      	strb	r1, [r2, r3]
	for(int j = 0; j != 4; ++j)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3301      	adds	r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d1b3      	bne.n	8001b06 <_Z16WS2812_color_set7Color_th+0x15e>
	}
}
 8001b9e:	46c0      	nop			@ (mov r8, r8)
 8001ba0:	46c0      	nop			@ (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b006      	add	sp, #24
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000394 	.word	0x20000394

08001bac <_Z14WS2812_Handlerv>:

void WS2812_Handler(){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
    for(int i = 0; i < WS2812_LEN; i++){
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	e01a      	b.n	8001bee <_Z14WS2812_Handlerv+0x42>
        WS2812_send(ws2812_data[i]);
 8001bb8:	4a11      	ldr	r2, [pc, #68]	@ (8001c00 <_Z14WS2812_Handlerv+0x54>)
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	000b      	movs	r3, r1
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	185b      	adds	r3, r3, r1
 8001bc2:	5c99      	ldrb	r1, [r3, r2]
 8001bc4:	18d0      	adds	r0, r2, r3
 8001bc6:	7840      	ldrb	r0, [r0, #1]
 8001bc8:	0200      	lsls	r0, r0, #8
 8001bca:	4301      	orrs	r1, r0
 8001bcc:	18d3      	adds	r3, r2, r3
 8001bce:	789b      	ldrb	r3, [r3, #2]
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	430b      	orrs	r3, r1
 8001bd4:	001a      	movs	r2, r3
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	0212      	lsls	r2, r2, #8
 8001bda:	0a12      	lsrs	r2, r2, #8
 8001bdc:	0e1b      	lsrs	r3, r3, #24
 8001bde:	061b      	lsls	r3, r3, #24
 8001be0:	4313      	orrs	r3, r2
 8001be2:	0018      	movs	r0, r3
 8001be4:	f7ff fe0a 	bl	80017fc <_Z11WS2812_send7Color_t>
    for(int i = 0; i < WS2812_LEN; i++){
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3301      	adds	r3, #1
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2bbf      	cmp	r3, #191	@ 0xbf
 8001bf2:	dde1      	ble.n	8001bb8 <_Z14WS2812_Handlerv+0xc>
    }
    WS2812_reset();
 8001bf4:	f7ff fdf2 	bl	80017dc <_Z12WS2812_resetv>
}
 8001bf8:	46c0      	nop			@ (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b002      	add	sp, #8
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000154 	.word	0x20000154

08001c04 <_ZN10LED_MatrixC1Ev>:
#ifndef PROJECT1_V0_LED_MATRIX_H
#define PROJECT1_V0_LED_MATRIX_H

#include "module.h"

class LED_Matrix {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	23c0      	movs	r3, #192	@ 0xc0
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4905      	ldr	r1, [pc, #20]	@ (8001c28 <_ZN10LED_MatrixC1Ev+0x24>)
 8001c14:	18d3      	adds	r3, r2, r3
 8001c16:	2260      	movs	r2, #96	@ 0x60
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f000 f87f 	bl	8001d1c <memcpy>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b002      	add	sp, #8
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	08001d48 	.word	0x08001d48

08001c2c <task_handler>:
    color_flow_next();
    t1 = HAL_GetTick() - t0;
}


void task_handler(){ //1ms中断
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
    if(HAL_GetTick() % 10 == 0) WS2812_Handler();
 8001c30:	f7fe fca2 	bl	8000578 <HAL_GetTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	210a      	movs	r1, #10
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7fe fae7 	bl	800020c <__aeabi_uidivmod>
 8001c3e:	000b      	movs	r3, r1
 8001c40:	425a      	negs	r2, r3
 8001c42:	4153      	adcs	r3, r2
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <task_handler+0x22>
 8001c4a:	f7ff ffaf 	bl	8001bac <_Z14WS2812_Handlerv>

    if(HAL_GetTick() % 10 == 0) cube.Handler();
 8001c4e:	f7fe fc93 	bl	8000578 <HAL_GetTick>
 8001c52:	0003      	movs	r3, r0
 8001c54:	210a      	movs	r1, #10
 8001c56:	0018      	movs	r0, r3
 8001c58:	f7fe fad8 	bl	800020c <__aeabi_uidivmod>
 8001c5c:	000b      	movs	r3, r1
 8001c5e:	425a      	negs	r2, r3
 8001c60:	4153      	adcs	r3, r2
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <task_handler+0x44>
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <task_handler+0x4c>)
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f7ff fcce 	bl	800160c <_ZN10LED_Matrix7HandlerEv>
}
 8001c70:	46c0      	nop			@ (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	20000d5c 	.word	0x20000d5c

08001c7c <_Z41__static_initialization_and_destruction_0ii>:
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d107      	bne.n	8001c9c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ca4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d103      	bne.n	8001c9c <_Z41__static_initialization_and_destruction_0ii+0x20>
LED_Matrix cube;
 8001c94:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7ff ffb4 	bl	8001c04 <_ZN10LED_MatrixC1Ev>
}
 8001c9c:	46c0      	nop			@ (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b002      	add	sp, #8
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	0000ffff 	.word	0x0000ffff
 8001ca8:	20000d5c 	.word	0x20000d5c

08001cac <_GLOBAL__sub_I_cube>:
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4b03      	ldr	r3, [pc, #12]	@ (8001cc0 <_GLOBAL__sub_I_cube+0x14>)
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f7ff ffe1 	bl	8001c7c <_Z41__static_initialization_and_destruction_0ii>
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			@ (mov r8, r8)
 8001cc0:	0000ffff 	.word	0x0000ffff

08001cc4 <memset>:
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	1882      	adds	r2, r0, r2
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d100      	bne.n	8001cce <memset+0xa>
 8001ccc:	4770      	bx	lr
 8001cce:	7019      	strb	r1, [r3, #0]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	e7f9      	b.n	8001cc8 <memset+0x4>

08001cd4 <__libc_init_array>:
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	2600      	movs	r6, #0
 8001cd8:	4c0c      	ldr	r4, [pc, #48]	@ (8001d0c <__libc_init_array+0x38>)
 8001cda:	4d0d      	ldr	r5, [pc, #52]	@ (8001d10 <__libc_init_array+0x3c>)
 8001cdc:	1b64      	subs	r4, r4, r5
 8001cde:	10a4      	asrs	r4, r4, #2
 8001ce0:	42a6      	cmp	r6, r4
 8001ce2:	d109      	bne.n	8001cf8 <__libc_init_array+0x24>
 8001ce4:	2600      	movs	r6, #0
 8001ce6:	f000 f823 	bl	8001d30 <_init>
 8001cea:	4c0a      	ldr	r4, [pc, #40]	@ (8001d14 <__libc_init_array+0x40>)
 8001cec:	4d0a      	ldr	r5, [pc, #40]	@ (8001d18 <__libc_init_array+0x44>)
 8001cee:	1b64      	subs	r4, r4, r5
 8001cf0:	10a4      	asrs	r4, r4, #2
 8001cf2:	42a6      	cmp	r6, r4
 8001cf4:	d105      	bne.n	8001d02 <__libc_init_array+0x2e>
 8001cf6:	bd70      	pop	{r4, r5, r6, pc}
 8001cf8:	00b3      	lsls	r3, r6, #2
 8001cfa:	58eb      	ldr	r3, [r5, r3]
 8001cfc:	4798      	blx	r3
 8001cfe:	3601      	adds	r6, #1
 8001d00:	e7ee      	b.n	8001ce0 <__libc_init_array+0xc>
 8001d02:	00b3      	lsls	r3, r6, #2
 8001d04:	58eb      	ldr	r3, [r5, r3]
 8001d06:	4798      	blx	r3
 8001d08:	3601      	adds	r6, #1
 8001d0a:	e7f2      	b.n	8001cf2 <__libc_init_array+0x1e>
 8001d0c:	08001de8 	.word	0x08001de8
 8001d10:	08001de8 	.word	0x08001de8
 8001d14:	08001df0 	.word	0x08001df0
 8001d18:	08001de8 	.word	0x08001de8

08001d1c <memcpy>:
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	b510      	push	{r4, lr}
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d100      	bne.n	8001d26 <memcpy+0xa>
 8001d24:	bd10      	pop	{r4, pc}
 8001d26:	5ccc      	ldrb	r4, [r1, r3]
 8001d28:	54c4      	strb	r4, [r0, r3]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	e7f8      	b.n	8001d20 <memcpy+0x4>
	...

08001d30 <_init>:
 8001d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d36:	bc08      	pop	{r3}
 8001d38:	469e      	mov	lr, r3
 8001d3a:	4770      	bx	lr

08001d3c <_fini>:
 8001d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3e:	46c0      	nop			@ (mov r8, r8)
 8001d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d42:	bc08      	pop	{r3}
 8001d44:	469e      	mov	lr, r3
 8001d46:	4770      	bx	lr
