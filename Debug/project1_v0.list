
project1_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004154  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800420c  0800420c  0000520c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042ac  080042ac  0000607c  2**0
                  CONTENTS
  4 .ARM          00000000  080042ac  080042ac  0000607c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042ac  080042ac  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080042ac  080042ac  000052ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042b4  080042b4  000052b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080042b8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000104c  2000007c  08004334  0000607c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c8  08004334  000060c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bf9  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000254d  00000000  00000000  0000ec9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  000111f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f1  00000000  00000000  00011998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001535e  00000000  00000000  00012089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df6c  00000000  00000000  000273e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079169  00000000  00000000  00035353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae4bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001570  00000000  00000000  000ae500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00002bdc  00000000  00000000  000afa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  000b264c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000007c 	.word	0x2000007c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080041f4 	.word	0x080041f4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000080 	.word	0x20000080
 80000fc:	080041f4 	.word	0x080041f4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <__aeabi_cdrcmple>:
 8000218:	4684      	mov	ip, r0
 800021a:	0010      	movs	r0, r2
 800021c:	4662      	mov	r2, ip
 800021e:	468c      	mov	ip, r1
 8000220:	0019      	movs	r1, r3
 8000222:	4663      	mov	r3, ip
 8000224:	e000      	b.n	8000228 <__aeabi_cdcmpeq>
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_cdcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f001 f87d 	bl	8001328 <__ledf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cdcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_dcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 ffbd 	bl	80011b8 <__eqdf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_dcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f001 f86f 	bl	8001328 <__ledf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_dcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_dcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f001 f865 	bl	8001328 <__ledf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_dcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_dcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 ffe7 	bl	8001240 <__gedf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_dcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_dcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 ffdd 	bl	8001240 <__gedf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_dcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_cfrcmple>:
 8000294:	4684      	mov	ip, r0
 8000296:	0008      	movs	r0, r1
 8000298:	4661      	mov	r1, ip
 800029a:	e7ff      	b.n	800029c <__aeabi_cfcmpeq>

0800029c <__aeabi_cfcmpeq>:
 800029c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800029e:	f000 fa35 	bl	800070c <__lesf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	d401      	bmi.n	80002aa <__aeabi_cfcmpeq+0xe>
 80002a6:	2100      	movs	r1, #0
 80002a8:	42c8      	cmn	r0, r1
 80002aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002ac <__aeabi_fcmpeq>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	f000 f9b5 	bl	800061c <__eqsf2>
 80002b2:	4240      	negs	r0, r0
 80002b4:	3001      	adds	r0, #1
 80002b6:	bd10      	pop	{r4, pc}

080002b8 <__aeabi_fcmplt>:
 80002b8:	b510      	push	{r4, lr}
 80002ba:	f000 fa27 	bl	800070c <__lesf2>
 80002be:	2800      	cmp	r0, #0
 80002c0:	db01      	blt.n	80002c6 <__aeabi_fcmplt+0xe>
 80002c2:	2000      	movs	r0, #0
 80002c4:	bd10      	pop	{r4, pc}
 80002c6:	2001      	movs	r0, #1
 80002c8:	bd10      	pop	{r4, pc}
 80002ca:	46c0      	nop			@ (mov r8, r8)

080002cc <__aeabi_fcmple>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	f000 fa1d 	bl	800070c <__lesf2>
 80002d2:	2800      	cmp	r0, #0
 80002d4:	dd01      	ble.n	80002da <__aeabi_fcmple+0xe>
 80002d6:	2000      	movs	r0, #0
 80002d8:	bd10      	pop	{r4, pc}
 80002da:	2001      	movs	r0, #1
 80002dc:	bd10      	pop	{r4, pc}
 80002de:	46c0      	nop			@ (mov r8, r8)

080002e0 <__aeabi_fcmpgt>:
 80002e0:	b510      	push	{r4, lr}
 80002e2:	f000 f9c3 	bl	800066c <__gesf2>
 80002e6:	2800      	cmp	r0, #0
 80002e8:	dc01      	bgt.n	80002ee <__aeabi_fcmpgt+0xe>
 80002ea:	2000      	movs	r0, #0
 80002ec:	bd10      	pop	{r4, pc}
 80002ee:	2001      	movs	r0, #1
 80002f0:	bd10      	pop	{r4, pc}
 80002f2:	46c0      	nop			@ (mov r8, r8)

080002f4 <__aeabi_fcmpge>:
 80002f4:	b510      	push	{r4, lr}
 80002f6:	f000 f9b9 	bl	800066c <__gesf2>
 80002fa:	2800      	cmp	r0, #0
 80002fc:	da01      	bge.n	8000302 <__aeabi_fcmpge+0xe>
 80002fe:	2000      	movs	r0, #0
 8000300:	bd10      	pop	{r4, pc}
 8000302:	2001      	movs	r0, #1
 8000304:	bd10      	pop	{r4, pc}
 8000306:	46c0      	nop			@ (mov r8, r8)

08000308 <__aeabi_fadd>:
 8000308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030a:	46ce      	mov	lr, r9
 800030c:	4647      	mov	r7, r8
 800030e:	0243      	lsls	r3, r0, #9
 8000310:	0a5a      	lsrs	r2, r3, #9
 8000312:	024e      	lsls	r6, r1, #9
 8000314:	0045      	lsls	r5, r0, #1
 8000316:	0fc4      	lsrs	r4, r0, #31
 8000318:	0048      	lsls	r0, r1, #1
 800031a:	4691      	mov	r9, r2
 800031c:	0e2d      	lsrs	r5, r5, #24
 800031e:	0a72      	lsrs	r2, r6, #9
 8000320:	0e00      	lsrs	r0, r0, #24
 8000322:	4694      	mov	ip, r2
 8000324:	b580      	push	{r7, lr}
 8000326:	099b      	lsrs	r3, r3, #6
 8000328:	0fc9      	lsrs	r1, r1, #31
 800032a:	09b6      	lsrs	r6, r6, #6
 800032c:	1a2a      	subs	r2, r5, r0
 800032e:	428c      	cmp	r4, r1
 8000330:	d021      	beq.n	8000376 <__aeabi_fadd+0x6e>
 8000332:	2a00      	cmp	r2, #0
 8000334:	dd0d      	ble.n	8000352 <__aeabi_fadd+0x4a>
 8000336:	2800      	cmp	r0, #0
 8000338:	d12d      	bne.n	8000396 <__aeabi_fadd+0x8e>
 800033a:	2e00      	cmp	r6, #0
 800033c:	d100      	bne.n	8000340 <__aeabi_fadd+0x38>
 800033e:	e08d      	b.n	800045c <__aeabi_fadd+0x154>
 8000340:	1e51      	subs	r1, r2, #1
 8000342:	2a01      	cmp	r2, #1
 8000344:	d100      	bne.n	8000348 <__aeabi_fadd+0x40>
 8000346:	e11d      	b.n	8000584 <__aeabi_fadd+0x27c>
 8000348:	2aff      	cmp	r2, #255	@ 0xff
 800034a:	d100      	bne.n	800034e <__aeabi_fadd+0x46>
 800034c:	e0ab      	b.n	80004a6 <__aeabi_fadd+0x19e>
 800034e:	000a      	movs	r2, r1
 8000350:	e027      	b.n	80003a2 <__aeabi_fadd+0x9a>
 8000352:	2a00      	cmp	r2, #0
 8000354:	d04d      	beq.n	80003f2 <__aeabi_fadd+0xea>
 8000356:	1b42      	subs	r2, r0, r5
 8000358:	2d00      	cmp	r5, #0
 800035a:	d000      	beq.n	800035e <__aeabi_fadd+0x56>
 800035c:	e0cc      	b.n	80004f8 <__aeabi_fadd+0x1f0>
 800035e:	2b00      	cmp	r3, #0
 8000360:	d100      	bne.n	8000364 <__aeabi_fadd+0x5c>
 8000362:	e079      	b.n	8000458 <__aeabi_fadd+0x150>
 8000364:	1e54      	subs	r4, r2, #1
 8000366:	2a01      	cmp	r2, #1
 8000368:	d100      	bne.n	800036c <__aeabi_fadd+0x64>
 800036a:	e128      	b.n	80005be <__aeabi_fadd+0x2b6>
 800036c:	2aff      	cmp	r2, #255	@ 0xff
 800036e:	d100      	bne.n	8000372 <__aeabi_fadd+0x6a>
 8000370:	e097      	b.n	80004a2 <__aeabi_fadd+0x19a>
 8000372:	0022      	movs	r2, r4
 8000374:	e0c5      	b.n	8000502 <__aeabi_fadd+0x1fa>
 8000376:	2a00      	cmp	r2, #0
 8000378:	dc00      	bgt.n	800037c <__aeabi_fadd+0x74>
 800037a:	e096      	b.n	80004aa <__aeabi_fadd+0x1a2>
 800037c:	2800      	cmp	r0, #0
 800037e:	d04f      	beq.n	8000420 <__aeabi_fadd+0x118>
 8000380:	2dff      	cmp	r5, #255	@ 0xff
 8000382:	d100      	bne.n	8000386 <__aeabi_fadd+0x7e>
 8000384:	e08f      	b.n	80004a6 <__aeabi_fadd+0x19e>
 8000386:	2180      	movs	r1, #128	@ 0x80
 8000388:	04c9      	lsls	r1, r1, #19
 800038a:	430e      	orrs	r6, r1
 800038c:	2a1b      	cmp	r2, #27
 800038e:	dd51      	ble.n	8000434 <__aeabi_fadd+0x12c>
 8000390:	002a      	movs	r2, r5
 8000392:	3301      	adds	r3, #1
 8000394:	e018      	b.n	80003c8 <__aeabi_fadd+0xc0>
 8000396:	2dff      	cmp	r5, #255	@ 0xff
 8000398:	d100      	bne.n	800039c <__aeabi_fadd+0x94>
 800039a:	e084      	b.n	80004a6 <__aeabi_fadd+0x19e>
 800039c:	2180      	movs	r1, #128	@ 0x80
 800039e:	04c9      	lsls	r1, r1, #19
 80003a0:	430e      	orrs	r6, r1
 80003a2:	2101      	movs	r1, #1
 80003a4:	2a1b      	cmp	r2, #27
 80003a6:	dc08      	bgt.n	80003ba <__aeabi_fadd+0xb2>
 80003a8:	0031      	movs	r1, r6
 80003aa:	2020      	movs	r0, #32
 80003ac:	40d1      	lsrs	r1, r2
 80003ae:	1a82      	subs	r2, r0, r2
 80003b0:	4096      	lsls	r6, r2
 80003b2:	0032      	movs	r2, r6
 80003b4:	1e50      	subs	r0, r2, #1
 80003b6:	4182      	sbcs	r2, r0
 80003b8:	4311      	orrs	r1, r2
 80003ba:	1a5b      	subs	r3, r3, r1
 80003bc:	015a      	lsls	r2, r3, #5
 80003be:	d459      	bmi.n	8000474 <__aeabi_fadd+0x16c>
 80003c0:	2107      	movs	r1, #7
 80003c2:	002a      	movs	r2, r5
 80003c4:	4019      	ands	r1, r3
 80003c6:	d049      	beq.n	800045c <__aeabi_fadd+0x154>
 80003c8:	210f      	movs	r1, #15
 80003ca:	4019      	ands	r1, r3
 80003cc:	2904      	cmp	r1, #4
 80003ce:	d000      	beq.n	80003d2 <__aeabi_fadd+0xca>
 80003d0:	3304      	adds	r3, #4
 80003d2:	0159      	lsls	r1, r3, #5
 80003d4:	d542      	bpl.n	800045c <__aeabi_fadd+0x154>
 80003d6:	1c50      	adds	r0, r2, #1
 80003d8:	2afe      	cmp	r2, #254	@ 0xfe
 80003da:	d03a      	beq.n	8000452 <__aeabi_fadd+0x14a>
 80003dc:	019b      	lsls	r3, r3, #6
 80003de:	b2c0      	uxtb	r0, r0
 80003e0:	0a5b      	lsrs	r3, r3, #9
 80003e2:	05c0      	lsls	r0, r0, #23
 80003e4:	4318      	orrs	r0, r3
 80003e6:	07e4      	lsls	r4, r4, #31
 80003e8:	4320      	orrs	r0, r4
 80003ea:	bcc0      	pop	{r6, r7}
 80003ec:	46b9      	mov	r9, r7
 80003ee:	46b0      	mov	r8, r6
 80003f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003f2:	20fe      	movs	r0, #254	@ 0xfe
 80003f4:	4680      	mov	r8, r0
 80003f6:	1c6f      	adds	r7, r5, #1
 80003f8:	0038      	movs	r0, r7
 80003fa:	4647      	mov	r7, r8
 80003fc:	4207      	tst	r7, r0
 80003fe:	d000      	beq.n	8000402 <__aeabi_fadd+0xfa>
 8000400:	e08e      	b.n	8000520 <__aeabi_fadd+0x218>
 8000402:	2d00      	cmp	r5, #0
 8000404:	d000      	beq.n	8000408 <__aeabi_fadd+0x100>
 8000406:	e0b4      	b.n	8000572 <__aeabi_fadd+0x26a>
 8000408:	2b00      	cmp	r3, #0
 800040a:	d100      	bne.n	800040e <__aeabi_fadd+0x106>
 800040c:	e0db      	b.n	80005c6 <__aeabi_fadd+0x2be>
 800040e:	2e00      	cmp	r6, #0
 8000410:	d06c      	beq.n	80004ec <__aeabi_fadd+0x1e4>
 8000412:	1b98      	subs	r0, r3, r6
 8000414:	0145      	lsls	r5, r0, #5
 8000416:	d400      	bmi.n	800041a <__aeabi_fadd+0x112>
 8000418:	e0f7      	b.n	800060a <__aeabi_fadd+0x302>
 800041a:	000c      	movs	r4, r1
 800041c:	1af3      	subs	r3, r6, r3
 800041e:	e03d      	b.n	800049c <__aeabi_fadd+0x194>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d01b      	beq.n	800045c <__aeabi_fadd+0x154>
 8000424:	1e51      	subs	r1, r2, #1
 8000426:	2a01      	cmp	r2, #1
 8000428:	d100      	bne.n	800042c <__aeabi_fadd+0x124>
 800042a:	e082      	b.n	8000532 <__aeabi_fadd+0x22a>
 800042c:	2aff      	cmp	r2, #255	@ 0xff
 800042e:	d03a      	beq.n	80004a6 <__aeabi_fadd+0x19e>
 8000430:	000a      	movs	r2, r1
 8000432:	e7ab      	b.n	800038c <__aeabi_fadd+0x84>
 8000434:	0031      	movs	r1, r6
 8000436:	2020      	movs	r0, #32
 8000438:	40d1      	lsrs	r1, r2
 800043a:	1a82      	subs	r2, r0, r2
 800043c:	4096      	lsls	r6, r2
 800043e:	0032      	movs	r2, r6
 8000440:	1e50      	subs	r0, r2, #1
 8000442:	4182      	sbcs	r2, r0
 8000444:	430a      	orrs	r2, r1
 8000446:	189b      	adds	r3, r3, r2
 8000448:	015a      	lsls	r2, r3, #5
 800044a:	d5b9      	bpl.n	80003c0 <__aeabi_fadd+0xb8>
 800044c:	1c6a      	adds	r2, r5, #1
 800044e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000450:	d175      	bne.n	800053e <__aeabi_fadd+0x236>
 8000452:	20ff      	movs	r0, #255	@ 0xff
 8000454:	2300      	movs	r3, #0
 8000456:	e7c4      	b.n	80003e2 <__aeabi_fadd+0xda>
 8000458:	000c      	movs	r4, r1
 800045a:	0033      	movs	r3, r6
 800045c:	08db      	lsrs	r3, r3, #3
 800045e:	2aff      	cmp	r2, #255	@ 0xff
 8000460:	d146      	bne.n	80004f0 <__aeabi_fadd+0x1e8>
 8000462:	2b00      	cmp	r3, #0
 8000464:	d0f5      	beq.n	8000452 <__aeabi_fadd+0x14a>
 8000466:	2280      	movs	r2, #128	@ 0x80
 8000468:	03d2      	lsls	r2, r2, #15
 800046a:	4313      	orrs	r3, r2
 800046c:	025b      	lsls	r3, r3, #9
 800046e:	20ff      	movs	r0, #255	@ 0xff
 8000470:	0a5b      	lsrs	r3, r3, #9
 8000472:	e7b6      	b.n	80003e2 <__aeabi_fadd+0xda>
 8000474:	019f      	lsls	r7, r3, #6
 8000476:	09bf      	lsrs	r7, r7, #6
 8000478:	0038      	movs	r0, r7
 800047a:	f001 feaf 	bl	80021dc <__clzsi2>
 800047e:	3805      	subs	r0, #5
 8000480:	4087      	lsls	r7, r0
 8000482:	4285      	cmp	r5, r0
 8000484:	dc24      	bgt.n	80004d0 <__aeabi_fadd+0x1c8>
 8000486:	003b      	movs	r3, r7
 8000488:	2120      	movs	r1, #32
 800048a:	1b42      	subs	r2, r0, r5
 800048c:	3201      	adds	r2, #1
 800048e:	40d3      	lsrs	r3, r2
 8000490:	1a8a      	subs	r2, r1, r2
 8000492:	4097      	lsls	r7, r2
 8000494:	1e7a      	subs	r2, r7, #1
 8000496:	4197      	sbcs	r7, r2
 8000498:	2200      	movs	r2, #0
 800049a:	433b      	orrs	r3, r7
 800049c:	0759      	lsls	r1, r3, #29
 800049e:	d193      	bne.n	80003c8 <__aeabi_fadd+0xc0>
 80004a0:	e797      	b.n	80003d2 <__aeabi_fadd+0xca>
 80004a2:	000c      	movs	r4, r1
 80004a4:	0033      	movs	r3, r6
 80004a6:	08db      	lsrs	r3, r3, #3
 80004a8:	e7db      	b.n	8000462 <__aeabi_fadd+0x15a>
 80004aa:	2a00      	cmp	r2, #0
 80004ac:	d014      	beq.n	80004d8 <__aeabi_fadd+0x1d0>
 80004ae:	1b42      	subs	r2, r0, r5
 80004b0:	2d00      	cmp	r5, #0
 80004b2:	d14b      	bne.n	800054c <__aeabi_fadd+0x244>
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d0d0      	beq.n	800045a <__aeabi_fadd+0x152>
 80004b8:	1e51      	subs	r1, r2, #1
 80004ba:	2a01      	cmp	r2, #1
 80004bc:	d100      	bne.n	80004c0 <__aeabi_fadd+0x1b8>
 80004be:	e09e      	b.n	80005fe <__aeabi_fadd+0x2f6>
 80004c0:	2aff      	cmp	r2, #255	@ 0xff
 80004c2:	d0ef      	beq.n	80004a4 <__aeabi_fadd+0x19c>
 80004c4:	000a      	movs	r2, r1
 80004c6:	2a1b      	cmp	r2, #27
 80004c8:	dd5f      	ble.n	800058a <__aeabi_fadd+0x282>
 80004ca:	0002      	movs	r2, r0
 80004cc:	1c73      	adds	r3, r6, #1
 80004ce:	e77b      	b.n	80003c8 <__aeabi_fadd+0xc0>
 80004d0:	4b50      	ldr	r3, [pc, #320]	@ (8000614 <__aeabi_fadd+0x30c>)
 80004d2:	1a2a      	subs	r2, r5, r0
 80004d4:	403b      	ands	r3, r7
 80004d6:	e7e1      	b.n	800049c <__aeabi_fadd+0x194>
 80004d8:	21fe      	movs	r1, #254	@ 0xfe
 80004da:	1c6a      	adds	r2, r5, #1
 80004dc:	4211      	tst	r1, r2
 80004de:	d13b      	bne.n	8000558 <__aeabi_fadd+0x250>
 80004e0:	2d00      	cmp	r5, #0
 80004e2:	d15d      	bne.n	80005a0 <__aeabi_fadd+0x298>
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d07f      	beq.n	80005e8 <__aeabi_fadd+0x2e0>
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d17f      	bne.n	80005ec <__aeabi_fadd+0x2e4>
 80004ec:	2200      	movs	r2, #0
 80004ee:	08db      	lsrs	r3, r3, #3
 80004f0:	025b      	lsls	r3, r3, #9
 80004f2:	0a5b      	lsrs	r3, r3, #9
 80004f4:	b2d0      	uxtb	r0, r2
 80004f6:	e774      	b.n	80003e2 <__aeabi_fadd+0xda>
 80004f8:	28ff      	cmp	r0, #255	@ 0xff
 80004fa:	d0d2      	beq.n	80004a2 <__aeabi_fadd+0x19a>
 80004fc:	2480      	movs	r4, #128	@ 0x80
 80004fe:	04e4      	lsls	r4, r4, #19
 8000500:	4323      	orrs	r3, r4
 8000502:	2401      	movs	r4, #1
 8000504:	2a1b      	cmp	r2, #27
 8000506:	dc07      	bgt.n	8000518 <__aeabi_fadd+0x210>
 8000508:	001c      	movs	r4, r3
 800050a:	2520      	movs	r5, #32
 800050c:	40d4      	lsrs	r4, r2
 800050e:	1aaa      	subs	r2, r5, r2
 8000510:	4093      	lsls	r3, r2
 8000512:	1e5a      	subs	r2, r3, #1
 8000514:	4193      	sbcs	r3, r2
 8000516:	431c      	orrs	r4, r3
 8000518:	1b33      	subs	r3, r6, r4
 800051a:	0005      	movs	r5, r0
 800051c:	000c      	movs	r4, r1
 800051e:	e74d      	b.n	80003bc <__aeabi_fadd+0xb4>
 8000520:	1b9f      	subs	r7, r3, r6
 8000522:	017a      	lsls	r2, r7, #5
 8000524:	d422      	bmi.n	800056c <__aeabi_fadd+0x264>
 8000526:	2f00      	cmp	r7, #0
 8000528:	d1a6      	bne.n	8000478 <__aeabi_fadd+0x170>
 800052a:	2400      	movs	r4, #0
 800052c:	2000      	movs	r0, #0
 800052e:	2300      	movs	r3, #0
 8000530:	e757      	b.n	80003e2 <__aeabi_fadd+0xda>
 8000532:	199b      	adds	r3, r3, r6
 8000534:	2501      	movs	r5, #1
 8000536:	3201      	adds	r2, #1
 8000538:	0159      	lsls	r1, r3, #5
 800053a:	d400      	bmi.n	800053e <__aeabi_fadd+0x236>
 800053c:	e740      	b.n	80003c0 <__aeabi_fadd+0xb8>
 800053e:	2101      	movs	r1, #1
 8000540:	4835      	ldr	r0, [pc, #212]	@ (8000618 <__aeabi_fadd+0x310>)
 8000542:	4019      	ands	r1, r3
 8000544:	085b      	lsrs	r3, r3, #1
 8000546:	4003      	ands	r3, r0
 8000548:	430b      	orrs	r3, r1
 800054a:	e7a7      	b.n	800049c <__aeabi_fadd+0x194>
 800054c:	28ff      	cmp	r0, #255	@ 0xff
 800054e:	d0a9      	beq.n	80004a4 <__aeabi_fadd+0x19c>
 8000550:	2180      	movs	r1, #128	@ 0x80
 8000552:	04c9      	lsls	r1, r1, #19
 8000554:	430b      	orrs	r3, r1
 8000556:	e7b6      	b.n	80004c6 <__aeabi_fadd+0x1be>
 8000558:	2aff      	cmp	r2, #255	@ 0xff
 800055a:	d100      	bne.n	800055e <__aeabi_fadd+0x256>
 800055c:	e779      	b.n	8000452 <__aeabi_fadd+0x14a>
 800055e:	199b      	adds	r3, r3, r6
 8000560:	085b      	lsrs	r3, r3, #1
 8000562:	0759      	lsls	r1, r3, #29
 8000564:	d000      	beq.n	8000568 <__aeabi_fadd+0x260>
 8000566:	e72f      	b.n	80003c8 <__aeabi_fadd+0xc0>
 8000568:	08db      	lsrs	r3, r3, #3
 800056a:	e7c1      	b.n	80004f0 <__aeabi_fadd+0x1e8>
 800056c:	000c      	movs	r4, r1
 800056e:	1af7      	subs	r7, r6, r3
 8000570:	e782      	b.n	8000478 <__aeabi_fadd+0x170>
 8000572:	2b00      	cmp	r3, #0
 8000574:	d12c      	bne.n	80005d0 <__aeabi_fadd+0x2c8>
 8000576:	2e00      	cmp	r6, #0
 8000578:	d193      	bne.n	80004a2 <__aeabi_fadd+0x19a>
 800057a:	2380      	movs	r3, #128	@ 0x80
 800057c:	2400      	movs	r4, #0
 800057e:	20ff      	movs	r0, #255	@ 0xff
 8000580:	03db      	lsls	r3, r3, #15
 8000582:	e72e      	b.n	80003e2 <__aeabi_fadd+0xda>
 8000584:	2501      	movs	r5, #1
 8000586:	1b9b      	subs	r3, r3, r6
 8000588:	e718      	b.n	80003bc <__aeabi_fadd+0xb4>
 800058a:	0019      	movs	r1, r3
 800058c:	2520      	movs	r5, #32
 800058e:	40d1      	lsrs	r1, r2
 8000590:	1aaa      	subs	r2, r5, r2
 8000592:	4093      	lsls	r3, r2
 8000594:	1e5a      	subs	r2, r3, #1
 8000596:	4193      	sbcs	r3, r2
 8000598:	430b      	orrs	r3, r1
 800059a:	0005      	movs	r5, r0
 800059c:	199b      	adds	r3, r3, r6
 800059e:	e753      	b.n	8000448 <__aeabi_fadd+0x140>
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0x29e>
 80005a4:	e77e      	b.n	80004a4 <__aeabi_fadd+0x19c>
 80005a6:	2e00      	cmp	r6, #0
 80005a8:	d100      	bne.n	80005ac <__aeabi_fadd+0x2a4>
 80005aa:	e77c      	b.n	80004a6 <__aeabi_fadd+0x19e>
 80005ac:	2280      	movs	r2, #128	@ 0x80
 80005ae:	03d2      	lsls	r2, r2, #15
 80005b0:	4591      	cmp	r9, r2
 80005b2:	d302      	bcc.n	80005ba <__aeabi_fadd+0x2b2>
 80005b4:	4594      	cmp	ip, r2
 80005b6:	d200      	bcs.n	80005ba <__aeabi_fadd+0x2b2>
 80005b8:	0033      	movs	r3, r6
 80005ba:	08db      	lsrs	r3, r3, #3
 80005bc:	e753      	b.n	8000466 <__aeabi_fadd+0x15e>
 80005be:	000c      	movs	r4, r1
 80005c0:	1af3      	subs	r3, r6, r3
 80005c2:	3501      	adds	r5, #1
 80005c4:	e6fa      	b.n	80003bc <__aeabi_fadd+0xb4>
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d0af      	beq.n	800052a <__aeabi_fadd+0x222>
 80005ca:	000c      	movs	r4, r1
 80005cc:	0033      	movs	r3, r6
 80005ce:	e78d      	b.n	80004ec <__aeabi_fadd+0x1e4>
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d100      	bne.n	80005d6 <__aeabi_fadd+0x2ce>
 80005d4:	e767      	b.n	80004a6 <__aeabi_fadd+0x19e>
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	03d2      	lsls	r2, r2, #15
 80005da:	4591      	cmp	r9, r2
 80005dc:	d3ed      	bcc.n	80005ba <__aeabi_fadd+0x2b2>
 80005de:	4594      	cmp	ip, r2
 80005e0:	d2eb      	bcs.n	80005ba <__aeabi_fadd+0x2b2>
 80005e2:	000c      	movs	r4, r1
 80005e4:	0033      	movs	r3, r6
 80005e6:	e7e8      	b.n	80005ba <__aeabi_fadd+0x2b2>
 80005e8:	0033      	movs	r3, r6
 80005ea:	e77f      	b.n	80004ec <__aeabi_fadd+0x1e4>
 80005ec:	199b      	adds	r3, r3, r6
 80005ee:	2200      	movs	r2, #0
 80005f0:	0159      	lsls	r1, r3, #5
 80005f2:	d5b9      	bpl.n	8000568 <__aeabi_fadd+0x260>
 80005f4:	4a07      	ldr	r2, [pc, #28]	@ (8000614 <__aeabi_fadd+0x30c>)
 80005f6:	4013      	ands	r3, r2
 80005f8:	08db      	lsrs	r3, r3, #3
 80005fa:	2201      	movs	r2, #1
 80005fc:	e778      	b.n	80004f0 <__aeabi_fadd+0x1e8>
 80005fe:	199b      	adds	r3, r3, r6
 8000600:	3201      	adds	r2, #1
 8000602:	3501      	adds	r5, #1
 8000604:	0159      	lsls	r1, r3, #5
 8000606:	d49a      	bmi.n	800053e <__aeabi_fadd+0x236>
 8000608:	e6da      	b.n	80003c0 <__aeabi_fadd+0xb8>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d08d      	beq.n	800052a <__aeabi_fadd+0x222>
 800060e:	08db      	lsrs	r3, r3, #3
 8000610:	e76e      	b.n	80004f0 <__aeabi_fadd+0x1e8>
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	fbffffff 	.word	0xfbffffff
 8000618:	7dffffff 	.word	0x7dffffff

0800061c <__eqsf2>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	0042      	lsls	r2, r0, #1
 8000620:	024e      	lsls	r6, r1, #9
 8000622:	004c      	lsls	r4, r1, #1
 8000624:	0245      	lsls	r5, r0, #9
 8000626:	0a6d      	lsrs	r5, r5, #9
 8000628:	0e12      	lsrs	r2, r2, #24
 800062a:	0fc3      	lsrs	r3, r0, #31
 800062c:	0a76      	lsrs	r6, r6, #9
 800062e:	0e24      	lsrs	r4, r4, #24
 8000630:	0fc9      	lsrs	r1, r1, #31
 8000632:	2aff      	cmp	r2, #255	@ 0xff
 8000634:	d010      	beq.n	8000658 <__eqsf2+0x3c>
 8000636:	2cff      	cmp	r4, #255	@ 0xff
 8000638:	d00c      	beq.n	8000654 <__eqsf2+0x38>
 800063a:	2001      	movs	r0, #1
 800063c:	42a2      	cmp	r2, r4
 800063e:	d10a      	bne.n	8000656 <__eqsf2+0x3a>
 8000640:	42b5      	cmp	r5, r6
 8000642:	d108      	bne.n	8000656 <__eqsf2+0x3a>
 8000644:	428b      	cmp	r3, r1
 8000646:	d00f      	beq.n	8000668 <__eqsf2+0x4c>
 8000648:	2a00      	cmp	r2, #0
 800064a:	d104      	bne.n	8000656 <__eqsf2+0x3a>
 800064c:	0028      	movs	r0, r5
 800064e:	1e43      	subs	r3, r0, #1
 8000650:	4198      	sbcs	r0, r3
 8000652:	e000      	b.n	8000656 <__eqsf2+0x3a>
 8000654:	2001      	movs	r0, #1
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	2001      	movs	r0, #1
 800065a:	2cff      	cmp	r4, #255	@ 0xff
 800065c:	d1fb      	bne.n	8000656 <__eqsf2+0x3a>
 800065e:	4335      	orrs	r5, r6
 8000660:	d1f9      	bne.n	8000656 <__eqsf2+0x3a>
 8000662:	404b      	eors	r3, r1
 8000664:	0018      	movs	r0, r3
 8000666:	e7f6      	b.n	8000656 <__eqsf2+0x3a>
 8000668:	2000      	movs	r0, #0
 800066a:	e7f4      	b.n	8000656 <__eqsf2+0x3a>

0800066c <__gesf2>:
 800066c:	b530      	push	{r4, r5, lr}
 800066e:	0042      	lsls	r2, r0, #1
 8000670:	0244      	lsls	r4, r0, #9
 8000672:	024d      	lsls	r5, r1, #9
 8000674:	0fc3      	lsrs	r3, r0, #31
 8000676:	0048      	lsls	r0, r1, #1
 8000678:	0a64      	lsrs	r4, r4, #9
 800067a:	0e12      	lsrs	r2, r2, #24
 800067c:	0a6d      	lsrs	r5, r5, #9
 800067e:	0e00      	lsrs	r0, r0, #24
 8000680:	0fc9      	lsrs	r1, r1, #31
 8000682:	2aff      	cmp	r2, #255	@ 0xff
 8000684:	d019      	beq.n	80006ba <__gesf2+0x4e>
 8000686:	28ff      	cmp	r0, #255	@ 0xff
 8000688:	d00b      	beq.n	80006a2 <__gesf2+0x36>
 800068a:	2a00      	cmp	r2, #0
 800068c:	d11e      	bne.n	80006cc <__gesf2+0x60>
 800068e:	2800      	cmp	r0, #0
 8000690:	d10b      	bne.n	80006aa <__gesf2+0x3e>
 8000692:	2d00      	cmp	r5, #0
 8000694:	d027      	beq.n	80006e6 <__gesf2+0x7a>
 8000696:	2c00      	cmp	r4, #0
 8000698:	d134      	bne.n	8000704 <__gesf2+0x98>
 800069a:	2900      	cmp	r1, #0
 800069c:	d02f      	beq.n	80006fe <__gesf2+0x92>
 800069e:	0008      	movs	r0, r1
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	2d00      	cmp	r5, #0
 80006a4:	d128      	bne.n	80006f8 <__gesf2+0x8c>
 80006a6:	2a00      	cmp	r2, #0
 80006a8:	d101      	bne.n	80006ae <__gesf2+0x42>
 80006aa:	2c00      	cmp	r4, #0
 80006ac:	d0f5      	beq.n	800069a <__gesf2+0x2e>
 80006ae:	428b      	cmp	r3, r1
 80006b0:	d107      	bne.n	80006c2 <__gesf2+0x56>
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d023      	beq.n	80006fe <__gesf2+0x92>
 80006b6:	0018      	movs	r0, r3
 80006b8:	e7f2      	b.n	80006a0 <__gesf2+0x34>
 80006ba:	2c00      	cmp	r4, #0
 80006bc:	d11c      	bne.n	80006f8 <__gesf2+0x8c>
 80006be:	28ff      	cmp	r0, #255	@ 0xff
 80006c0:	d014      	beq.n	80006ec <__gesf2+0x80>
 80006c2:	1e58      	subs	r0, r3, #1
 80006c4:	2302      	movs	r3, #2
 80006c6:	4018      	ands	r0, r3
 80006c8:	3801      	subs	r0, #1
 80006ca:	e7e9      	b.n	80006a0 <__gesf2+0x34>
 80006cc:	2800      	cmp	r0, #0
 80006ce:	d0f8      	beq.n	80006c2 <__gesf2+0x56>
 80006d0:	428b      	cmp	r3, r1
 80006d2:	d1f6      	bne.n	80006c2 <__gesf2+0x56>
 80006d4:	4282      	cmp	r2, r0
 80006d6:	dcf4      	bgt.n	80006c2 <__gesf2+0x56>
 80006d8:	dbeb      	blt.n	80006b2 <__gesf2+0x46>
 80006da:	42ac      	cmp	r4, r5
 80006dc:	d8f1      	bhi.n	80006c2 <__gesf2+0x56>
 80006de:	2000      	movs	r0, #0
 80006e0:	42ac      	cmp	r4, r5
 80006e2:	d2dd      	bcs.n	80006a0 <__gesf2+0x34>
 80006e4:	e7e5      	b.n	80006b2 <__gesf2+0x46>
 80006e6:	2c00      	cmp	r4, #0
 80006e8:	d0da      	beq.n	80006a0 <__gesf2+0x34>
 80006ea:	e7ea      	b.n	80006c2 <__gesf2+0x56>
 80006ec:	2d00      	cmp	r5, #0
 80006ee:	d103      	bne.n	80006f8 <__gesf2+0x8c>
 80006f0:	428b      	cmp	r3, r1
 80006f2:	d1e6      	bne.n	80006c2 <__gesf2+0x56>
 80006f4:	2000      	movs	r0, #0
 80006f6:	e7d3      	b.n	80006a0 <__gesf2+0x34>
 80006f8:	2002      	movs	r0, #2
 80006fa:	4240      	negs	r0, r0
 80006fc:	e7d0      	b.n	80006a0 <__gesf2+0x34>
 80006fe:	2001      	movs	r0, #1
 8000700:	4240      	negs	r0, r0
 8000702:	e7cd      	b.n	80006a0 <__gesf2+0x34>
 8000704:	428b      	cmp	r3, r1
 8000706:	d0e8      	beq.n	80006da <__gesf2+0x6e>
 8000708:	e7db      	b.n	80006c2 <__gesf2+0x56>
 800070a:	46c0      	nop			@ (mov r8, r8)

0800070c <__lesf2>:
 800070c:	b530      	push	{r4, r5, lr}
 800070e:	0042      	lsls	r2, r0, #1
 8000710:	0244      	lsls	r4, r0, #9
 8000712:	024d      	lsls	r5, r1, #9
 8000714:	0fc3      	lsrs	r3, r0, #31
 8000716:	0048      	lsls	r0, r1, #1
 8000718:	0a64      	lsrs	r4, r4, #9
 800071a:	0e12      	lsrs	r2, r2, #24
 800071c:	0a6d      	lsrs	r5, r5, #9
 800071e:	0e00      	lsrs	r0, r0, #24
 8000720:	0fc9      	lsrs	r1, r1, #31
 8000722:	2aff      	cmp	r2, #255	@ 0xff
 8000724:	d01a      	beq.n	800075c <__lesf2+0x50>
 8000726:	28ff      	cmp	r0, #255	@ 0xff
 8000728:	d00e      	beq.n	8000748 <__lesf2+0x3c>
 800072a:	2a00      	cmp	r2, #0
 800072c:	d11e      	bne.n	800076c <__lesf2+0x60>
 800072e:	2800      	cmp	r0, #0
 8000730:	d10e      	bne.n	8000750 <__lesf2+0x44>
 8000732:	2d00      	cmp	r5, #0
 8000734:	d02a      	beq.n	800078c <__lesf2+0x80>
 8000736:	2c00      	cmp	r4, #0
 8000738:	d00c      	beq.n	8000754 <__lesf2+0x48>
 800073a:	428b      	cmp	r3, r1
 800073c:	d01d      	beq.n	800077a <__lesf2+0x6e>
 800073e:	1e58      	subs	r0, r3, #1
 8000740:	2302      	movs	r3, #2
 8000742:	4018      	ands	r0, r3
 8000744:	3801      	subs	r0, #1
 8000746:	e010      	b.n	800076a <__lesf2+0x5e>
 8000748:	2d00      	cmp	r5, #0
 800074a:	d10d      	bne.n	8000768 <__lesf2+0x5c>
 800074c:	2a00      	cmp	r2, #0
 800074e:	d120      	bne.n	8000792 <__lesf2+0x86>
 8000750:	2c00      	cmp	r4, #0
 8000752:	d11e      	bne.n	8000792 <__lesf2+0x86>
 8000754:	2900      	cmp	r1, #0
 8000756:	d023      	beq.n	80007a0 <__lesf2+0x94>
 8000758:	0008      	movs	r0, r1
 800075a:	e006      	b.n	800076a <__lesf2+0x5e>
 800075c:	2c00      	cmp	r4, #0
 800075e:	d103      	bne.n	8000768 <__lesf2+0x5c>
 8000760:	28ff      	cmp	r0, #255	@ 0xff
 8000762:	d1ec      	bne.n	800073e <__lesf2+0x32>
 8000764:	2d00      	cmp	r5, #0
 8000766:	d017      	beq.n	8000798 <__lesf2+0x8c>
 8000768:	2002      	movs	r0, #2
 800076a:	bd30      	pop	{r4, r5, pc}
 800076c:	2800      	cmp	r0, #0
 800076e:	d0e6      	beq.n	800073e <__lesf2+0x32>
 8000770:	428b      	cmp	r3, r1
 8000772:	d1e4      	bne.n	800073e <__lesf2+0x32>
 8000774:	4282      	cmp	r2, r0
 8000776:	dce2      	bgt.n	800073e <__lesf2+0x32>
 8000778:	db04      	blt.n	8000784 <__lesf2+0x78>
 800077a:	42ac      	cmp	r4, r5
 800077c:	d8df      	bhi.n	800073e <__lesf2+0x32>
 800077e:	2000      	movs	r0, #0
 8000780:	42ac      	cmp	r4, r5
 8000782:	d2f2      	bcs.n	800076a <__lesf2+0x5e>
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00b      	beq.n	80007a0 <__lesf2+0x94>
 8000788:	0018      	movs	r0, r3
 800078a:	e7ee      	b.n	800076a <__lesf2+0x5e>
 800078c:	2c00      	cmp	r4, #0
 800078e:	d0ec      	beq.n	800076a <__lesf2+0x5e>
 8000790:	e7d5      	b.n	800073e <__lesf2+0x32>
 8000792:	428b      	cmp	r3, r1
 8000794:	d1d3      	bne.n	800073e <__lesf2+0x32>
 8000796:	e7f5      	b.n	8000784 <__lesf2+0x78>
 8000798:	2000      	movs	r0, #0
 800079a:	428b      	cmp	r3, r1
 800079c:	d0e5      	beq.n	800076a <__lesf2+0x5e>
 800079e:	e7ce      	b.n	800073e <__lesf2+0x32>
 80007a0:	2001      	movs	r0, #1
 80007a2:	4240      	negs	r0, r0
 80007a4:	e7e1      	b.n	800076a <__lesf2+0x5e>
 80007a6:	46c0      	nop			@ (mov r8, r8)

080007a8 <__aeabi_fsub>:
 80007a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007aa:	4647      	mov	r7, r8
 80007ac:	46ce      	mov	lr, r9
 80007ae:	024e      	lsls	r6, r1, #9
 80007b0:	0243      	lsls	r3, r0, #9
 80007b2:	0045      	lsls	r5, r0, #1
 80007b4:	0a72      	lsrs	r2, r6, #9
 80007b6:	0fc4      	lsrs	r4, r0, #31
 80007b8:	0048      	lsls	r0, r1, #1
 80007ba:	b580      	push	{r7, lr}
 80007bc:	4694      	mov	ip, r2
 80007be:	0a5f      	lsrs	r7, r3, #9
 80007c0:	0e2d      	lsrs	r5, r5, #24
 80007c2:	099b      	lsrs	r3, r3, #6
 80007c4:	0e00      	lsrs	r0, r0, #24
 80007c6:	0fc9      	lsrs	r1, r1, #31
 80007c8:	09b6      	lsrs	r6, r6, #6
 80007ca:	28ff      	cmp	r0, #255	@ 0xff
 80007cc:	d024      	beq.n	8000818 <__aeabi_fsub+0x70>
 80007ce:	2201      	movs	r2, #1
 80007d0:	4051      	eors	r1, r2
 80007d2:	1a2a      	subs	r2, r5, r0
 80007d4:	428c      	cmp	r4, r1
 80007d6:	d00f      	beq.n	80007f8 <__aeabi_fsub+0x50>
 80007d8:	2a00      	cmp	r2, #0
 80007da:	dc00      	bgt.n	80007de <__aeabi_fsub+0x36>
 80007dc:	e16a      	b.n	8000ab4 <__aeabi_fsub+0x30c>
 80007de:	2800      	cmp	r0, #0
 80007e0:	d135      	bne.n	800084e <__aeabi_fsub+0xa6>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fsub+0x40>
 80007e6:	e0a2      	b.n	800092e <__aeabi_fsub+0x186>
 80007e8:	1e51      	subs	r1, r2, #1
 80007ea:	2a01      	cmp	r2, #1
 80007ec:	d100      	bne.n	80007f0 <__aeabi_fsub+0x48>
 80007ee:	e124      	b.n	8000a3a <__aeabi_fsub+0x292>
 80007f0:	2aff      	cmp	r2, #255	@ 0xff
 80007f2:	d021      	beq.n	8000838 <__aeabi_fsub+0x90>
 80007f4:	000a      	movs	r2, r1
 80007f6:	e02f      	b.n	8000858 <__aeabi_fsub+0xb0>
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	dc00      	bgt.n	80007fe <__aeabi_fsub+0x56>
 80007fc:	e167      	b.n	8000ace <__aeabi_fsub+0x326>
 80007fe:	2800      	cmp	r0, #0
 8000800:	d05e      	beq.n	80008c0 <__aeabi_fsub+0x118>
 8000802:	2dff      	cmp	r5, #255	@ 0xff
 8000804:	d018      	beq.n	8000838 <__aeabi_fsub+0x90>
 8000806:	2180      	movs	r1, #128	@ 0x80
 8000808:	04c9      	lsls	r1, r1, #19
 800080a:	430e      	orrs	r6, r1
 800080c:	2a1b      	cmp	r2, #27
 800080e:	dc00      	bgt.n	8000812 <__aeabi_fsub+0x6a>
 8000810:	e076      	b.n	8000900 <__aeabi_fsub+0x158>
 8000812:	002a      	movs	r2, r5
 8000814:	3301      	adds	r3, #1
 8000816:	e032      	b.n	800087e <__aeabi_fsub+0xd6>
 8000818:	002a      	movs	r2, r5
 800081a:	3aff      	subs	r2, #255	@ 0xff
 800081c:	4691      	mov	r9, r2
 800081e:	2e00      	cmp	r6, #0
 8000820:	d042      	beq.n	80008a8 <__aeabi_fsub+0x100>
 8000822:	428c      	cmp	r4, r1
 8000824:	d055      	beq.n	80008d2 <__aeabi_fsub+0x12a>
 8000826:	464a      	mov	r2, r9
 8000828:	2a00      	cmp	r2, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fsub+0x86>
 800082c:	e09c      	b.n	8000968 <__aeabi_fsub+0x1c0>
 800082e:	2d00      	cmp	r5, #0
 8000830:	d100      	bne.n	8000834 <__aeabi_fsub+0x8c>
 8000832:	e077      	b.n	8000924 <__aeabi_fsub+0x17c>
 8000834:	000c      	movs	r4, r1
 8000836:	0033      	movs	r3, r6
 8000838:	08db      	lsrs	r3, r3, #3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d100      	bne.n	8000840 <__aeabi_fsub+0x98>
 800083e:	e06e      	b.n	800091e <__aeabi_fsub+0x176>
 8000840:	2280      	movs	r2, #128	@ 0x80
 8000842:	03d2      	lsls	r2, r2, #15
 8000844:	4313      	orrs	r3, r2
 8000846:	025b      	lsls	r3, r3, #9
 8000848:	20ff      	movs	r0, #255	@ 0xff
 800084a:	0a5b      	lsrs	r3, r3, #9
 800084c:	e024      	b.n	8000898 <__aeabi_fsub+0xf0>
 800084e:	2dff      	cmp	r5, #255	@ 0xff
 8000850:	d0f2      	beq.n	8000838 <__aeabi_fsub+0x90>
 8000852:	2180      	movs	r1, #128	@ 0x80
 8000854:	04c9      	lsls	r1, r1, #19
 8000856:	430e      	orrs	r6, r1
 8000858:	2101      	movs	r1, #1
 800085a:	2a1b      	cmp	r2, #27
 800085c:	dc08      	bgt.n	8000870 <__aeabi_fsub+0xc8>
 800085e:	0031      	movs	r1, r6
 8000860:	2020      	movs	r0, #32
 8000862:	40d1      	lsrs	r1, r2
 8000864:	1a82      	subs	r2, r0, r2
 8000866:	4096      	lsls	r6, r2
 8000868:	0032      	movs	r2, r6
 800086a:	1e50      	subs	r0, r2, #1
 800086c:	4182      	sbcs	r2, r0
 800086e:	4311      	orrs	r1, r2
 8000870:	1a5b      	subs	r3, r3, r1
 8000872:	015a      	lsls	r2, r3, #5
 8000874:	d460      	bmi.n	8000938 <__aeabi_fsub+0x190>
 8000876:	2107      	movs	r1, #7
 8000878:	002a      	movs	r2, r5
 800087a:	4019      	ands	r1, r3
 800087c:	d057      	beq.n	800092e <__aeabi_fsub+0x186>
 800087e:	210f      	movs	r1, #15
 8000880:	4019      	ands	r1, r3
 8000882:	2904      	cmp	r1, #4
 8000884:	d000      	beq.n	8000888 <__aeabi_fsub+0xe0>
 8000886:	3304      	adds	r3, #4
 8000888:	0159      	lsls	r1, r3, #5
 800088a:	d550      	bpl.n	800092e <__aeabi_fsub+0x186>
 800088c:	1c50      	adds	r0, r2, #1
 800088e:	2afe      	cmp	r2, #254	@ 0xfe
 8000890:	d045      	beq.n	800091e <__aeabi_fsub+0x176>
 8000892:	019b      	lsls	r3, r3, #6
 8000894:	b2c0      	uxtb	r0, r0
 8000896:	0a5b      	lsrs	r3, r3, #9
 8000898:	05c0      	lsls	r0, r0, #23
 800089a:	4318      	orrs	r0, r3
 800089c:	07e4      	lsls	r4, r4, #31
 800089e:	4320      	orrs	r0, r4
 80008a0:	bcc0      	pop	{r6, r7}
 80008a2:	46b9      	mov	r9, r7
 80008a4:	46b0      	mov	r8, r6
 80008a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a8:	2201      	movs	r2, #1
 80008aa:	4051      	eors	r1, r2
 80008ac:	428c      	cmp	r4, r1
 80008ae:	d1ba      	bne.n	8000826 <__aeabi_fsub+0x7e>
 80008b0:	464a      	mov	r2, r9
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	d010      	beq.n	80008d8 <__aeabi_fsub+0x130>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d100      	bne.n	80008bc <__aeabi_fsub+0x114>
 80008ba:	e098      	b.n	80009ee <__aeabi_fsub+0x246>
 80008bc:	2300      	movs	r3, #0
 80008be:	e7bb      	b.n	8000838 <__aeabi_fsub+0x90>
 80008c0:	2e00      	cmp	r6, #0
 80008c2:	d034      	beq.n	800092e <__aeabi_fsub+0x186>
 80008c4:	1e51      	subs	r1, r2, #1
 80008c6:	2a01      	cmp	r2, #1
 80008c8:	d06e      	beq.n	80009a8 <__aeabi_fsub+0x200>
 80008ca:	2aff      	cmp	r2, #255	@ 0xff
 80008cc:	d0b4      	beq.n	8000838 <__aeabi_fsub+0x90>
 80008ce:	000a      	movs	r2, r1
 80008d0:	e79c      	b.n	800080c <__aeabi_fsub+0x64>
 80008d2:	2a00      	cmp	r2, #0
 80008d4:	d000      	beq.n	80008d8 <__aeabi_fsub+0x130>
 80008d6:	e088      	b.n	80009ea <__aeabi_fsub+0x242>
 80008d8:	20fe      	movs	r0, #254	@ 0xfe
 80008da:	1c6a      	adds	r2, r5, #1
 80008dc:	4210      	tst	r0, r2
 80008de:	d000      	beq.n	80008e2 <__aeabi_fsub+0x13a>
 80008e0:	e092      	b.n	8000a08 <__aeabi_fsub+0x260>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d000      	beq.n	80008e8 <__aeabi_fsub+0x140>
 80008e6:	e0a4      	b.n	8000a32 <__aeabi_fsub+0x28a>
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d100      	bne.n	80008ee <__aeabi_fsub+0x146>
 80008ec:	e0cb      	b.n	8000a86 <__aeabi_fsub+0x2de>
 80008ee:	2e00      	cmp	r6, #0
 80008f0:	d000      	beq.n	80008f4 <__aeabi_fsub+0x14c>
 80008f2:	e0ca      	b.n	8000a8a <__aeabi_fsub+0x2e2>
 80008f4:	2200      	movs	r2, #0
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	025b      	lsls	r3, r3, #9
 80008fa:	0a5b      	lsrs	r3, r3, #9
 80008fc:	b2d0      	uxtb	r0, r2
 80008fe:	e7cb      	b.n	8000898 <__aeabi_fsub+0xf0>
 8000900:	0031      	movs	r1, r6
 8000902:	2020      	movs	r0, #32
 8000904:	40d1      	lsrs	r1, r2
 8000906:	1a82      	subs	r2, r0, r2
 8000908:	4096      	lsls	r6, r2
 800090a:	0032      	movs	r2, r6
 800090c:	1e50      	subs	r0, r2, #1
 800090e:	4182      	sbcs	r2, r0
 8000910:	430a      	orrs	r2, r1
 8000912:	189b      	adds	r3, r3, r2
 8000914:	015a      	lsls	r2, r3, #5
 8000916:	d5ae      	bpl.n	8000876 <__aeabi_fsub+0xce>
 8000918:	1c6a      	adds	r2, r5, #1
 800091a:	2dfe      	cmp	r5, #254	@ 0xfe
 800091c:	d14a      	bne.n	80009b4 <__aeabi_fsub+0x20c>
 800091e:	20ff      	movs	r0, #255	@ 0xff
 8000920:	2300      	movs	r3, #0
 8000922:	e7b9      	b.n	8000898 <__aeabi_fsub+0xf0>
 8000924:	22ff      	movs	r2, #255	@ 0xff
 8000926:	2b00      	cmp	r3, #0
 8000928:	d14b      	bne.n	80009c2 <__aeabi_fsub+0x21a>
 800092a:	000c      	movs	r4, r1
 800092c:	0033      	movs	r3, r6
 800092e:	08db      	lsrs	r3, r3, #3
 8000930:	2aff      	cmp	r2, #255	@ 0xff
 8000932:	d100      	bne.n	8000936 <__aeabi_fsub+0x18e>
 8000934:	e781      	b.n	800083a <__aeabi_fsub+0x92>
 8000936:	e7df      	b.n	80008f8 <__aeabi_fsub+0x150>
 8000938:	019f      	lsls	r7, r3, #6
 800093a:	09bf      	lsrs	r7, r7, #6
 800093c:	0038      	movs	r0, r7
 800093e:	f001 fc4d 	bl	80021dc <__clzsi2>
 8000942:	3805      	subs	r0, #5
 8000944:	4087      	lsls	r7, r0
 8000946:	4285      	cmp	r5, r0
 8000948:	dc21      	bgt.n	800098e <__aeabi_fsub+0x1e6>
 800094a:	003b      	movs	r3, r7
 800094c:	2120      	movs	r1, #32
 800094e:	1b42      	subs	r2, r0, r5
 8000950:	3201      	adds	r2, #1
 8000952:	40d3      	lsrs	r3, r2
 8000954:	1a8a      	subs	r2, r1, r2
 8000956:	4097      	lsls	r7, r2
 8000958:	1e7a      	subs	r2, r7, #1
 800095a:	4197      	sbcs	r7, r2
 800095c:	2200      	movs	r2, #0
 800095e:	433b      	orrs	r3, r7
 8000960:	0759      	lsls	r1, r3, #29
 8000962:	d000      	beq.n	8000966 <__aeabi_fsub+0x1be>
 8000964:	e78b      	b.n	800087e <__aeabi_fsub+0xd6>
 8000966:	e78f      	b.n	8000888 <__aeabi_fsub+0xe0>
 8000968:	20fe      	movs	r0, #254	@ 0xfe
 800096a:	1c6a      	adds	r2, r5, #1
 800096c:	4210      	tst	r0, r2
 800096e:	d112      	bne.n	8000996 <__aeabi_fsub+0x1ee>
 8000970:	2d00      	cmp	r5, #0
 8000972:	d152      	bne.n	8000a1a <__aeabi_fsub+0x272>
 8000974:	2b00      	cmp	r3, #0
 8000976:	d07c      	beq.n	8000a72 <__aeabi_fsub+0x2ca>
 8000978:	2e00      	cmp	r6, #0
 800097a:	d0bb      	beq.n	80008f4 <__aeabi_fsub+0x14c>
 800097c:	1b9a      	subs	r2, r3, r6
 800097e:	0150      	lsls	r0, r2, #5
 8000980:	d400      	bmi.n	8000984 <__aeabi_fsub+0x1dc>
 8000982:	e08b      	b.n	8000a9c <__aeabi_fsub+0x2f4>
 8000984:	2401      	movs	r4, #1
 8000986:	2200      	movs	r2, #0
 8000988:	1af3      	subs	r3, r6, r3
 800098a:	400c      	ands	r4, r1
 800098c:	e7e8      	b.n	8000960 <__aeabi_fsub+0x1b8>
 800098e:	4b56      	ldr	r3, [pc, #344]	@ (8000ae8 <__aeabi_fsub+0x340>)
 8000990:	1a2a      	subs	r2, r5, r0
 8000992:	403b      	ands	r3, r7
 8000994:	e7e4      	b.n	8000960 <__aeabi_fsub+0x1b8>
 8000996:	1b9f      	subs	r7, r3, r6
 8000998:	017a      	lsls	r2, r7, #5
 800099a:	d446      	bmi.n	8000a2a <__aeabi_fsub+0x282>
 800099c:	2f00      	cmp	r7, #0
 800099e:	d1cd      	bne.n	800093c <__aeabi_fsub+0x194>
 80009a0:	2400      	movs	r4, #0
 80009a2:	2000      	movs	r0, #0
 80009a4:	2300      	movs	r3, #0
 80009a6:	e777      	b.n	8000898 <__aeabi_fsub+0xf0>
 80009a8:	199b      	adds	r3, r3, r6
 80009aa:	2501      	movs	r5, #1
 80009ac:	3201      	adds	r2, #1
 80009ae:	0159      	lsls	r1, r3, #5
 80009b0:	d400      	bmi.n	80009b4 <__aeabi_fsub+0x20c>
 80009b2:	e760      	b.n	8000876 <__aeabi_fsub+0xce>
 80009b4:	2101      	movs	r1, #1
 80009b6:	484d      	ldr	r0, [pc, #308]	@ (8000aec <__aeabi_fsub+0x344>)
 80009b8:	4019      	ands	r1, r3
 80009ba:	085b      	lsrs	r3, r3, #1
 80009bc:	4003      	ands	r3, r0
 80009be:	430b      	orrs	r3, r1
 80009c0:	e7ce      	b.n	8000960 <__aeabi_fsub+0x1b8>
 80009c2:	1e57      	subs	r7, r2, #1
 80009c4:	2a01      	cmp	r2, #1
 80009c6:	d05a      	beq.n	8000a7e <__aeabi_fsub+0x2d6>
 80009c8:	000c      	movs	r4, r1
 80009ca:	2aff      	cmp	r2, #255	@ 0xff
 80009cc:	d033      	beq.n	8000a36 <__aeabi_fsub+0x28e>
 80009ce:	2201      	movs	r2, #1
 80009d0:	2f1b      	cmp	r7, #27
 80009d2:	dc07      	bgt.n	80009e4 <__aeabi_fsub+0x23c>
 80009d4:	2120      	movs	r1, #32
 80009d6:	1bc9      	subs	r1, r1, r7
 80009d8:	001a      	movs	r2, r3
 80009da:	408b      	lsls	r3, r1
 80009dc:	40fa      	lsrs	r2, r7
 80009de:	1e59      	subs	r1, r3, #1
 80009e0:	418b      	sbcs	r3, r1
 80009e2:	431a      	orrs	r2, r3
 80009e4:	0005      	movs	r5, r0
 80009e6:	1ab3      	subs	r3, r6, r2
 80009e8:	e743      	b.n	8000872 <__aeabi_fsub+0xca>
 80009ea:	2d00      	cmp	r5, #0
 80009ec:	d123      	bne.n	8000a36 <__aeabi_fsub+0x28e>
 80009ee:	22ff      	movs	r2, #255	@ 0xff
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d09b      	beq.n	800092c <__aeabi_fsub+0x184>
 80009f4:	1e51      	subs	r1, r2, #1
 80009f6:	2a01      	cmp	r2, #1
 80009f8:	d0d6      	beq.n	80009a8 <__aeabi_fsub+0x200>
 80009fa:	2aff      	cmp	r2, #255	@ 0xff
 80009fc:	d01b      	beq.n	8000a36 <__aeabi_fsub+0x28e>
 80009fe:	291b      	cmp	r1, #27
 8000a00:	dd2c      	ble.n	8000a5c <__aeabi_fsub+0x2b4>
 8000a02:	0002      	movs	r2, r0
 8000a04:	1c73      	adds	r3, r6, #1
 8000a06:	e73a      	b.n	800087e <__aeabi_fsub+0xd6>
 8000a08:	2aff      	cmp	r2, #255	@ 0xff
 8000a0a:	d088      	beq.n	800091e <__aeabi_fsub+0x176>
 8000a0c:	199b      	adds	r3, r3, r6
 8000a0e:	085b      	lsrs	r3, r3, #1
 8000a10:	0759      	lsls	r1, r3, #29
 8000a12:	d000      	beq.n	8000a16 <__aeabi_fsub+0x26e>
 8000a14:	e733      	b.n	800087e <__aeabi_fsub+0xd6>
 8000a16:	08db      	lsrs	r3, r3, #3
 8000a18:	e76e      	b.n	80008f8 <__aeabi_fsub+0x150>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d110      	bne.n	8000a40 <__aeabi_fsub+0x298>
 8000a1e:	2e00      	cmp	r6, #0
 8000a20:	d043      	beq.n	8000aaa <__aeabi_fsub+0x302>
 8000a22:	2401      	movs	r4, #1
 8000a24:	0033      	movs	r3, r6
 8000a26:	400c      	ands	r4, r1
 8000a28:	e706      	b.n	8000838 <__aeabi_fsub+0x90>
 8000a2a:	2401      	movs	r4, #1
 8000a2c:	1af7      	subs	r7, r6, r3
 8000a2e:	400c      	ands	r4, r1
 8000a30:	e784      	b.n	800093c <__aeabi_fsub+0x194>
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d104      	bne.n	8000a40 <__aeabi_fsub+0x298>
 8000a36:	0033      	movs	r3, r6
 8000a38:	e6fe      	b.n	8000838 <__aeabi_fsub+0x90>
 8000a3a:	2501      	movs	r5, #1
 8000a3c:	1b9b      	subs	r3, r3, r6
 8000a3e:	e718      	b.n	8000872 <__aeabi_fsub+0xca>
 8000a40:	2e00      	cmp	r6, #0
 8000a42:	d100      	bne.n	8000a46 <__aeabi_fsub+0x29e>
 8000a44:	e6f8      	b.n	8000838 <__aeabi_fsub+0x90>
 8000a46:	2280      	movs	r2, #128	@ 0x80
 8000a48:	03d2      	lsls	r2, r2, #15
 8000a4a:	4297      	cmp	r7, r2
 8000a4c:	d304      	bcc.n	8000a58 <__aeabi_fsub+0x2b0>
 8000a4e:	4594      	cmp	ip, r2
 8000a50:	d202      	bcs.n	8000a58 <__aeabi_fsub+0x2b0>
 8000a52:	2401      	movs	r4, #1
 8000a54:	0033      	movs	r3, r6
 8000a56:	400c      	ands	r4, r1
 8000a58:	08db      	lsrs	r3, r3, #3
 8000a5a:	e6f1      	b.n	8000840 <__aeabi_fsub+0x98>
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	2520      	movs	r5, #32
 8000a60:	40ca      	lsrs	r2, r1
 8000a62:	1a69      	subs	r1, r5, r1
 8000a64:	408b      	lsls	r3, r1
 8000a66:	1e59      	subs	r1, r3, #1
 8000a68:	418b      	sbcs	r3, r1
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	0005      	movs	r5, r0
 8000a6e:	199b      	adds	r3, r3, r6
 8000a70:	e750      	b.n	8000914 <__aeabi_fsub+0x16c>
 8000a72:	2e00      	cmp	r6, #0
 8000a74:	d094      	beq.n	80009a0 <__aeabi_fsub+0x1f8>
 8000a76:	2401      	movs	r4, #1
 8000a78:	0033      	movs	r3, r6
 8000a7a:	400c      	ands	r4, r1
 8000a7c:	e73a      	b.n	80008f4 <__aeabi_fsub+0x14c>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	2501      	movs	r5, #1
 8000a82:	1af3      	subs	r3, r6, r3
 8000a84:	e6f5      	b.n	8000872 <__aeabi_fsub+0xca>
 8000a86:	0033      	movs	r3, r6
 8000a88:	e734      	b.n	80008f4 <__aeabi_fsub+0x14c>
 8000a8a:	199b      	adds	r3, r3, r6
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	0159      	lsls	r1, r3, #5
 8000a90:	d5c1      	bpl.n	8000a16 <__aeabi_fsub+0x26e>
 8000a92:	4a15      	ldr	r2, [pc, #84]	@ (8000ae8 <__aeabi_fsub+0x340>)
 8000a94:	4013      	ands	r3, r2
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	2201      	movs	r2, #1
 8000a9a:	e72d      	b.n	80008f8 <__aeabi_fsub+0x150>
 8000a9c:	2a00      	cmp	r2, #0
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_fsub+0x2fa>
 8000aa0:	e77e      	b.n	80009a0 <__aeabi_fsub+0x1f8>
 8000aa2:	0013      	movs	r3, r2
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	e726      	b.n	80008f8 <__aeabi_fsub+0x150>
 8000aaa:	2380      	movs	r3, #128	@ 0x80
 8000aac:	2400      	movs	r4, #0
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	03db      	lsls	r3, r3, #15
 8000ab2:	e6f1      	b.n	8000898 <__aeabi_fsub+0xf0>
 8000ab4:	2a00      	cmp	r2, #0
 8000ab6:	d100      	bne.n	8000aba <__aeabi_fsub+0x312>
 8000ab8:	e756      	b.n	8000968 <__aeabi_fsub+0x1c0>
 8000aba:	1b47      	subs	r7, r0, r5
 8000abc:	003a      	movs	r2, r7
 8000abe:	2d00      	cmp	r5, #0
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_fsub+0x31c>
 8000ac2:	e730      	b.n	8000926 <__aeabi_fsub+0x17e>
 8000ac4:	2280      	movs	r2, #128	@ 0x80
 8000ac6:	04d2      	lsls	r2, r2, #19
 8000ac8:	000c      	movs	r4, r1
 8000aca:	4313      	orrs	r3, r2
 8000acc:	e77f      	b.n	80009ce <__aeabi_fsub+0x226>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_fsub+0x32c>
 8000ad2:	e701      	b.n	80008d8 <__aeabi_fsub+0x130>
 8000ad4:	1b41      	subs	r1, r0, r5
 8000ad6:	2d00      	cmp	r5, #0
 8000ad8:	d101      	bne.n	8000ade <__aeabi_fsub+0x336>
 8000ada:	000a      	movs	r2, r1
 8000adc:	e788      	b.n	80009f0 <__aeabi_fsub+0x248>
 8000ade:	2280      	movs	r2, #128	@ 0x80
 8000ae0:	04d2      	lsls	r2, r2, #19
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	e78b      	b.n	80009fe <__aeabi_fsub+0x256>
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	fbffffff 	.word	0xfbffffff
 8000aec:	7dffffff 	.word	0x7dffffff

08000af0 <__aeabi_dadd>:
 8000af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000af2:	4657      	mov	r7, sl
 8000af4:	464e      	mov	r6, r9
 8000af6:	4645      	mov	r5, r8
 8000af8:	46de      	mov	lr, fp
 8000afa:	b5e0      	push	{r5, r6, r7, lr}
 8000afc:	b083      	sub	sp, #12
 8000afe:	9000      	str	r0, [sp, #0]
 8000b00:	9101      	str	r1, [sp, #4]
 8000b02:	030c      	lsls	r4, r1, #12
 8000b04:	004f      	lsls	r7, r1, #1
 8000b06:	0fce      	lsrs	r6, r1, #31
 8000b08:	0a61      	lsrs	r1, r4, #9
 8000b0a:	9c00      	ldr	r4, [sp, #0]
 8000b0c:	031d      	lsls	r5, r3, #12
 8000b0e:	0f64      	lsrs	r4, r4, #29
 8000b10:	430c      	orrs	r4, r1
 8000b12:	9900      	ldr	r1, [sp, #0]
 8000b14:	9200      	str	r2, [sp, #0]
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	00c8      	lsls	r0, r1, #3
 8000b1a:	0059      	lsls	r1, r3, #1
 8000b1c:	0d4b      	lsrs	r3, r1, #21
 8000b1e:	4699      	mov	r9, r3
 8000b20:	9a00      	ldr	r2, [sp, #0]
 8000b22:	9b01      	ldr	r3, [sp, #4]
 8000b24:	0a6d      	lsrs	r5, r5, #9
 8000b26:	0fd9      	lsrs	r1, r3, #31
 8000b28:	0f53      	lsrs	r3, r2, #29
 8000b2a:	432b      	orrs	r3, r5
 8000b2c:	469a      	mov	sl, r3
 8000b2e:	9b00      	ldr	r3, [sp, #0]
 8000b30:	0d7f      	lsrs	r7, r7, #21
 8000b32:	00da      	lsls	r2, r3, #3
 8000b34:	4694      	mov	ip, r2
 8000b36:	464a      	mov	r2, r9
 8000b38:	46b0      	mov	r8, r6
 8000b3a:	1aba      	subs	r2, r7, r2
 8000b3c:	428e      	cmp	r6, r1
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_dadd+0x52>
 8000b40:	e0b0      	b.n	8000ca4 <__aeabi_dadd+0x1b4>
 8000b42:	2a00      	cmp	r2, #0
 8000b44:	dc00      	bgt.n	8000b48 <__aeabi_dadd+0x58>
 8000b46:	e078      	b.n	8000c3a <__aeabi_dadd+0x14a>
 8000b48:	4649      	mov	r1, r9
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_dadd+0x60>
 8000b4e:	e0e9      	b.n	8000d24 <__aeabi_dadd+0x234>
 8000b50:	49c9      	ldr	r1, [pc, #804]	@ (8000e78 <__aeabi_dadd+0x388>)
 8000b52:	428f      	cmp	r7, r1
 8000b54:	d100      	bne.n	8000b58 <__aeabi_dadd+0x68>
 8000b56:	e195      	b.n	8000e84 <__aeabi_dadd+0x394>
 8000b58:	2501      	movs	r5, #1
 8000b5a:	2a38      	cmp	r2, #56	@ 0x38
 8000b5c:	dc16      	bgt.n	8000b8c <__aeabi_dadd+0x9c>
 8000b5e:	2180      	movs	r1, #128	@ 0x80
 8000b60:	4653      	mov	r3, sl
 8000b62:	0409      	lsls	r1, r1, #16
 8000b64:	430b      	orrs	r3, r1
 8000b66:	469a      	mov	sl, r3
 8000b68:	2a1f      	cmp	r2, #31
 8000b6a:	dd00      	ble.n	8000b6e <__aeabi_dadd+0x7e>
 8000b6c:	e1e7      	b.n	8000f3e <__aeabi_dadd+0x44e>
 8000b6e:	2120      	movs	r1, #32
 8000b70:	4655      	mov	r5, sl
 8000b72:	1a8b      	subs	r3, r1, r2
 8000b74:	4661      	mov	r1, ip
 8000b76:	409d      	lsls	r5, r3
 8000b78:	40d1      	lsrs	r1, r2
 8000b7a:	430d      	orrs	r5, r1
 8000b7c:	4661      	mov	r1, ip
 8000b7e:	4099      	lsls	r1, r3
 8000b80:	1e4b      	subs	r3, r1, #1
 8000b82:	4199      	sbcs	r1, r3
 8000b84:	4653      	mov	r3, sl
 8000b86:	40d3      	lsrs	r3, r2
 8000b88:	430d      	orrs	r5, r1
 8000b8a:	1ae4      	subs	r4, r4, r3
 8000b8c:	1b45      	subs	r5, r0, r5
 8000b8e:	42a8      	cmp	r0, r5
 8000b90:	4180      	sbcs	r0, r0
 8000b92:	4240      	negs	r0, r0
 8000b94:	1a24      	subs	r4, r4, r0
 8000b96:	0223      	lsls	r3, r4, #8
 8000b98:	d400      	bmi.n	8000b9c <__aeabi_dadd+0xac>
 8000b9a:	e10f      	b.n	8000dbc <__aeabi_dadd+0x2cc>
 8000b9c:	0264      	lsls	r4, r4, #9
 8000b9e:	0a64      	lsrs	r4, r4, #9
 8000ba0:	2c00      	cmp	r4, #0
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0xb6>
 8000ba4:	e139      	b.n	8000e1a <__aeabi_dadd+0x32a>
 8000ba6:	0020      	movs	r0, r4
 8000ba8:	f001 fb18 	bl	80021dc <__clzsi2>
 8000bac:	0003      	movs	r3, r0
 8000bae:	3b08      	subs	r3, #8
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	0028      	movs	r0, r5
 8000bb4:	1aca      	subs	r2, r1, r3
 8000bb6:	40d0      	lsrs	r0, r2
 8000bb8:	409c      	lsls	r4, r3
 8000bba:	0002      	movs	r2, r0
 8000bbc:	409d      	lsls	r5, r3
 8000bbe:	4322      	orrs	r2, r4
 8000bc0:	429f      	cmp	r7, r3
 8000bc2:	dd00      	ble.n	8000bc6 <__aeabi_dadd+0xd6>
 8000bc4:	e173      	b.n	8000eae <__aeabi_dadd+0x3be>
 8000bc6:	1bd8      	subs	r0, r3, r7
 8000bc8:	3001      	adds	r0, #1
 8000bca:	1a09      	subs	r1, r1, r0
 8000bcc:	002c      	movs	r4, r5
 8000bce:	408d      	lsls	r5, r1
 8000bd0:	40c4      	lsrs	r4, r0
 8000bd2:	1e6b      	subs	r3, r5, #1
 8000bd4:	419d      	sbcs	r5, r3
 8000bd6:	0013      	movs	r3, r2
 8000bd8:	40c2      	lsrs	r2, r0
 8000bda:	408b      	lsls	r3, r1
 8000bdc:	4325      	orrs	r5, r4
 8000bde:	2700      	movs	r7, #0
 8000be0:	0014      	movs	r4, r2
 8000be2:	431d      	orrs	r5, r3
 8000be4:	076b      	lsls	r3, r5, #29
 8000be6:	d009      	beq.n	8000bfc <__aeabi_dadd+0x10c>
 8000be8:	230f      	movs	r3, #15
 8000bea:	402b      	ands	r3, r5
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d005      	beq.n	8000bfc <__aeabi_dadd+0x10c>
 8000bf0:	1d2b      	adds	r3, r5, #4
 8000bf2:	42ab      	cmp	r3, r5
 8000bf4:	41ad      	sbcs	r5, r5
 8000bf6:	426d      	negs	r5, r5
 8000bf8:	1964      	adds	r4, r4, r5
 8000bfa:	001d      	movs	r5, r3
 8000bfc:	0223      	lsls	r3, r4, #8
 8000bfe:	d400      	bmi.n	8000c02 <__aeabi_dadd+0x112>
 8000c00:	e12d      	b.n	8000e5e <__aeabi_dadd+0x36e>
 8000c02:	4a9d      	ldr	r2, [pc, #628]	@ (8000e78 <__aeabi_dadd+0x388>)
 8000c04:	3701      	adds	r7, #1
 8000c06:	4297      	cmp	r7, r2
 8000c08:	d100      	bne.n	8000c0c <__aeabi_dadd+0x11c>
 8000c0a:	e0d3      	b.n	8000db4 <__aeabi_dadd+0x2c4>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	499b      	ldr	r1, [pc, #620]	@ (8000e7c <__aeabi_dadd+0x38c>)
 8000c10:	08ed      	lsrs	r5, r5, #3
 8000c12:	4021      	ands	r1, r4
 8000c14:	074a      	lsls	r2, r1, #29
 8000c16:	432a      	orrs	r2, r5
 8000c18:	057c      	lsls	r4, r7, #21
 8000c1a:	024d      	lsls	r5, r1, #9
 8000c1c:	0b2d      	lsrs	r5, r5, #12
 8000c1e:	0d64      	lsrs	r4, r4, #21
 8000c20:	0524      	lsls	r4, r4, #20
 8000c22:	432c      	orrs	r4, r5
 8000c24:	07f6      	lsls	r6, r6, #31
 8000c26:	4334      	orrs	r4, r6
 8000c28:	0010      	movs	r0, r2
 8000c2a:	0021      	movs	r1, r4
 8000c2c:	b003      	add	sp, #12
 8000c2e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c30:	46bb      	mov	fp, r7
 8000c32:	46b2      	mov	sl, r6
 8000c34:	46a9      	mov	r9, r5
 8000c36:	46a0      	mov	r8, r4
 8000c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_dadd+0x150>
 8000c3e:	e084      	b.n	8000d4a <__aeabi_dadd+0x25a>
 8000c40:	464a      	mov	r2, r9
 8000c42:	1bd2      	subs	r2, r2, r7
 8000c44:	2f00      	cmp	r7, #0
 8000c46:	d000      	beq.n	8000c4a <__aeabi_dadd+0x15a>
 8000c48:	e16d      	b.n	8000f26 <__aeabi_dadd+0x436>
 8000c4a:	0025      	movs	r5, r4
 8000c4c:	4305      	orrs	r5, r0
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dadd+0x162>
 8000c50:	e127      	b.n	8000ea2 <__aeabi_dadd+0x3b2>
 8000c52:	1e56      	subs	r6, r2, #1
 8000c54:	2a01      	cmp	r2, #1
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x16a>
 8000c58:	e23b      	b.n	80010d2 <__aeabi_dadd+0x5e2>
 8000c5a:	4d87      	ldr	r5, [pc, #540]	@ (8000e78 <__aeabi_dadd+0x388>)
 8000c5c:	42aa      	cmp	r2, r5
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_dadd+0x172>
 8000c60:	e26a      	b.n	8001138 <__aeabi_dadd+0x648>
 8000c62:	2501      	movs	r5, #1
 8000c64:	2e38      	cmp	r6, #56	@ 0x38
 8000c66:	dc12      	bgt.n	8000c8e <__aeabi_dadd+0x19e>
 8000c68:	0032      	movs	r2, r6
 8000c6a:	2a1f      	cmp	r2, #31
 8000c6c:	dd00      	ble.n	8000c70 <__aeabi_dadd+0x180>
 8000c6e:	e1f8      	b.n	8001062 <__aeabi_dadd+0x572>
 8000c70:	2620      	movs	r6, #32
 8000c72:	0025      	movs	r5, r4
 8000c74:	1ab6      	subs	r6, r6, r2
 8000c76:	0007      	movs	r7, r0
 8000c78:	4653      	mov	r3, sl
 8000c7a:	40b0      	lsls	r0, r6
 8000c7c:	40d4      	lsrs	r4, r2
 8000c7e:	40b5      	lsls	r5, r6
 8000c80:	40d7      	lsrs	r7, r2
 8000c82:	1e46      	subs	r6, r0, #1
 8000c84:	41b0      	sbcs	r0, r6
 8000c86:	1b1b      	subs	r3, r3, r4
 8000c88:	469a      	mov	sl, r3
 8000c8a:	433d      	orrs	r5, r7
 8000c8c:	4305      	orrs	r5, r0
 8000c8e:	4662      	mov	r2, ip
 8000c90:	1b55      	subs	r5, r2, r5
 8000c92:	45ac      	cmp	ip, r5
 8000c94:	4192      	sbcs	r2, r2
 8000c96:	4653      	mov	r3, sl
 8000c98:	4252      	negs	r2, r2
 8000c9a:	000e      	movs	r6, r1
 8000c9c:	464f      	mov	r7, r9
 8000c9e:	4688      	mov	r8, r1
 8000ca0:	1a9c      	subs	r4, r3, r2
 8000ca2:	e778      	b.n	8000b96 <__aeabi_dadd+0xa6>
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	dc00      	bgt.n	8000caa <__aeabi_dadd+0x1ba>
 8000ca8:	e08e      	b.n	8000dc8 <__aeabi_dadd+0x2d8>
 8000caa:	4649      	mov	r1, r9
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d175      	bne.n	8000d9c <__aeabi_dadd+0x2ac>
 8000cb0:	4661      	mov	r1, ip
 8000cb2:	4653      	mov	r3, sl
 8000cb4:	4319      	orrs	r1, r3
 8000cb6:	d100      	bne.n	8000cba <__aeabi_dadd+0x1ca>
 8000cb8:	e0f6      	b.n	8000ea8 <__aeabi_dadd+0x3b8>
 8000cba:	1e51      	subs	r1, r2, #1
 8000cbc:	2a01      	cmp	r2, #1
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_dadd+0x1d2>
 8000cc0:	e191      	b.n	8000fe6 <__aeabi_dadd+0x4f6>
 8000cc2:	4d6d      	ldr	r5, [pc, #436]	@ (8000e78 <__aeabi_dadd+0x388>)
 8000cc4:	42aa      	cmp	r2, r5
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dadd+0x1da>
 8000cc8:	e0dc      	b.n	8000e84 <__aeabi_dadd+0x394>
 8000cca:	2501      	movs	r5, #1
 8000ccc:	2938      	cmp	r1, #56	@ 0x38
 8000cce:	dc14      	bgt.n	8000cfa <__aeabi_dadd+0x20a>
 8000cd0:	000a      	movs	r2, r1
 8000cd2:	2a1f      	cmp	r2, #31
 8000cd4:	dd00      	ble.n	8000cd8 <__aeabi_dadd+0x1e8>
 8000cd6:	e1a2      	b.n	800101e <__aeabi_dadd+0x52e>
 8000cd8:	2120      	movs	r1, #32
 8000cda:	4653      	mov	r3, sl
 8000cdc:	1a89      	subs	r1, r1, r2
 8000cde:	408b      	lsls	r3, r1
 8000ce0:	001d      	movs	r5, r3
 8000ce2:	4663      	mov	r3, ip
 8000ce4:	40d3      	lsrs	r3, r2
 8000ce6:	431d      	orrs	r5, r3
 8000ce8:	4663      	mov	r3, ip
 8000cea:	408b      	lsls	r3, r1
 8000cec:	0019      	movs	r1, r3
 8000cee:	1e4b      	subs	r3, r1, #1
 8000cf0:	4199      	sbcs	r1, r3
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	40d3      	lsrs	r3, r2
 8000cf6:	430d      	orrs	r5, r1
 8000cf8:	18e4      	adds	r4, r4, r3
 8000cfa:	182d      	adds	r5, r5, r0
 8000cfc:	4285      	cmp	r5, r0
 8000cfe:	4180      	sbcs	r0, r0
 8000d00:	4240      	negs	r0, r0
 8000d02:	1824      	adds	r4, r4, r0
 8000d04:	0223      	lsls	r3, r4, #8
 8000d06:	d559      	bpl.n	8000dbc <__aeabi_dadd+0x2cc>
 8000d08:	4b5b      	ldr	r3, [pc, #364]	@ (8000e78 <__aeabi_dadd+0x388>)
 8000d0a:	3701      	adds	r7, #1
 8000d0c:	429f      	cmp	r7, r3
 8000d0e:	d051      	beq.n	8000db4 <__aeabi_dadd+0x2c4>
 8000d10:	2101      	movs	r1, #1
 8000d12:	4b5a      	ldr	r3, [pc, #360]	@ (8000e7c <__aeabi_dadd+0x38c>)
 8000d14:	086a      	lsrs	r2, r5, #1
 8000d16:	401c      	ands	r4, r3
 8000d18:	4029      	ands	r1, r5
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	07e5      	lsls	r5, r4, #31
 8000d1e:	4315      	orrs	r5, r2
 8000d20:	0864      	lsrs	r4, r4, #1
 8000d22:	e75f      	b.n	8000be4 <__aeabi_dadd+0xf4>
 8000d24:	4661      	mov	r1, ip
 8000d26:	4653      	mov	r3, sl
 8000d28:	4319      	orrs	r1, r3
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_dadd+0x23e>
 8000d2c:	e0bc      	b.n	8000ea8 <__aeabi_dadd+0x3b8>
 8000d2e:	1e51      	subs	r1, r2, #1
 8000d30:	2a01      	cmp	r2, #1
 8000d32:	d100      	bne.n	8000d36 <__aeabi_dadd+0x246>
 8000d34:	e164      	b.n	8001000 <__aeabi_dadd+0x510>
 8000d36:	4d50      	ldr	r5, [pc, #320]	@ (8000e78 <__aeabi_dadd+0x388>)
 8000d38:	42aa      	cmp	r2, r5
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_dadd+0x24e>
 8000d3c:	e16a      	b.n	8001014 <__aeabi_dadd+0x524>
 8000d3e:	2501      	movs	r5, #1
 8000d40:	2938      	cmp	r1, #56	@ 0x38
 8000d42:	dd00      	ble.n	8000d46 <__aeabi_dadd+0x256>
 8000d44:	e722      	b.n	8000b8c <__aeabi_dadd+0x9c>
 8000d46:	000a      	movs	r2, r1
 8000d48:	e70e      	b.n	8000b68 <__aeabi_dadd+0x78>
 8000d4a:	4a4d      	ldr	r2, [pc, #308]	@ (8000e80 <__aeabi_dadd+0x390>)
 8000d4c:	1c7d      	adds	r5, r7, #1
 8000d4e:	4215      	tst	r5, r2
 8000d50:	d000      	beq.n	8000d54 <__aeabi_dadd+0x264>
 8000d52:	e0d0      	b.n	8000ef6 <__aeabi_dadd+0x406>
 8000d54:	0025      	movs	r5, r4
 8000d56:	4662      	mov	r2, ip
 8000d58:	4653      	mov	r3, sl
 8000d5a:	4305      	orrs	r5, r0
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	2f00      	cmp	r7, #0
 8000d60:	d000      	beq.n	8000d64 <__aeabi_dadd+0x274>
 8000d62:	e137      	b.n	8000fd4 <__aeabi_dadd+0x4e4>
 8000d64:	2d00      	cmp	r5, #0
 8000d66:	d100      	bne.n	8000d6a <__aeabi_dadd+0x27a>
 8000d68:	e1a8      	b.n	80010bc <__aeabi_dadd+0x5cc>
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_dadd+0x280>
 8000d6e:	e16a      	b.n	8001046 <__aeabi_dadd+0x556>
 8000d70:	4663      	mov	r3, ip
 8000d72:	1ac5      	subs	r5, r0, r3
 8000d74:	4653      	mov	r3, sl
 8000d76:	1ae2      	subs	r2, r4, r3
 8000d78:	42a8      	cmp	r0, r5
 8000d7a:	419b      	sbcs	r3, r3
 8000d7c:	425b      	negs	r3, r3
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	021a      	lsls	r2, r3, #8
 8000d82:	d400      	bmi.n	8000d86 <__aeabi_dadd+0x296>
 8000d84:	e203      	b.n	800118e <__aeabi_dadd+0x69e>
 8000d86:	4663      	mov	r3, ip
 8000d88:	1a1d      	subs	r5, r3, r0
 8000d8a:	45ac      	cmp	ip, r5
 8000d8c:	4192      	sbcs	r2, r2
 8000d8e:	4653      	mov	r3, sl
 8000d90:	4252      	negs	r2, r2
 8000d92:	1b1c      	subs	r4, r3, r4
 8000d94:	000e      	movs	r6, r1
 8000d96:	4688      	mov	r8, r1
 8000d98:	1aa4      	subs	r4, r4, r2
 8000d9a:	e723      	b.n	8000be4 <__aeabi_dadd+0xf4>
 8000d9c:	4936      	ldr	r1, [pc, #216]	@ (8000e78 <__aeabi_dadd+0x388>)
 8000d9e:	428f      	cmp	r7, r1
 8000da0:	d070      	beq.n	8000e84 <__aeabi_dadd+0x394>
 8000da2:	2501      	movs	r5, #1
 8000da4:	2a38      	cmp	r2, #56	@ 0x38
 8000da6:	dca8      	bgt.n	8000cfa <__aeabi_dadd+0x20a>
 8000da8:	2180      	movs	r1, #128	@ 0x80
 8000daa:	4653      	mov	r3, sl
 8000dac:	0409      	lsls	r1, r1, #16
 8000dae:	430b      	orrs	r3, r1
 8000db0:	469a      	mov	sl, r3
 8000db2:	e78e      	b.n	8000cd2 <__aeabi_dadd+0x1e2>
 8000db4:	003c      	movs	r4, r7
 8000db6:	2500      	movs	r5, #0
 8000db8:	2200      	movs	r2, #0
 8000dba:	e731      	b.n	8000c20 <__aeabi_dadd+0x130>
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	402b      	ands	r3, r5
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d000      	beq.n	8000dc6 <__aeabi_dadd+0x2d6>
 8000dc4:	e710      	b.n	8000be8 <__aeabi_dadd+0xf8>
 8000dc6:	e093      	b.n	8000ef0 <__aeabi_dadd+0x400>
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	d074      	beq.n	8000eb6 <__aeabi_dadd+0x3c6>
 8000dcc:	464a      	mov	r2, r9
 8000dce:	1bd2      	subs	r2, r2, r7
 8000dd0:	2f00      	cmp	r7, #0
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_dadd+0x2e6>
 8000dd4:	e0c7      	b.n	8000f66 <__aeabi_dadd+0x476>
 8000dd6:	4928      	ldr	r1, [pc, #160]	@ (8000e78 <__aeabi_dadd+0x388>)
 8000dd8:	4589      	cmp	r9, r1
 8000dda:	d100      	bne.n	8000dde <__aeabi_dadd+0x2ee>
 8000ddc:	e185      	b.n	80010ea <__aeabi_dadd+0x5fa>
 8000dde:	2501      	movs	r5, #1
 8000de0:	2a38      	cmp	r2, #56	@ 0x38
 8000de2:	dc12      	bgt.n	8000e0a <__aeabi_dadd+0x31a>
 8000de4:	2180      	movs	r1, #128	@ 0x80
 8000de6:	0409      	lsls	r1, r1, #16
 8000de8:	430c      	orrs	r4, r1
 8000dea:	2a1f      	cmp	r2, #31
 8000dec:	dd00      	ble.n	8000df0 <__aeabi_dadd+0x300>
 8000dee:	e1ab      	b.n	8001148 <__aeabi_dadd+0x658>
 8000df0:	2120      	movs	r1, #32
 8000df2:	0025      	movs	r5, r4
 8000df4:	1a89      	subs	r1, r1, r2
 8000df6:	0007      	movs	r7, r0
 8000df8:	4088      	lsls	r0, r1
 8000dfa:	408d      	lsls	r5, r1
 8000dfc:	40d7      	lsrs	r7, r2
 8000dfe:	1e41      	subs	r1, r0, #1
 8000e00:	4188      	sbcs	r0, r1
 8000e02:	40d4      	lsrs	r4, r2
 8000e04:	433d      	orrs	r5, r7
 8000e06:	4305      	orrs	r5, r0
 8000e08:	44a2      	add	sl, r4
 8000e0a:	4465      	add	r5, ip
 8000e0c:	4565      	cmp	r5, ip
 8000e0e:	4192      	sbcs	r2, r2
 8000e10:	4252      	negs	r2, r2
 8000e12:	4452      	add	r2, sl
 8000e14:	0014      	movs	r4, r2
 8000e16:	464f      	mov	r7, r9
 8000e18:	e774      	b.n	8000d04 <__aeabi_dadd+0x214>
 8000e1a:	0028      	movs	r0, r5
 8000e1c:	f001 f9de 	bl	80021dc <__clzsi2>
 8000e20:	0003      	movs	r3, r0
 8000e22:	3318      	adds	r3, #24
 8000e24:	2b1f      	cmp	r3, #31
 8000e26:	dc00      	bgt.n	8000e2a <__aeabi_dadd+0x33a>
 8000e28:	e6c2      	b.n	8000bb0 <__aeabi_dadd+0xc0>
 8000e2a:	002a      	movs	r2, r5
 8000e2c:	3808      	subs	r0, #8
 8000e2e:	4082      	lsls	r2, r0
 8000e30:	429f      	cmp	r7, r3
 8000e32:	dd00      	ble.n	8000e36 <__aeabi_dadd+0x346>
 8000e34:	e0a9      	b.n	8000f8a <__aeabi_dadd+0x49a>
 8000e36:	1bdb      	subs	r3, r3, r7
 8000e38:	1c58      	adds	r0, r3, #1
 8000e3a:	281f      	cmp	r0, #31
 8000e3c:	dc00      	bgt.n	8000e40 <__aeabi_dadd+0x350>
 8000e3e:	e1ac      	b.n	800119a <__aeabi_dadd+0x6aa>
 8000e40:	0015      	movs	r5, r2
 8000e42:	3b1f      	subs	r3, #31
 8000e44:	40dd      	lsrs	r5, r3
 8000e46:	2820      	cmp	r0, #32
 8000e48:	d005      	beq.n	8000e56 <__aeabi_dadd+0x366>
 8000e4a:	2340      	movs	r3, #64	@ 0x40
 8000e4c:	1a1b      	subs	r3, r3, r0
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	1e53      	subs	r3, r2, #1
 8000e52:	419a      	sbcs	r2, r3
 8000e54:	4315      	orrs	r5, r2
 8000e56:	2307      	movs	r3, #7
 8000e58:	2700      	movs	r7, #0
 8000e5a:	402b      	ands	r3, r5
 8000e5c:	e7b0      	b.n	8000dc0 <__aeabi_dadd+0x2d0>
 8000e5e:	08ed      	lsrs	r5, r5, #3
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <__aeabi_dadd+0x388>)
 8000e62:	0762      	lsls	r2, r4, #29
 8000e64:	432a      	orrs	r2, r5
 8000e66:	08e4      	lsrs	r4, r4, #3
 8000e68:	429f      	cmp	r7, r3
 8000e6a:	d00f      	beq.n	8000e8c <__aeabi_dadd+0x39c>
 8000e6c:	0324      	lsls	r4, r4, #12
 8000e6e:	0b25      	lsrs	r5, r4, #12
 8000e70:	057c      	lsls	r4, r7, #21
 8000e72:	0d64      	lsrs	r4, r4, #21
 8000e74:	e6d4      	b.n	8000c20 <__aeabi_dadd+0x130>
 8000e76:	46c0      	nop			@ (mov r8, r8)
 8000e78:	000007ff 	.word	0x000007ff
 8000e7c:	ff7fffff 	.word	0xff7fffff
 8000e80:	000007fe 	.word	0x000007fe
 8000e84:	08c0      	lsrs	r0, r0, #3
 8000e86:	0762      	lsls	r2, r4, #29
 8000e88:	4302      	orrs	r2, r0
 8000e8a:	08e4      	lsrs	r4, r4, #3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	4323      	orrs	r3, r4
 8000e90:	d100      	bne.n	8000e94 <__aeabi_dadd+0x3a4>
 8000e92:	e186      	b.n	80011a2 <__aeabi_dadd+0x6b2>
 8000e94:	2580      	movs	r5, #128	@ 0x80
 8000e96:	032d      	lsls	r5, r5, #12
 8000e98:	4325      	orrs	r5, r4
 8000e9a:	032d      	lsls	r5, r5, #12
 8000e9c:	4cc3      	ldr	r4, [pc, #780]	@ (80011ac <__aeabi_dadd+0x6bc>)
 8000e9e:	0b2d      	lsrs	r5, r5, #12
 8000ea0:	e6be      	b.n	8000c20 <__aeabi_dadd+0x130>
 8000ea2:	4660      	mov	r0, ip
 8000ea4:	4654      	mov	r4, sl
 8000ea6:	000e      	movs	r6, r1
 8000ea8:	0017      	movs	r7, r2
 8000eaa:	08c5      	lsrs	r5, r0, #3
 8000eac:	e7d8      	b.n	8000e60 <__aeabi_dadd+0x370>
 8000eae:	4cc0      	ldr	r4, [pc, #768]	@ (80011b0 <__aeabi_dadd+0x6c0>)
 8000eb0:	1aff      	subs	r7, r7, r3
 8000eb2:	4014      	ands	r4, r2
 8000eb4:	e696      	b.n	8000be4 <__aeabi_dadd+0xf4>
 8000eb6:	4abf      	ldr	r2, [pc, #764]	@ (80011b4 <__aeabi_dadd+0x6c4>)
 8000eb8:	1c79      	adds	r1, r7, #1
 8000eba:	4211      	tst	r1, r2
 8000ebc:	d16b      	bne.n	8000f96 <__aeabi_dadd+0x4a6>
 8000ebe:	0022      	movs	r2, r4
 8000ec0:	4302      	orrs	r2, r0
 8000ec2:	2f00      	cmp	r7, #0
 8000ec4:	d000      	beq.n	8000ec8 <__aeabi_dadd+0x3d8>
 8000ec6:	e0db      	b.n	8001080 <__aeabi_dadd+0x590>
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	d100      	bne.n	8000ece <__aeabi_dadd+0x3de>
 8000ecc:	e12d      	b.n	800112a <__aeabi_dadd+0x63a>
 8000ece:	4662      	mov	r2, ip
 8000ed0:	4653      	mov	r3, sl
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_dadd+0x3e8>
 8000ed6:	e0b6      	b.n	8001046 <__aeabi_dadd+0x556>
 8000ed8:	4663      	mov	r3, ip
 8000eda:	18c5      	adds	r5, r0, r3
 8000edc:	4285      	cmp	r5, r0
 8000ede:	4180      	sbcs	r0, r0
 8000ee0:	4454      	add	r4, sl
 8000ee2:	4240      	negs	r0, r0
 8000ee4:	1824      	adds	r4, r4, r0
 8000ee6:	0223      	lsls	r3, r4, #8
 8000ee8:	d502      	bpl.n	8000ef0 <__aeabi_dadd+0x400>
 8000eea:	000f      	movs	r7, r1
 8000eec:	4bb0      	ldr	r3, [pc, #704]	@ (80011b0 <__aeabi_dadd+0x6c0>)
 8000eee:	401c      	ands	r4, r3
 8000ef0:	003a      	movs	r2, r7
 8000ef2:	0028      	movs	r0, r5
 8000ef4:	e7d8      	b.n	8000ea8 <__aeabi_dadd+0x3b8>
 8000ef6:	4662      	mov	r2, ip
 8000ef8:	1a85      	subs	r5, r0, r2
 8000efa:	42a8      	cmp	r0, r5
 8000efc:	4192      	sbcs	r2, r2
 8000efe:	4653      	mov	r3, sl
 8000f00:	4252      	negs	r2, r2
 8000f02:	4691      	mov	r9, r2
 8000f04:	1ae3      	subs	r3, r4, r3
 8000f06:	001a      	movs	r2, r3
 8000f08:	464b      	mov	r3, r9
 8000f0a:	1ad2      	subs	r2, r2, r3
 8000f0c:	0013      	movs	r3, r2
 8000f0e:	4691      	mov	r9, r2
 8000f10:	021a      	lsls	r2, r3, #8
 8000f12:	d454      	bmi.n	8000fbe <__aeabi_dadd+0x4ce>
 8000f14:	464a      	mov	r2, r9
 8000f16:	464c      	mov	r4, r9
 8000f18:	432a      	orrs	r2, r5
 8000f1a:	d000      	beq.n	8000f1e <__aeabi_dadd+0x42e>
 8000f1c:	e640      	b.n	8000ba0 <__aeabi_dadd+0xb0>
 8000f1e:	2600      	movs	r6, #0
 8000f20:	2400      	movs	r4, #0
 8000f22:	2500      	movs	r5, #0
 8000f24:	e67c      	b.n	8000c20 <__aeabi_dadd+0x130>
 8000f26:	4da1      	ldr	r5, [pc, #644]	@ (80011ac <__aeabi_dadd+0x6bc>)
 8000f28:	45a9      	cmp	r9, r5
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_dadd+0x43e>
 8000f2c:	e090      	b.n	8001050 <__aeabi_dadd+0x560>
 8000f2e:	2501      	movs	r5, #1
 8000f30:	2a38      	cmp	r2, #56	@ 0x38
 8000f32:	dd00      	ble.n	8000f36 <__aeabi_dadd+0x446>
 8000f34:	e6ab      	b.n	8000c8e <__aeabi_dadd+0x19e>
 8000f36:	2580      	movs	r5, #128	@ 0x80
 8000f38:	042d      	lsls	r5, r5, #16
 8000f3a:	432c      	orrs	r4, r5
 8000f3c:	e695      	b.n	8000c6a <__aeabi_dadd+0x17a>
 8000f3e:	0011      	movs	r1, r2
 8000f40:	4655      	mov	r5, sl
 8000f42:	3920      	subs	r1, #32
 8000f44:	40cd      	lsrs	r5, r1
 8000f46:	46a9      	mov	r9, r5
 8000f48:	2a20      	cmp	r2, #32
 8000f4a:	d006      	beq.n	8000f5a <__aeabi_dadd+0x46a>
 8000f4c:	2140      	movs	r1, #64	@ 0x40
 8000f4e:	4653      	mov	r3, sl
 8000f50:	1a8a      	subs	r2, r1, r2
 8000f52:	4093      	lsls	r3, r2
 8000f54:	4662      	mov	r2, ip
 8000f56:	431a      	orrs	r2, r3
 8000f58:	4694      	mov	ip, r2
 8000f5a:	4665      	mov	r5, ip
 8000f5c:	1e6b      	subs	r3, r5, #1
 8000f5e:	419d      	sbcs	r5, r3
 8000f60:	464b      	mov	r3, r9
 8000f62:	431d      	orrs	r5, r3
 8000f64:	e612      	b.n	8000b8c <__aeabi_dadd+0x9c>
 8000f66:	0021      	movs	r1, r4
 8000f68:	4301      	orrs	r1, r0
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_dadd+0x47e>
 8000f6c:	e0c4      	b.n	80010f8 <__aeabi_dadd+0x608>
 8000f6e:	1e51      	subs	r1, r2, #1
 8000f70:	2a01      	cmp	r2, #1
 8000f72:	d100      	bne.n	8000f76 <__aeabi_dadd+0x486>
 8000f74:	e0fb      	b.n	800116e <__aeabi_dadd+0x67e>
 8000f76:	4d8d      	ldr	r5, [pc, #564]	@ (80011ac <__aeabi_dadd+0x6bc>)
 8000f78:	42aa      	cmp	r2, r5
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_dadd+0x48e>
 8000f7c:	e0b5      	b.n	80010ea <__aeabi_dadd+0x5fa>
 8000f7e:	2501      	movs	r5, #1
 8000f80:	2938      	cmp	r1, #56	@ 0x38
 8000f82:	dd00      	ble.n	8000f86 <__aeabi_dadd+0x496>
 8000f84:	e741      	b.n	8000e0a <__aeabi_dadd+0x31a>
 8000f86:	000a      	movs	r2, r1
 8000f88:	e72f      	b.n	8000dea <__aeabi_dadd+0x2fa>
 8000f8a:	4c89      	ldr	r4, [pc, #548]	@ (80011b0 <__aeabi_dadd+0x6c0>)
 8000f8c:	1aff      	subs	r7, r7, r3
 8000f8e:	4014      	ands	r4, r2
 8000f90:	0762      	lsls	r2, r4, #29
 8000f92:	08e4      	lsrs	r4, r4, #3
 8000f94:	e76a      	b.n	8000e6c <__aeabi_dadd+0x37c>
 8000f96:	4a85      	ldr	r2, [pc, #532]	@ (80011ac <__aeabi_dadd+0x6bc>)
 8000f98:	4291      	cmp	r1, r2
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_dadd+0x4ae>
 8000f9c:	e0e3      	b.n	8001166 <__aeabi_dadd+0x676>
 8000f9e:	4663      	mov	r3, ip
 8000fa0:	18c2      	adds	r2, r0, r3
 8000fa2:	4282      	cmp	r2, r0
 8000fa4:	4180      	sbcs	r0, r0
 8000fa6:	0023      	movs	r3, r4
 8000fa8:	4240      	negs	r0, r0
 8000faa:	4453      	add	r3, sl
 8000fac:	181b      	adds	r3, r3, r0
 8000fae:	07dd      	lsls	r5, r3, #31
 8000fb0:	085c      	lsrs	r4, r3, #1
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	0852      	lsrs	r2, r2, #1
 8000fb6:	4315      	orrs	r5, r2
 8000fb8:	000f      	movs	r7, r1
 8000fba:	402b      	ands	r3, r5
 8000fbc:	e700      	b.n	8000dc0 <__aeabi_dadd+0x2d0>
 8000fbe:	4663      	mov	r3, ip
 8000fc0:	1a1d      	subs	r5, r3, r0
 8000fc2:	45ac      	cmp	ip, r5
 8000fc4:	4192      	sbcs	r2, r2
 8000fc6:	4653      	mov	r3, sl
 8000fc8:	4252      	negs	r2, r2
 8000fca:	1b1c      	subs	r4, r3, r4
 8000fcc:	000e      	movs	r6, r1
 8000fce:	4688      	mov	r8, r1
 8000fd0:	1aa4      	subs	r4, r4, r2
 8000fd2:	e5e5      	b.n	8000ba0 <__aeabi_dadd+0xb0>
 8000fd4:	2d00      	cmp	r5, #0
 8000fd6:	d000      	beq.n	8000fda <__aeabi_dadd+0x4ea>
 8000fd8:	e091      	b.n	80010fe <__aeabi_dadd+0x60e>
 8000fda:	2a00      	cmp	r2, #0
 8000fdc:	d138      	bne.n	8001050 <__aeabi_dadd+0x560>
 8000fde:	2480      	movs	r4, #128	@ 0x80
 8000fe0:	2600      	movs	r6, #0
 8000fe2:	0324      	lsls	r4, r4, #12
 8000fe4:	e756      	b.n	8000e94 <__aeabi_dadd+0x3a4>
 8000fe6:	4663      	mov	r3, ip
 8000fe8:	18c5      	adds	r5, r0, r3
 8000fea:	4285      	cmp	r5, r0
 8000fec:	4180      	sbcs	r0, r0
 8000fee:	4454      	add	r4, sl
 8000ff0:	4240      	negs	r0, r0
 8000ff2:	1824      	adds	r4, r4, r0
 8000ff4:	2701      	movs	r7, #1
 8000ff6:	0223      	lsls	r3, r4, #8
 8000ff8:	d400      	bmi.n	8000ffc <__aeabi_dadd+0x50c>
 8000ffa:	e6df      	b.n	8000dbc <__aeabi_dadd+0x2cc>
 8000ffc:	2702      	movs	r7, #2
 8000ffe:	e687      	b.n	8000d10 <__aeabi_dadd+0x220>
 8001000:	4663      	mov	r3, ip
 8001002:	1ac5      	subs	r5, r0, r3
 8001004:	42a8      	cmp	r0, r5
 8001006:	4180      	sbcs	r0, r0
 8001008:	4653      	mov	r3, sl
 800100a:	4240      	negs	r0, r0
 800100c:	1ae4      	subs	r4, r4, r3
 800100e:	2701      	movs	r7, #1
 8001010:	1a24      	subs	r4, r4, r0
 8001012:	e5c0      	b.n	8000b96 <__aeabi_dadd+0xa6>
 8001014:	0762      	lsls	r2, r4, #29
 8001016:	08c0      	lsrs	r0, r0, #3
 8001018:	4302      	orrs	r2, r0
 800101a:	08e4      	lsrs	r4, r4, #3
 800101c:	e736      	b.n	8000e8c <__aeabi_dadd+0x39c>
 800101e:	0011      	movs	r1, r2
 8001020:	4653      	mov	r3, sl
 8001022:	3920      	subs	r1, #32
 8001024:	40cb      	lsrs	r3, r1
 8001026:	4699      	mov	r9, r3
 8001028:	2a20      	cmp	r2, #32
 800102a:	d006      	beq.n	800103a <__aeabi_dadd+0x54a>
 800102c:	2140      	movs	r1, #64	@ 0x40
 800102e:	4653      	mov	r3, sl
 8001030:	1a8a      	subs	r2, r1, r2
 8001032:	4093      	lsls	r3, r2
 8001034:	4662      	mov	r2, ip
 8001036:	431a      	orrs	r2, r3
 8001038:	4694      	mov	ip, r2
 800103a:	4665      	mov	r5, ip
 800103c:	1e6b      	subs	r3, r5, #1
 800103e:	419d      	sbcs	r5, r3
 8001040:	464b      	mov	r3, r9
 8001042:	431d      	orrs	r5, r3
 8001044:	e659      	b.n	8000cfa <__aeabi_dadd+0x20a>
 8001046:	0762      	lsls	r2, r4, #29
 8001048:	08c0      	lsrs	r0, r0, #3
 800104a:	4302      	orrs	r2, r0
 800104c:	08e4      	lsrs	r4, r4, #3
 800104e:	e70d      	b.n	8000e6c <__aeabi_dadd+0x37c>
 8001050:	4653      	mov	r3, sl
 8001052:	075a      	lsls	r2, r3, #29
 8001054:	4663      	mov	r3, ip
 8001056:	08d8      	lsrs	r0, r3, #3
 8001058:	4653      	mov	r3, sl
 800105a:	000e      	movs	r6, r1
 800105c:	4302      	orrs	r2, r0
 800105e:	08dc      	lsrs	r4, r3, #3
 8001060:	e714      	b.n	8000e8c <__aeabi_dadd+0x39c>
 8001062:	0015      	movs	r5, r2
 8001064:	0026      	movs	r6, r4
 8001066:	3d20      	subs	r5, #32
 8001068:	40ee      	lsrs	r6, r5
 800106a:	2a20      	cmp	r2, #32
 800106c:	d003      	beq.n	8001076 <__aeabi_dadd+0x586>
 800106e:	2540      	movs	r5, #64	@ 0x40
 8001070:	1aaa      	subs	r2, r5, r2
 8001072:	4094      	lsls	r4, r2
 8001074:	4320      	orrs	r0, r4
 8001076:	1e42      	subs	r2, r0, #1
 8001078:	4190      	sbcs	r0, r2
 800107a:	0005      	movs	r5, r0
 800107c:	4335      	orrs	r5, r6
 800107e:	e606      	b.n	8000c8e <__aeabi_dadd+0x19e>
 8001080:	2a00      	cmp	r2, #0
 8001082:	d07c      	beq.n	800117e <__aeabi_dadd+0x68e>
 8001084:	4662      	mov	r2, ip
 8001086:	4653      	mov	r3, sl
 8001088:	08c0      	lsrs	r0, r0, #3
 800108a:	431a      	orrs	r2, r3
 800108c:	d100      	bne.n	8001090 <__aeabi_dadd+0x5a0>
 800108e:	e6fa      	b.n	8000e86 <__aeabi_dadd+0x396>
 8001090:	0762      	lsls	r2, r4, #29
 8001092:	4310      	orrs	r0, r2
 8001094:	2280      	movs	r2, #128	@ 0x80
 8001096:	08e4      	lsrs	r4, r4, #3
 8001098:	0312      	lsls	r2, r2, #12
 800109a:	4214      	tst	r4, r2
 800109c:	d008      	beq.n	80010b0 <__aeabi_dadd+0x5c0>
 800109e:	08d9      	lsrs	r1, r3, #3
 80010a0:	4211      	tst	r1, r2
 80010a2:	d105      	bne.n	80010b0 <__aeabi_dadd+0x5c0>
 80010a4:	4663      	mov	r3, ip
 80010a6:	08d8      	lsrs	r0, r3, #3
 80010a8:	4653      	mov	r3, sl
 80010aa:	000c      	movs	r4, r1
 80010ac:	075b      	lsls	r3, r3, #29
 80010ae:	4318      	orrs	r0, r3
 80010b0:	0f42      	lsrs	r2, r0, #29
 80010b2:	00c0      	lsls	r0, r0, #3
 80010b4:	08c0      	lsrs	r0, r0, #3
 80010b6:	0752      	lsls	r2, r2, #29
 80010b8:	4302      	orrs	r2, r0
 80010ba:	e6e7      	b.n	8000e8c <__aeabi_dadd+0x39c>
 80010bc:	2a00      	cmp	r2, #0
 80010be:	d100      	bne.n	80010c2 <__aeabi_dadd+0x5d2>
 80010c0:	e72d      	b.n	8000f1e <__aeabi_dadd+0x42e>
 80010c2:	4663      	mov	r3, ip
 80010c4:	08d8      	lsrs	r0, r3, #3
 80010c6:	4653      	mov	r3, sl
 80010c8:	075a      	lsls	r2, r3, #29
 80010ca:	000e      	movs	r6, r1
 80010cc:	4302      	orrs	r2, r0
 80010ce:	08dc      	lsrs	r4, r3, #3
 80010d0:	e6cc      	b.n	8000e6c <__aeabi_dadd+0x37c>
 80010d2:	4663      	mov	r3, ip
 80010d4:	1a1d      	subs	r5, r3, r0
 80010d6:	45ac      	cmp	ip, r5
 80010d8:	4192      	sbcs	r2, r2
 80010da:	4653      	mov	r3, sl
 80010dc:	4252      	negs	r2, r2
 80010de:	1b1c      	subs	r4, r3, r4
 80010e0:	000e      	movs	r6, r1
 80010e2:	4688      	mov	r8, r1
 80010e4:	1aa4      	subs	r4, r4, r2
 80010e6:	3701      	adds	r7, #1
 80010e8:	e555      	b.n	8000b96 <__aeabi_dadd+0xa6>
 80010ea:	4663      	mov	r3, ip
 80010ec:	08d9      	lsrs	r1, r3, #3
 80010ee:	4653      	mov	r3, sl
 80010f0:	075a      	lsls	r2, r3, #29
 80010f2:	430a      	orrs	r2, r1
 80010f4:	08dc      	lsrs	r4, r3, #3
 80010f6:	e6c9      	b.n	8000e8c <__aeabi_dadd+0x39c>
 80010f8:	4660      	mov	r0, ip
 80010fa:	4654      	mov	r4, sl
 80010fc:	e6d4      	b.n	8000ea8 <__aeabi_dadd+0x3b8>
 80010fe:	08c0      	lsrs	r0, r0, #3
 8001100:	2a00      	cmp	r2, #0
 8001102:	d100      	bne.n	8001106 <__aeabi_dadd+0x616>
 8001104:	e6bf      	b.n	8000e86 <__aeabi_dadd+0x396>
 8001106:	0762      	lsls	r2, r4, #29
 8001108:	4310      	orrs	r0, r2
 800110a:	2280      	movs	r2, #128	@ 0x80
 800110c:	08e4      	lsrs	r4, r4, #3
 800110e:	0312      	lsls	r2, r2, #12
 8001110:	4214      	tst	r4, r2
 8001112:	d0cd      	beq.n	80010b0 <__aeabi_dadd+0x5c0>
 8001114:	08dd      	lsrs	r5, r3, #3
 8001116:	4215      	tst	r5, r2
 8001118:	d1ca      	bne.n	80010b0 <__aeabi_dadd+0x5c0>
 800111a:	4663      	mov	r3, ip
 800111c:	08d8      	lsrs	r0, r3, #3
 800111e:	4653      	mov	r3, sl
 8001120:	075b      	lsls	r3, r3, #29
 8001122:	000e      	movs	r6, r1
 8001124:	002c      	movs	r4, r5
 8001126:	4318      	orrs	r0, r3
 8001128:	e7c2      	b.n	80010b0 <__aeabi_dadd+0x5c0>
 800112a:	4663      	mov	r3, ip
 800112c:	08d9      	lsrs	r1, r3, #3
 800112e:	4653      	mov	r3, sl
 8001130:	075a      	lsls	r2, r3, #29
 8001132:	430a      	orrs	r2, r1
 8001134:	08dc      	lsrs	r4, r3, #3
 8001136:	e699      	b.n	8000e6c <__aeabi_dadd+0x37c>
 8001138:	4663      	mov	r3, ip
 800113a:	08d8      	lsrs	r0, r3, #3
 800113c:	4653      	mov	r3, sl
 800113e:	075a      	lsls	r2, r3, #29
 8001140:	000e      	movs	r6, r1
 8001142:	4302      	orrs	r2, r0
 8001144:	08dc      	lsrs	r4, r3, #3
 8001146:	e6a1      	b.n	8000e8c <__aeabi_dadd+0x39c>
 8001148:	0011      	movs	r1, r2
 800114a:	0027      	movs	r7, r4
 800114c:	3920      	subs	r1, #32
 800114e:	40cf      	lsrs	r7, r1
 8001150:	2a20      	cmp	r2, #32
 8001152:	d003      	beq.n	800115c <__aeabi_dadd+0x66c>
 8001154:	2140      	movs	r1, #64	@ 0x40
 8001156:	1a8a      	subs	r2, r1, r2
 8001158:	4094      	lsls	r4, r2
 800115a:	4320      	orrs	r0, r4
 800115c:	1e42      	subs	r2, r0, #1
 800115e:	4190      	sbcs	r0, r2
 8001160:	0005      	movs	r5, r0
 8001162:	433d      	orrs	r5, r7
 8001164:	e651      	b.n	8000e0a <__aeabi_dadd+0x31a>
 8001166:	000c      	movs	r4, r1
 8001168:	2500      	movs	r5, #0
 800116a:	2200      	movs	r2, #0
 800116c:	e558      	b.n	8000c20 <__aeabi_dadd+0x130>
 800116e:	4460      	add	r0, ip
 8001170:	4560      	cmp	r0, ip
 8001172:	4192      	sbcs	r2, r2
 8001174:	4454      	add	r4, sl
 8001176:	4252      	negs	r2, r2
 8001178:	0005      	movs	r5, r0
 800117a:	18a4      	adds	r4, r4, r2
 800117c:	e73a      	b.n	8000ff4 <__aeabi_dadd+0x504>
 800117e:	4653      	mov	r3, sl
 8001180:	075a      	lsls	r2, r3, #29
 8001182:	4663      	mov	r3, ip
 8001184:	08d9      	lsrs	r1, r3, #3
 8001186:	4653      	mov	r3, sl
 8001188:	430a      	orrs	r2, r1
 800118a:	08dc      	lsrs	r4, r3, #3
 800118c:	e67e      	b.n	8000e8c <__aeabi_dadd+0x39c>
 800118e:	001a      	movs	r2, r3
 8001190:	001c      	movs	r4, r3
 8001192:	432a      	orrs	r2, r5
 8001194:	d000      	beq.n	8001198 <__aeabi_dadd+0x6a8>
 8001196:	e6ab      	b.n	8000ef0 <__aeabi_dadd+0x400>
 8001198:	e6c1      	b.n	8000f1e <__aeabi_dadd+0x42e>
 800119a:	2120      	movs	r1, #32
 800119c:	2500      	movs	r5, #0
 800119e:	1a09      	subs	r1, r1, r0
 80011a0:	e519      	b.n	8000bd6 <__aeabi_dadd+0xe6>
 80011a2:	2200      	movs	r2, #0
 80011a4:	2500      	movs	r5, #0
 80011a6:	4c01      	ldr	r4, [pc, #4]	@ (80011ac <__aeabi_dadd+0x6bc>)
 80011a8:	e53a      	b.n	8000c20 <__aeabi_dadd+0x130>
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	000007ff 	.word	0x000007ff
 80011b0:	ff7fffff 	.word	0xff7fffff
 80011b4:	000007fe 	.word	0x000007fe

080011b8 <__eqdf2>:
 80011b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ba:	4657      	mov	r7, sl
 80011bc:	46de      	mov	lr, fp
 80011be:	464e      	mov	r6, r9
 80011c0:	4645      	mov	r5, r8
 80011c2:	b5e0      	push	{r5, r6, r7, lr}
 80011c4:	000d      	movs	r5, r1
 80011c6:	0004      	movs	r4, r0
 80011c8:	0fe8      	lsrs	r0, r5, #31
 80011ca:	4683      	mov	fp, r0
 80011cc:	0309      	lsls	r1, r1, #12
 80011ce:	0fd8      	lsrs	r0, r3, #31
 80011d0:	0b09      	lsrs	r1, r1, #12
 80011d2:	4682      	mov	sl, r0
 80011d4:	4819      	ldr	r0, [pc, #100]	@ (800123c <__eqdf2+0x84>)
 80011d6:	468c      	mov	ip, r1
 80011d8:	031f      	lsls	r7, r3, #12
 80011da:	0069      	lsls	r1, r5, #1
 80011dc:	005e      	lsls	r6, r3, #1
 80011de:	0d49      	lsrs	r1, r1, #21
 80011e0:	0b3f      	lsrs	r7, r7, #12
 80011e2:	0d76      	lsrs	r6, r6, #21
 80011e4:	4281      	cmp	r1, r0
 80011e6:	d018      	beq.n	800121a <__eqdf2+0x62>
 80011e8:	4286      	cmp	r6, r0
 80011ea:	d00f      	beq.n	800120c <__eqdf2+0x54>
 80011ec:	2001      	movs	r0, #1
 80011ee:	42b1      	cmp	r1, r6
 80011f0:	d10d      	bne.n	800120e <__eqdf2+0x56>
 80011f2:	45bc      	cmp	ip, r7
 80011f4:	d10b      	bne.n	800120e <__eqdf2+0x56>
 80011f6:	4294      	cmp	r4, r2
 80011f8:	d109      	bne.n	800120e <__eqdf2+0x56>
 80011fa:	45d3      	cmp	fp, sl
 80011fc:	d01c      	beq.n	8001238 <__eqdf2+0x80>
 80011fe:	2900      	cmp	r1, #0
 8001200:	d105      	bne.n	800120e <__eqdf2+0x56>
 8001202:	4660      	mov	r0, ip
 8001204:	4320      	orrs	r0, r4
 8001206:	1e43      	subs	r3, r0, #1
 8001208:	4198      	sbcs	r0, r3
 800120a:	e000      	b.n	800120e <__eqdf2+0x56>
 800120c:	2001      	movs	r0, #1
 800120e:	bcf0      	pop	{r4, r5, r6, r7}
 8001210:	46bb      	mov	fp, r7
 8001212:	46b2      	mov	sl, r6
 8001214:	46a9      	mov	r9, r5
 8001216:	46a0      	mov	r8, r4
 8001218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800121a:	2001      	movs	r0, #1
 800121c:	428e      	cmp	r6, r1
 800121e:	d1f6      	bne.n	800120e <__eqdf2+0x56>
 8001220:	4661      	mov	r1, ip
 8001222:	4339      	orrs	r1, r7
 8001224:	000f      	movs	r7, r1
 8001226:	4317      	orrs	r7, r2
 8001228:	4327      	orrs	r7, r4
 800122a:	d1f0      	bne.n	800120e <__eqdf2+0x56>
 800122c:	465b      	mov	r3, fp
 800122e:	4652      	mov	r2, sl
 8001230:	1a98      	subs	r0, r3, r2
 8001232:	1e43      	subs	r3, r0, #1
 8001234:	4198      	sbcs	r0, r3
 8001236:	e7ea      	b.n	800120e <__eqdf2+0x56>
 8001238:	2000      	movs	r0, #0
 800123a:	e7e8      	b.n	800120e <__eqdf2+0x56>
 800123c:	000007ff 	.word	0x000007ff

08001240 <__gedf2>:
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	4657      	mov	r7, sl
 8001244:	464e      	mov	r6, r9
 8001246:	4645      	mov	r5, r8
 8001248:	46de      	mov	lr, fp
 800124a:	b5e0      	push	{r5, r6, r7, lr}
 800124c:	000d      	movs	r5, r1
 800124e:	030f      	lsls	r7, r1, #12
 8001250:	0b39      	lsrs	r1, r7, #12
 8001252:	b083      	sub	sp, #12
 8001254:	0004      	movs	r4, r0
 8001256:	4680      	mov	r8, r0
 8001258:	9101      	str	r1, [sp, #4]
 800125a:	0058      	lsls	r0, r3, #1
 800125c:	0fe9      	lsrs	r1, r5, #31
 800125e:	4f31      	ldr	r7, [pc, #196]	@ (8001324 <__gedf2+0xe4>)
 8001260:	0d40      	lsrs	r0, r0, #21
 8001262:	468c      	mov	ip, r1
 8001264:	006e      	lsls	r6, r5, #1
 8001266:	0319      	lsls	r1, r3, #12
 8001268:	4682      	mov	sl, r0
 800126a:	4691      	mov	r9, r2
 800126c:	0d76      	lsrs	r6, r6, #21
 800126e:	0b09      	lsrs	r1, r1, #12
 8001270:	0fd8      	lsrs	r0, r3, #31
 8001272:	42be      	cmp	r6, r7
 8001274:	d01f      	beq.n	80012b6 <__gedf2+0x76>
 8001276:	45ba      	cmp	sl, r7
 8001278:	d00f      	beq.n	800129a <__gedf2+0x5a>
 800127a:	2e00      	cmp	r6, #0
 800127c:	d12f      	bne.n	80012de <__gedf2+0x9e>
 800127e:	4655      	mov	r5, sl
 8001280:	9e01      	ldr	r6, [sp, #4]
 8001282:	4334      	orrs	r4, r6
 8001284:	2d00      	cmp	r5, #0
 8001286:	d127      	bne.n	80012d8 <__gedf2+0x98>
 8001288:	430a      	orrs	r2, r1
 800128a:	d03a      	beq.n	8001302 <__gedf2+0xc2>
 800128c:	2c00      	cmp	r4, #0
 800128e:	d145      	bne.n	800131c <__gedf2+0xdc>
 8001290:	2800      	cmp	r0, #0
 8001292:	d11a      	bne.n	80012ca <__gedf2+0x8a>
 8001294:	2001      	movs	r0, #1
 8001296:	4240      	negs	r0, r0
 8001298:	e017      	b.n	80012ca <__gedf2+0x8a>
 800129a:	4311      	orrs	r1, r2
 800129c:	d13b      	bne.n	8001316 <__gedf2+0xd6>
 800129e:	2e00      	cmp	r6, #0
 80012a0:	d102      	bne.n	80012a8 <__gedf2+0x68>
 80012a2:	9f01      	ldr	r7, [sp, #4]
 80012a4:	4327      	orrs	r7, r4
 80012a6:	d0f3      	beq.n	8001290 <__gedf2+0x50>
 80012a8:	4584      	cmp	ip, r0
 80012aa:	d109      	bne.n	80012c0 <__gedf2+0x80>
 80012ac:	4663      	mov	r3, ip
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <__gedf2+0x54>
 80012b2:	4660      	mov	r0, ip
 80012b4:	e009      	b.n	80012ca <__gedf2+0x8a>
 80012b6:	9f01      	ldr	r7, [sp, #4]
 80012b8:	4327      	orrs	r7, r4
 80012ba:	d12c      	bne.n	8001316 <__gedf2+0xd6>
 80012bc:	45b2      	cmp	sl, r6
 80012be:	d024      	beq.n	800130a <__gedf2+0xca>
 80012c0:	4663      	mov	r3, ip
 80012c2:	2002      	movs	r0, #2
 80012c4:	3b01      	subs	r3, #1
 80012c6:	4018      	ands	r0, r3
 80012c8:	3801      	subs	r0, #1
 80012ca:	b003      	add	sp, #12
 80012cc:	bcf0      	pop	{r4, r5, r6, r7}
 80012ce:	46bb      	mov	fp, r7
 80012d0:	46b2      	mov	sl, r6
 80012d2:	46a9      	mov	r9, r5
 80012d4:	46a0      	mov	r8, r4
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d8:	2c00      	cmp	r4, #0
 80012da:	d0d9      	beq.n	8001290 <__gedf2+0x50>
 80012dc:	e7e4      	b.n	80012a8 <__gedf2+0x68>
 80012de:	4654      	mov	r4, sl
 80012e0:	2c00      	cmp	r4, #0
 80012e2:	d0ed      	beq.n	80012c0 <__gedf2+0x80>
 80012e4:	4584      	cmp	ip, r0
 80012e6:	d1eb      	bne.n	80012c0 <__gedf2+0x80>
 80012e8:	4556      	cmp	r6, sl
 80012ea:	dce9      	bgt.n	80012c0 <__gedf2+0x80>
 80012ec:	dbde      	blt.n	80012ac <__gedf2+0x6c>
 80012ee:	9b01      	ldr	r3, [sp, #4]
 80012f0:	428b      	cmp	r3, r1
 80012f2:	d8e5      	bhi.n	80012c0 <__gedf2+0x80>
 80012f4:	d1da      	bne.n	80012ac <__gedf2+0x6c>
 80012f6:	45c8      	cmp	r8, r9
 80012f8:	d8e2      	bhi.n	80012c0 <__gedf2+0x80>
 80012fa:	2000      	movs	r0, #0
 80012fc:	45c8      	cmp	r8, r9
 80012fe:	d2e4      	bcs.n	80012ca <__gedf2+0x8a>
 8001300:	e7d4      	b.n	80012ac <__gedf2+0x6c>
 8001302:	2000      	movs	r0, #0
 8001304:	2c00      	cmp	r4, #0
 8001306:	d0e0      	beq.n	80012ca <__gedf2+0x8a>
 8001308:	e7da      	b.n	80012c0 <__gedf2+0x80>
 800130a:	4311      	orrs	r1, r2
 800130c:	d103      	bne.n	8001316 <__gedf2+0xd6>
 800130e:	4584      	cmp	ip, r0
 8001310:	d1d6      	bne.n	80012c0 <__gedf2+0x80>
 8001312:	2000      	movs	r0, #0
 8001314:	e7d9      	b.n	80012ca <__gedf2+0x8a>
 8001316:	2002      	movs	r0, #2
 8001318:	4240      	negs	r0, r0
 800131a:	e7d6      	b.n	80012ca <__gedf2+0x8a>
 800131c:	4584      	cmp	ip, r0
 800131e:	d0e6      	beq.n	80012ee <__gedf2+0xae>
 8001320:	e7ce      	b.n	80012c0 <__gedf2+0x80>
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	000007ff 	.word	0x000007ff

08001328 <__ledf2>:
 8001328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132a:	4657      	mov	r7, sl
 800132c:	464e      	mov	r6, r9
 800132e:	4645      	mov	r5, r8
 8001330:	46de      	mov	lr, fp
 8001332:	b5e0      	push	{r5, r6, r7, lr}
 8001334:	000d      	movs	r5, r1
 8001336:	030f      	lsls	r7, r1, #12
 8001338:	0004      	movs	r4, r0
 800133a:	4680      	mov	r8, r0
 800133c:	0fe8      	lsrs	r0, r5, #31
 800133e:	0b39      	lsrs	r1, r7, #12
 8001340:	4684      	mov	ip, r0
 8001342:	b083      	sub	sp, #12
 8001344:	0058      	lsls	r0, r3, #1
 8001346:	4f30      	ldr	r7, [pc, #192]	@ (8001408 <__ledf2+0xe0>)
 8001348:	0d40      	lsrs	r0, r0, #21
 800134a:	9101      	str	r1, [sp, #4]
 800134c:	031e      	lsls	r6, r3, #12
 800134e:	0069      	lsls	r1, r5, #1
 8001350:	4682      	mov	sl, r0
 8001352:	4691      	mov	r9, r2
 8001354:	0d49      	lsrs	r1, r1, #21
 8001356:	0b36      	lsrs	r6, r6, #12
 8001358:	0fd8      	lsrs	r0, r3, #31
 800135a:	42b9      	cmp	r1, r7
 800135c:	d020      	beq.n	80013a0 <__ledf2+0x78>
 800135e:	45ba      	cmp	sl, r7
 8001360:	d00f      	beq.n	8001382 <__ledf2+0x5a>
 8001362:	2900      	cmp	r1, #0
 8001364:	d12b      	bne.n	80013be <__ledf2+0x96>
 8001366:	9901      	ldr	r1, [sp, #4]
 8001368:	430c      	orrs	r4, r1
 800136a:	4651      	mov	r1, sl
 800136c:	2900      	cmp	r1, #0
 800136e:	d137      	bne.n	80013e0 <__ledf2+0xb8>
 8001370:	4332      	orrs	r2, r6
 8001372:	d038      	beq.n	80013e6 <__ledf2+0xbe>
 8001374:	2c00      	cmp	r4, #0
 8001376:	d144      	bne.n	8001402 <__ledf2+0xda>
 8001378:	2800      	cmp	r0, #0
 800137a:	d119      	bne.n	80013b0 <__ledf2+0x88>
 800137c:	2001      	movs	r0, #1
 800137e:	4240      	negs	r0, r0
 8001380:	e016      	b.n	80013b0 <__ledf2+0x88>
 8001382:	4316      	orrs	r6, r2
 8001384:	d113      	bne.n	80013ae <__ledf2+0x86>
 8001386:	2900      	cmp	r1, #0
 8001388:	d102      	bne.n	8001390 <__ledf2+0x68>
 800138a:	9f01      	ldr	r7, [sp, #4]
 800138c:	4327      	orrs	r7, r4
 800138e:	d0f3      	beq.n	8001378 <__ledf2+0x50>
 8001390:	4584      	cmp	ip, r0
 8001392:	d020      	beq.n	80013d6 <__ledf2+0xae>
 8001394:	4663      	mov	r3, ip
 8001396:	2002      	movs	r0, #2
 8001398:	3b01      	subs	r3, #1
 800139a:	4018      	ands	r0, r3
 800139c:	3801      	subs	r0, #1
 800139e:	e007      	b.n	80013b0 <__ledf2+0x88>
 80013a0:	9f01      	ldr	r7, [sp, #4]
 80013a2:	4327      	orrs	r7, r4
 80013a4:	d103      	bne.n	80013ae <__ledf2+0x86>
 80013a6:	458a      	cmp	sl, r1
 80013a8:	d1f4      	bne.n	8001394 <__ledf2+0x6c>
 80013aa:	4316      	orrs	r6, r2
 80013ac:	d01f      	beq.n	80013ee <__ledf2+0xc6>
 80013ae:	2002      	movs	r0, #2
 80013b0:	b003      	add	sp, #12
 80013b2:	bcf0      	pop	{r4, r5, r6, r7}
 80013b4:	46bb      	mov	fp, r7
 80013b6:	46b2      	mov	sl, r6
 80013b8:	46a9      	mov	r9, r5
 80013ba:	46a0      	mov	r8, r4
 80013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013be:	4654      	mov	r4, sl
 80013c0:	2c00      	cmp	r4, #0
 80013c2:	d0e7      	beq.n	8001394 <__ledf2+0x6c>
 80013c4:	4584      	cmp	ip, r0
 80013c6:	d1e5      	bne.n	8001394 <__ledf2+0x6c>
 80013c8:	4551      	cmp	r1, sl
 80013ca:	dce3      	bgt.n	8001394 <__ledf2+0x6c>
 80013cc:	db03      	blt.n	80013d6 <__ledf2+0xae>
 80013ce:	9b01      	ldr	r3, [sp, #4]
 80013d0:	42b3      	cmp	r3, r6
 80013d2:	d8df      	bhi.n	8001394 <__ledf2+0x6c>
 80013d4:	d00f      	beq.n	80013f6 <__ledf2+0xce>
 80013d6:	4663      	mov	r3, ip
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0cf      	beq.n	800137c <__ledf2+0x54>
 80013dc:	4660      	mov	r0, ip
 80013de:	e7e7      	b.n	80013b0 <__ledf2+0x88>
 80013e0:	2c00      	cmp	r4, #0
 80013e2:	d0c9      	beq.n	8001378 <__ledf2+0x50>
 80013e4:	e7d4      	b.n	8001390 <__ledf2+0x68>
 80013e6:	2000      	movs	r0, #0
 80013e8:	2c00      	cmp	r4, #0
 80013ea:	d0e1      	beq.n	80013b0 <__ledf2+0x88>
 80013ec:	e7d2      	b.n	8001394 <__ledf2+0x6c>
 80013ee:	4584      	cmp	ip, r0
 80013f0:	d1d0      	bne.n	8001394 <__ledf2+0x6c>
 80013f2:	2000      	movs	r0, #0
 80013f4:	e7dc      	b.n	80013b0 <__ledf2+0x88>
 80013f6:	45c8      	cmp	r8, r9
 80013f8:	d8cc      	bhi.n	8001394 <__ledf2+0x6c>
 80013fa:	2000      	movs	r0, #0
 80013fc:	45c8      	cmp	r8, r9
 80013fe:	d2d7      	bcs.n	80013b0 <__ledf2+0x88>
 8001400:	e7e9      	b.n	80013d6 <__ledf2+0xae>
 8001402:	4584      	cmp	ip, r0
 8001404:	d0e3      	beq.n	80013ce <__ledf2+0xa6>
 8001406:	e7c5      	b.n	8001394 <__ledf2+0x6c>
 8001408:	000007ff 	.word	0x000007ff

0800140c <__aeabi_dmul>:
 800140c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140e:	4657      	mov	r7, sl
 8001410:	46de      	mov	lr, fp
 8001412:	464e      	mov	r6, r9
 8001414:	4645      	mov	r5, r8
 8001416:	b5e0      	push	{r5, r6, r7, lr}
 8001418:	001f      	movs	r7, r3
 800141a:	030b      	lsls	r3, r1, #12
 800141c:	0b1b      	lsrs	r3, r3, #12
 800141e:	0016      	movs	r6, r2
 8001420:	469a      	mov	sl, r3
 8001422:	0fca      	lsrs	r2, r1, #31
 8001424:	004b      	lsls	r3, r1, #1
 8001426:	0004      	movs	r4, r0
 8001428:	4693      	mov	fp, r2
 800142a:	b087      	sub	sp, #28
 800142c:	0d5b      	lsrs	r3, r3, #21
 800142e:	d100      	bne.n	8001432 <__aeabi_dmul+0x26>
 8001430:	e0d5      	b.n	80015de <__aeabi_dmul+0x1d2>
 8001432:	4abb      	ldr	r2, [pc, #748]	@ (8001720 <__aeabi_dmul+0x314>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d100      	bne.n	800143a <__aeabi_dmul+0x2e>
 8001438:	e0f8      	b.n	800162c <__aeabi_dmul+0x220>
 800143a:	4651      	mov	r1, sl
 800143c:	0f42      	lsrs	r2, r0, #29
 800143e:	00c9      	lsls	r1, r1, #3
 8001440:	430a      	orrs	r2, r1
 8001442:	2180      	movs	r1, #128	@ 0x80
 8001444:	0409      	lsls	r1, r1, #16
 8001446:	4311      	orrs	r1, r2
 8001448:	00c2      	lsls	r2, r0, #3
 800144a:	4691      	mov	r9, r2
 800144c:	4ab5      	ldr	r2, [pc, #724]	@ (8001724 <__aeabi_dmul+0x318>)
 800144e:	468a      	mov	sl, r1
 8001450:	189d      	adds	r5, r3, r2
 8001452:	2300      	movs	r3, #0
 8001454:	4698      	mov	r8, r3
 8001456:	9302      	str	r3, [sp, #8]
 8001458:	033c      	lsls	r4, r7, #12
 800145a:	007b      	lsls	r3, r7, #1
 800145c:	0ffa      	lsrs	r2, r7, #31
 800145e:	0030      	movs	r0, r6
 8001460:	0b24      	lsrs	r4, r4, #12
 8001462:	0d5b      	lsrs	r3, r3, #21
 8001464:	9200      	str	r2, [sp, #0]
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x5e>
 8001468:	e096      	b.n	8001598 <__aeabi_dmul+0x18c>
 800146a:	4aad      	ldr	r2, [pc, #692]	@ (8001720 <__aeabi_dmul+0x314>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d031      	beq.n	80014d4 <__aeabi_dmul+0xc8>
 8001470:	0f72      	lsrs	r2, r6, #29
 8001472:	00e4      	lsls	r4, r4, #3
 8001474:	4322      	orrs	r2, r4
 8001476:	2480      	movs	r4, #128	@ 0x80
 8001478:	0424      	lsls	r4, r4, #16
 800147a:	4314      	orrs	r4, r2
 800147c:	4aa9      	ldr	r2, [pc, #676]	@ (8001724 <__aeabi_dmul+0x318>)
 800147e:	00f0      	lsls	r0, r6, #3
 8001480:	4694      	mov	ip, r2
 8001482:	4463      	add	r3, ip
 8001484:	195b      	adds	r3, r3, r5
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	9201      	str	r2, [sp, #4]
 800148a:	4642      	mov	r2, r8
 800148c:	2600      	movs	r6, #0
 800148e:	2a0a      	cmp	r2, #10
 8001490:	dc42      	bgt.n	8001518 <__aeabi_dmul+0x10c>
 8001492:	465a      	mov	r2, fp
 8001494:	9900      	ldr	r1, [sp, #0]
 8001496:	404a      	eors	r2, r1
 8001498:	4693      	mov	fp, r2
 800149a:	4642      	mov	r2, r8
 800149c:	2a02      	cmp	r2, #2
 800149e:	dc32      	bgt.n	8001506 <__aeabi_dmul+0xfa>
 80014a0:	3a01      	subs	r2, #1
 80014a2:	2a01      	cmp	r2, #1
 80014a4:	d900      	bls.n	80014a8 <__aeabi_dmul+0x9c>
 80014a6:	e149      	b.n	800173c <__aeabi_dmul+0x330>
 80014a8:	2e02      	cmp	r6, #2
 80014aa:	d100      	bne.n	80014ae <__aeabi_dmul+0xa2>
 80014ac:	e0ca      	b.n	8001644 <__aeabi_dmul+0x238>
 80014ae:	2e01      	cmp	r6, #1
 80014b0:	d13d      	bne.n	800152e <__aeabi_dmul+0x122>
 80014b2:	2300      	movs	r3, #0
 80014b4:	2400      	movs	r4, #0
 80014b6:	2200      	movs	r2, #0
 80014b8:	0010      	movs	r0, r2
 80014ba:	465a      	mov	r2, fp
 80014bc:	051b      	lsls	r3, r3, #20
 80014be:	4323      	orrs	r3, r4
 80014c0:	07d2      	lsls	r2, r2, #31
 80014c2:	4313      	orrs	r3, r2
 80014c4:	0019      	movs	r1, r3
 80014c6:	b007      	add	sp, #28
 80014c8:	bcf0      	pop	{r4, r5, r6, r7}
 80014ca:	46bb      	mov	fp, r7
 80014cc:	46b2      	mov	sl, r6
 80014ce:	46a9      	mov	r9, r5
 80014d0:	46a0      	mov	r8, r4
 80014d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d4:	4b92      	ldr	r3, [pc, #584]	@ (8001720 <__aeabi_dmul+0x314>)
 80014d6:	4326      	orrs	r6, r4
 80014d8:	18eb      	adds	r3, r5, r3
 80014da:	2e00      	cmp	r6, #0
 80014dc:	d100      	bne.n	80014e0 <__aeabi_dmul+0xd4>
 80014de:	e0bb      	b.n	8001658 <__aeabi_dmul+0x24c>
 80014e0:	2203      	movs	r2, #3
 80014e2:	4641      	mov	r1, r8
 80014e4:	4311      	orrs	r1, r2
 80014e6:	465a      	mov	r2, fp
 80014e8:	4688      	mov	r8, r1
 80014ea:	9900      	ldr	r1, [sp, #0]
 80014ec:	404a      	eors	r2, r1
 80014ee:	2180      	movs	r1, #128	@ 0x80
 80014f0:	0109      	lsls	r1, r1, #4
 80014f2:	468c      	mov	ip, r1
 80014f4:	0029      	movs	r1, r5
 80014f6:	4461      	add	r1, ip
 80014f8:	9101      	str	r1, [sp, #4]
 80014fa:	4641      	mov	r1, r8
 80014fc:	290a      	cmp	r1, #10
 80014fe:	dd00      	ble.n	8001502 <__aeabi_dmul+0xf6>
 8001500:	e233      	b.n	800196a <__aeabi_dmul+0x55e>
 8001502:	4693      	mov	fp, r2
 8001504:	2603      	movs	r6, #3
 8001506:	4642      	mov	r2, r8
 8001508:	2701      	movs	r7, #1
 800150a:	4097      	lsls	r7, r2
 800150c:	21a6      	movs	r1, #166	@ 0xa6
 800150e:	003a      	movs	r2, r7
 8001510:	00c9      	lsls	r1, r1, #3
 8001512:	400a      	ands	r2, r1
 8001514:	420f      	tst	r7, r1
 8001516:	d031      	beq.n	800157c <__aeabi_dmul+0x170>
 8001518:	9e02      	ldr	r6, [sp, #8]
 800151a:	2e02      	cmp	r6, #2
 800151c:	d100      	bne.n	8001520 <__aeabi_dmul+0x114>
 800151e:	e235      	b.n	800198c <__aeabi_dmul+0x580>
 8001520:	2e03      	cmp	r6, #3
 8001522:	d100      	bne.n	8001526 <__aeabi_dmul+0x11a>
 8001524:	e1d2      	b.n	80018cc <__aeabi_dmul+0x4c0>
 8001526:	4654      	mov	r4, sl
 8001528:	4648      	mov	r0, r9
 800152a:	2e01      	cmp	r6, #1
 800152c:	d0c1      	beq.n	80014b2 <__aeabi_dmul+0xa6>
 800152e:	9a01      	ldr	r2, [sp, #4]
 8001530:	4b7d      	ldr	r3, [pc, #500]	@ (8001728 <__aeabi_dmul+0x31c>)
 8001532:	4694      	mov	ip, r2
 8001534:	4463      	add	r3, ip
 8001536:	2b00      	cmp	r3, #0
 8001538:	dc00      	bgt.n	800153c <__aeabi_dmul+0x130>
 800153a:	e0c0      	b.n	80016be <__aeabi_dmul+0x2b2>
 800153c:	0742      	lsls	r2, r0, #29
 800153e:	d009      	beq.n	8001554 <__aeabi_dmul+0x148>
 8001540:	220f      	movs	r2, #15
 8001542:	4002      	ands	r2, r0
 8001544:	2a04      	cmp	r2, #4
 8001546:	d005      	beq.n	8001554 <__aeabi_dmul+0x148>
 8001548:	1d02      	adds	r2, r0, #4
 800154a:	4282      	cmp	r2, r0
 800154c:	4180      	sbcs	r0, r0
 800154e:	4240      	negs	r0, r0
 8001550:	1824      	adds	r4, r4, r0
 8001552:	0010      	movs	r0, r2
 8001554:	01e2      	lsls	r2, r4, #7
 8001556:	d506      	bpl.n	8001566 <__aeabi_dmul+0x15a>
 8001558:	4b74      	ldr	r3, [pc, #464]	@ (800172c <__aeabi_dmul+0x320>)
 800155a:	9a01      	ldr	r2, [sp, #4]
 800155c:	401c      	ands	r4, r3
 800155e:	2380      	movs	r3, #128	@ 0x80
 8001560:	4694      	mov	ip, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4463      	add	r3, ip
 8001566:	4a72      	ldr	r2, [pc, #456]	@ (8001730 <__aeabi_dmul+0x324>)
 8001568:	4293      	cmp	r3, r2
 800156a:	dc6b      	bgt.n	8001644 <__aeabi_dmul+0x238>
 800156c:	0762      	lsls	r2, r4, #29
 800156e:	08c0      	lsrs	r0, r0, #3
 8001570:	0264      	lsls	r4, r4, #9
 8001572:	055b      	lsls	r3, r3, #21
 8001574:	4302      	orrs	r2, r0
 8001576:	0b24      	lsrs	r4, r4, #12
 8001578:	0d5b      	lsrs	r3, r3, #21
 800157a:	e79d      	b.n	80014b8 <__aeabi_dmul+0xac>
 800157c:	2190      	movs	r1, #144	@ 0x90
 800157e:	0089      	lsls	r1, r1, #2
 8001580:	420f      	tst	r7, r1
 8001582:	d163      	bne.n	800164c <__aeabi_dmul+0x240>
 8001584:	2288      	movs	r2, #136	@ 0x88
 8001586:	423a      	tst	r2, r7
 8001588:	d100      	bne.n	800158c <__aeabi_dmul+0x180>
 800158a:	e0d7      	b.n	800173c <__aeabi_dmul+0x330>
 800158c:	9b00      	ldr	r3, [sp, #0]
 800158e:	46a2      	mov	sl, r4
 8001590:	469b      	mov	fp, r3
 8001592:	4681      	mov	r9, r0
 8001594:	9602      	str	r6, [sp, #8]
 8001596:	e7bf      	b.n	8001518 <__aeabi_dmul+0x10c>
 8001598:	0023      	movs	r3, r4
 800159a:	4333      	orrs	r3, r6
 800159c:	d100      	bne.n	80015a0 <__aeabi_dmul+0x194>
 800159e:	e07f      	b.n	80016a0 <__aeabi_dmul+0x294>
 80015a0:	2c00      	cmp	r4, #0
 80015a2:	d100      	bne.n	80015a6 <__aeabi_dmul+0x19a>
 80015a4:	e1ad      	b.n	8001902 <__aeabi_dmul+0x4f6>
 80015a6:	0020      	movs	r0, r4
 80015a8:	f000 fe18 	bl	80021dc <__clzsi2>
 80015ac:	0002      	movs	r2, r0
 80015ae:	0003      	movs	r3, r0
 80015b0:	3a0b      	subs	r2, #11
 80015b2:	201d      	movs	r0, #29
 80015b4:	0019      	movs	r1, r3
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	0030      	movs	r0, r6
 80015ba:	3908      	subs	r1, #8
 80015bc:	40d0      	lsrs	r0, r2
 80015be:	408c      	lsls	r4, r1
 80015c0:	4304      	orrs	r4, r0
 80015c2:	0030      	movs	r0, r6
 80015c4:	4088      	lsls	r0, r1
 80015c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001734 <__aeabi_dmul+0x328>)
 80015c8:	1aeb      	subs	r3, r5, r3
 80015ca:	4694      	mov	ip, r2
 80015cc:	4463      	add	r3, ip
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	9201      	str	r2, [sp, #4]
 80015d2:	4642      	mov	r2, r8
 80015d4:	2600      	movs	r6, #0
 80015d6:	2a0a      	cmp	r2, #10
 80015d8:	dc00      	bgt.n	80015dc <__aeabi_dmul+0x1d0>
 80015da:	e75a      	b.n	8001492 <__aeabi_dmul+0x86>
 80015dc:	e79c      	b.n	8001518 <__aeabi_dmul+0x10c>
 80015de:	4653      	mov	r3, sl
 80015e0:	4303      	orrs	r3, r0
 80015e2:	4699      	mov	r9, r3
 80015e4:	d054      	beq.n	8001690 <__aeabi_dmul+0x284>
 80015e6:	4653      	mov	r3, sl
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d100      	bne.n	80015ee <__aeabi_dmul+0x1e2>
 80015ec:	e177      	b.n	80018de <__aeabi_dmul+0x4d2>
 80015ee:	4650      	mov	r0, sl
 80015f0:	f000 fdf4 	bl	80021dc <__clzsi2>
 80015f4:	230b      	movs	r3, #11
 80015f6:	425b      	negs	r3, r3
 80015f8:	469c      	mov	ip, r3
 80015fa:	0002      	movs	r2, r0
 80015fc:	4484      	add	ip, r0
 80015fe:	0011      	movs	r1, r2
 8001600:	4650      	mov	r0, sl
 8001602:	3908      	subs	r1, #8
 8001604:	4088      	lsls	r0, r1
 8001606:	231d      	movs	r3, #29
 8001608:	4680      	mov	r8, r0
 800160a:	4660      	mov	r0, ip
 800160c:	1a1b      	subs	r3, r3, r0
 800160e:	0020      	movs	r0, r4
 8001610:	40d8      	lsrs	r0, r3
 8001612:	0003      	movs	r3, r0
 8001614:	4640      	mov	r0, r8
 8001616:	4303      	orrs	r3, r0
 8001618:	469a      	mov	sl, r3
 800161a:	0023      	movs	r3, r4
 800161c:	408b      	lsls	r3, r1
 800161e:	4699      	mov	r9, r3
 8001620:	2300      	movs	r3, #0
 8001622:	4d44      	ldr	r5, [pc, #272]	@ (8001734 <__aeabi_dmul+0x328>)
 8001624:	4698      	mov	r8, r3
 8001626:	1aad      	subs	r5, r5, r2
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	e715      	b.n	8001458 <__aeabi_dmul+0x4c>
 800162c:	4652      	mov	r2, sl
 800162e:	4302      	orrs	r2, r0
 8001630:	4691      	mov	r9, r2
 8001632:	d126      	bne.n	8001682 <__aeabi_dmul+0x276>
 8001634:	2200      	movs	r2, #0
 8001636:	001d      	movs	r5, r3
 8001638:	2302      	movs	r3, #2
 800163a:	4692      	mov	sl, r2
 800163c:	3208      	adds	r2, #8
 800163e:	4690      	mov	r8, r2
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	e709      	b.n	8001458 <__aeabi_dmul+0x4c>
 8001644:	2400      	movs	r4, #0
 8001646:	2200      	movs	r2, #0
 8001648:	4b35      	ldr	r3, [pc, #212]	@ (8001720 <__aeabi_dmul+0x314>)
 800164a:	e735      	b.n	80014b8 <__aeabi_dmul+0xac>
 800164c:	2300      	movs	r3, #0
 800164e:	2480      	movs	r4, #128	@ 0x80
 8001650:	469b      	mov	fp, r3
 8001652:	0324      	lsls	r4, r4, #12
 8001654:	4b32      	ldr	r3, [pc, #200]	@ (8001720 <__aeabi_dmul+0x314>)
 8001656:	e72f      	b.n	80014b8 <__aeabi_dmul+0xac>
 8001658:	2202      	movs	r2, #2
 800165a:	4641      	mov	r1, r8
 800165c:	4311      	orrs	r1, r2
 800165e:	2280      	movs	r2, #128	@ 0x80
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	4694      	mov	ip, r2
 8001664:	002a      	movs	r2, r5
 8001666:	4462      	add	r2, ip
 8001668:	4688      	mov	r8, r1
 800166a:	9201      	str	r2, [sp, #4]
 800166c:	290a      	cmp	r1, #10
 800166e:	dd00      	ble.n	8001672 <__aeabi_dmul+0x266>
 8001670:	e752      	b.n	8001518 <__aeabi_dmul+0x10c>
 8001672:	465a      	mov	r2, fp
 8001674:	2000      	movs	r0, #0
 8001676:	9900      	ldr	r1, [sp, #0]
 8001678:	0004      	movs	r4, r0
 800167a:	404a      	eors	r2, r1
 800167c:	4693      	mov	fp, r2
 800167e:	2602      	movs	r6, #2
 8001680:	e70b      	b.n	800149a <__aeabi_dmul+0x8e>
 8001682:	220c      	movs	r2, #12
 8001684:	001d      	movs	r5, r3
 8001686:	2303      	movs	r3, #3
 8001688:	4681      	mov	r9, r0
 800168a:	4690      	mov	r8, r2
 800168c:	9302      	str	r3, [sp, #8]
 800168e:	e6e3      	b.n	8001458 <__aeabi_dmul+0x4c>
 8001690:	2300      	movs	r3, #0
 8001692:	469a      	mov	sl, r3
 8001694:	3304      	adds	r3, #4
 8001696:	4698      	mov	r8, r3
 8001698:	3b03      	subs	r3, #3
 800169a:	2500      	movs	r5, #0
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	e6db      	b.n	8001458 <__aeabi_dmul+0x4c>
 80016a0:	4642      	mov	r2, r8
 80016a2:	3301      	adds	r3, #1
 80016a4:	431a      	orrs	r2, r3
 80016a6:	002b      	movs	r3, r5
 80016a8:	4690      	mov	r8, r2
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	4642      	mov	r2, r8
 80016b0:	2400      	movs	r4, #0
 80016b2:	2000      	movs	r0, #0
 80016b4:	2601      	movs	r6, #1
 80016b6:	2a0a      	cmp	r2, #10
 80016b8:	dc00      	bgt.n	80016bc <__aeabi_dmul+0x2b0>
 80016ba:	e6ea      	b.n	8001492 <__aeabi_dmul+0x86>
 80016bc:	e72c      	b.n	8001518 <__aeabi_dmul+0x10c>
 80016be:	2201      	movs	r2, #1
 80016c0:	1ad2      	subs	r2, r2, r3
 80016c2:	2a38      	cmp	r2, #56	@ 0x38
 80016c4:	dd00      	ble.n	80016c8 <__aeabi_dmul+0x2bc>
 80016c6:	e6f4      	b.n	80014b2 <__aeabi_dmul+0xa6>
 80016c8:	2a1f      	cmp	r2, #31
 80016ca:	dc00      	bgt.n	80016ce <__aeabi_dmul+0x2c2>
 80016cc:	e12a      	b.n	8001924 <__aeabi_dmul+0x518>
 80016ce:	211f      	movs	r1, #31
 80016d0:	4249      	negs	r1, r1
 80016d2:	1acb      	subs	r3, r1, r3
 80016d4:	0021      	movs	r1, r4
 80016d6:	40d9      	lsrs	r1, r3
 80016d8:	000b      	movs	r3, r1
 80016da:	2a20      	cmp	r2, #32
 80016dc:	d005      	beq.n	80016ea <__aeabi_dmul+0x2de>
 80016de:	4a16      	ldr	r2, [pc, #88]	@ (8001738 <__aeabi_dmul+0x32c>)
 80016e0:	9d01      	ldr	r5, [sp, #4]
 80016e2:	4694      	mov	ip, r2
 80016e4:	4465      	add	r5, ip
 80016e6:	40ac      	lsls	r4, r5
 80016e8:	4320      	orrs	r0, r4
 80016ea:	1e42      	subs	r2, r0, #1
 80016ec:	4190      	sbcs	r0, r2
 80016ee:	4318      	orrs	r0, r3
 80016f0:	2307      	movs	r3, #7
 80016f2:	0019      	movs	r1, r3
 80016f4:	2400      	movs	r4, #0
 80016f6:	4001      	ands	r1, r0
 80016f8:	4203      	tst	r3, r0
 80016fa:	d00c      	beq.n	8001716 <__aeabi_dmul+0x30a>
 80016fc:	230f      	movs	r3, #15
 80016fe:	4003      	ands	r3, r0
 8001700:	2b04      	cmp	r3, #4
 8001702:	d100      	bne.n	8001706 <__aeabi_dmul+0x2fa>
 8001704:	e140      	b.n	8001988 <__aeabi_dmul+0x57c>
 8001706:	1d03      	adds	r3, r0, #4
 8001708:	4283      	cmp	r3, r0
 800170a:	41a4      	sbcs	r4, r4
 800170c:	0018      	movs	r0, r3
 800170e:	4264      	negs	r4, r4
 8001710:	0761      	lsls	r1, r4, #29
 8001712:	0264      	lsls	r4, r4, #9
 8001714:	0b24      	lsrs	r4, r4, #12
 8001716:	08c2      	lsrs	r2, r0, #3
 8001718:	2300      	movs	r3, #0
 800171a:	430a      	orrs	r2, r1
 800171c:	e6cc      	b.n	80014b8 <__aeabi_dmul+0xac>
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	000007ff 	.word	0x000007ff
 8001724:	fffffc01 	.word	0xfffffc01
 8001728:	000003ff 	.word	0x000003ff
 800172c:	feffffff 	.word	0xfeffffff
 8001730:	000007fe 	.word	0x000007fe
 8001734:	fffffc0d 	.word	0xfffffc0d
 8001738:	0000043e 	.word	0x0000043e
 800173c:	4649      	mov	r1, r9
 800173e:	464a      	mov	r2, r9
 8001740:	0409      	lsls	r1, r1, #16
 8001742:	0c09      	lsrs	r1, r1, #16
 8001744:	000d      	movs	r5, r1
 8001746:	0c16      	lsrs	r6, r2, #16
 8001748:	0c02      	lsrs	r2, r0, #16
 800174a:	0400      	lsls	r0, r0, #16
 800174c:	0c00      	lsrs	r0, r0, #16
 800174e:	4345      	muls	r5, r0
 8001750:	46ac      	mov	ip, r5
 8001752:	0005      	movs	r5, r0
 8001754:	4375      	muls	r5, r6
 8001756:	46a8      	mov	r8, r5
 8001758:	0015      	movs	r5, r2
 800175a:	000f      	movs	r7, r1
 800175c:	4375      	muls	r5, r6
 800175e:	9200      	str	r2, [sp, #0]
 8001760:	9502      	str	r5, [sp, #8]
 8001762:	002a      	movs	r2, r5
 8001764:	9d00      	ldr	r5, [sp, #0]
 8001766:	436f      	muls	r7, r5
 8001768:	4665      	mov	r5, ip
 800176a:	0c2d      	lsrs	r5, r5, #16
 800176c:	46a9      	mov	r9, r5
 800176e:	4447      	add	r7, r8
 8001770:	444f      	add	r7, r9
 8001772:	45b8      	cmp	r8, r7
 8001774:	d905      	bls.n	8001782 <__aeabi_dmul+0x376>
 8001776:	0015      	movs	r5, r2
 8001778:	2280      	movs	r2, #128	@ 0x80
 800177a:	0252      	lsls	r2, r2, #9
 800177c:	4690      	mov	r8, r2
 800177e:	4445      	add	r5, r8
 8001780:	9502      	str	r5, [sp, #8]
 8001782:	0c3d      	lsrs	r5, r7, #16
 8001784:	9503      	str	r5, [sp, #12]
 8001786:	4665      	mov	r5, ip
 8001788:	042d      	lsls	r5, r5, #16
 800178a:	043f      	lsls	r7, r7, #16
 800178c:	0c2d      	lsrs	r5, r5, #16
 800178e:	46ac      	mov	ip, r5
 8001790:	003d      	movs	r5, r7
 8001792:	4465      	add	r5, ip
 8001794:	9504      	str	r5, [sp, #16]
 8001796:	0c25      	lsrs	r5, r4, #16
 8001798:	0424      	lsls	r4, r4, #16
 800179a:	0c24      	lsrs	r4, r4, #16
 800179c:	46ac      	mov	ip, r5
 800179e:	0025      	movs	r5, r4
 80017a0:	4375      	muls	r5, r6
 80017a2:	46a8      	mov	r8, r5
 80017a4:	4665      	mov	r5, ip
 80017a6:	000f      	movs	r7, r1
 80017a8:	4369      	muls	r1, r5
 80017aa:	4441      	add	r1, r8
 80017ac:	4689      	mov	r9, r1
 80017ae:	4367      	muls	r7, r4
 80017b0:	0c39      	lsrs	r1, r7, #16
 80017b2:	4449      	add	r1, r9
 80017b4:	436e      	muls	r6, r5
 80017b6:	4588      	cmp	r8, r1
 80017b8:	d903      	bls.n	80017c2 <__aeabi_dmul+0x3b6>
 80017ba:	2280      	movs	r2, #128	@ 0x80
 80017bc:	0252      	lsls	r2, r2, #9
 80017be:	4690      	mov	r8, r2
 80017c0:	4446      	add	r6, r8
 80017c2:	0c0d      	lsrs	r5, r1, #16
 80017c4:	46a8      	mov	r8, r5
 80017c6:	0035      	movs	r5, r6
 80017c8:	4445      	add	r5, r8
 80017ca:	9505      	str	r5, [sp, #20]
 80017cc:	9d03      	ldr	r5, [sp, #12]
 80017ce:	043f      	lsls	r7, r7, #16
 80017d0:	46a8      	mov	r8, r5
 80017d2:	0c3f      	lsrs	r7, r7, #16
 80017d4:	0409      	lsls	r1, r1, #16
 80017d6:	19c9      	adds	r1, r1, r7
 80017d8:	4488      	add	r8, r1
 80017da:	4645      	mov	r5, r8
 80017dc:	9503      	str	r5, [sp, #12]
 80017de:	4655      	mov	r5, sl
 80017e0:	042e      	lsls	r6, r5, #16
 80017e2:	0c36      	lsrs	r6, r6, #16
 80017e4:	0c2f      	lsrs	r7, r5, #16
 80017e6:	0035      	movs	r5, r6
 80017e8:	4345      	muls	r5, r0
 80017ea:	4378      	muls	r0, r7
 80017ec:	4681      	mov	r9, r0
 80017ee:	0038      	movs	r0, r7
 80017f0:	46a8      	mov	r8, r5
 80017f2:	0c2d      	lsrs	r5, r5, #16
 80017f4:	46aa      	mov	sl, r5
 80017f6:	9a00      	ldr	r2, [sp, #0]
 80017f8:	4350      	muls	r0, r2
 80017fa:	4372      	muls	r2, r6
 80017fc:	444a      	add	r2, r9
 80017fe:	4452      	add	r2, sl
 8001800:	4591      	cmp	r9, r2
 8001802:	d903      	bls.n	800180c <__aeabi_dmul+0x400>
 8001804:	2580      	movs	r5, #128	@ 0x80
 8001806:	026d      	lsls	r5, r5, #9
 8001808:	46a9      	mov	r9, r5
 800180a:	4448      	add	r0, r9
 800180c:	0c15      	lsrs	r5, r2, #16
 800180e:	46a9      	mov	r9, r5
 8001810:	4645      	mov	r5, r8
 8001812:	042d      	lsls	r5, r5, #16
 8001814:	0c2d      	lsrs	r5, r5, #16
 8001816:	46a8      	mov	r8, r5
 8001818:	4665      	mov	r5, ip
 800181a:	437d      	muls	r5, r7
 800181c:	0412      	lsls	r2, r2, #16
 800181e:	4448      	add	r0, r9
 8001820:	4490      	add	r8, r2
 8001822:	46a9      	mov	r9, r5
 8001824:	0032      	movs	r2, r6
 8001826:	4665      	mov	r5, ip
 8001828:	4362      	muls	r2, r4
 800182a:	436e      	muls	r6, r5
 800182c:	437c      	muls	r4, r7
 800182e:	0c17      	lsrs	r7, r2, #16
 8001830:	1936      	adds	r6, r6, r4
 8001832:	19bf      	adds	r7, r7, r6
 8001834:	42bc      	cmp	r4, r7
 8001836:	d903      	bls.n	8001840 <__aeabi_dmul+0x434>
 8001838:	2480      	movs	r4, #128	@ 0x80
 800183a:	0264      	lsls	r4, r4, #9
 800183c:	46a4      	mov	ip, r4
 800183e:	44e1      	add	r9, ip
 8001840:	9c02      	ldr	r4, [sp, #8]
 8001842:	9e03      	ldr	r6, [sp, #12]
 8001844:	46a4      	mov	ip, r4
 8001846:	9d05      	ldr	r5, [sp, #20]
 8001848:	4466      	add	r6, ip
 800184a:	428e      	cmp	r6, r1
 800184c:	4189      	sbcs	r1, r1
 800184e:	46ac      	mov	ip, r5
 8001850:	0412      	lsls	r2, r2, #16
 8001852:	043c      	lsls	r4, r7, #16
 8001854:	0c12      	lsrs	r2, r2, #16
 8001856:	18a2      	adds	r2, r4, r2
 8001858:	4462      	add	r2, ip
 800185a:	4249      	negs	r1, r1
 800185c:	1854      	adds	r4, r2, r1
 800185e:	4446      	add	r6, r8
 8001860:	46a4      	mov	ip, r4
 8001862:	4546      	cmp	r6, r8
 8001864:	41a4      	sbcs	r4, r4
 8001866:	4682      	mov	sl, r0
 8001868:	4264      	negs	r4, r4
 800186a:	46a0      	mov	r8, r4
 800186c:	42aa      	cmp	r2, r5
 800186e:	4192      	sbcs	r2, r2
 8001870:	458c      	cmp	ip, r1
 8001872:	4189      	sbcs	r1, r1
 8001874:	44e2      	add	sl, ip
 8001876:	44d0      	add	r8, sl
 8001878:	4249      	negs	r1, r1
 800187a:	4252      	negs	r2, r2
 800187c:	430a      	orrs	r2, r1
 800187e:	45a0      	cmp	r8, r4
 8001880:	41a4      	sbcs	r4, r4
 8001882:	4582      	cmp	sl, r0
 8001884:	4189      	sbcs	r1, r1
 8001886:	4264      	negs	r4, r4
 8001888:	4249      	negs	r1, r1
 800188a:	430c      	orrs	r4, r1
 800188c:	4641      	mov	r1, r8
 800188e:	0c3f      	lsrs	r7, r7, #16
 8001890:	19d2      	adds	r2, r2, r7
 8001892:	1912      	adds	r2, r2, r4
 8001894:	0dcc      	lsrs	r4, r1, #23
 8001896:	9904      	ldr	r1, [sp, #16]
 8001898:	0270      	lsls	r0, r6, #9
 800189a:	4308      	orrs	r0, r1
 800189c:	1e41      	subs	r1, r0, #1
 800189e:	4188      	sbcs	r0, r1
 80018a0:	4641      	mov	r1, r8
 80018a2:	444a      	add	r2, r9
 80018a4:	0df6      	lsrs	r6, r6, #23
 80018a6:	0252      	lsls	r2, r2, #9
 80018a8:	4330      	orrs	r0, r6
 80018aa:	0249      	lsls	r1, r1, #9
 80018ac:	4314      	orrs	r4, r2
 80018ae:	4308      	orrs	r0, r1
 80018b0:	01d2      	lsls	r2, r2, #7
 80018b2:	d535      	bpl.n	8001920 <__aeabi_dmul+0x514>
 80018b4:	2201      	movs	r2, #1
 80018b6:	0843      	lsrs	r3, r0, #1
 80018b8:	4002      	ands	r2, r0
 80018ba:	4313      	orrs	r3, r2
 80018bc:	07e0      	lsls	r0, r4, #31
 80018be:	4318      	orrs	r0, r3
 80018c0:	0864      	lsrs	r4, r4, #1
 80018c2:	e634      	b.n	800152e <__aeabi_dmul+0x122>
 80018c4:	9b00      	ldr	r3, [sp, #0]
 80018c6:	46a2      	mov	sl, r4
 80018c8:	469b      	mov	fp, r3
 80018ca:	4681      	mov	r9, r0
 80018cc:	2480      	movs	r4, #128	@ 0x80
 80018ce:	4653      	mov	r3, sl
 80018d0:	0324      	lsls	r4, r4, #12
 80018d2:	431c      	orrs	r4, r3
 80018d4:	0324      	lsls	r4, r4, #12
 80018d6:	464a      	mov	r2, r9
 80018d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001994 <__aeabi_dmul+0x588>)
 80018da:	0b24      	lsrs	r4, r4, #12
 80018dc:	e5ec      	b.n	80014b8 <__aeabi_dmul+0xac>
 80018de:	f000 fc7d 	bl	80021dc <__clzsi2>
 80018e2:	2315      	movs	r3, #21
 80018e4:	469c      	mov	ip, r3
 80018e6:	4484      	add	ip, r0
 80018e8:	0002      	movs	r2, r0
 80018ea:	4663      	mov	r3, ip
 80018ec:	3220      	adds	r2, #32
 80018ee:	2b1c      	cmp	r3, #28
 80018f0:	dc00      	bgt.n	80018f4 <__aeabi_dmul+0x4e8>
 80018f2:	e684      	b.n	80015fe <__aeabi_dmul+0x1f2>
 80018f4:	2300      	movs	r3, #0
 80018f6:	4699      	mov	r9, r3
 80018f8:	0023      	movs	r3, r4
 80018fa:	3808      	subs	r0, #8
 80018fc:	4083      	lsls	r3, r0
 80018fe:	469a      	mov	sl, r3
 8001900:	e68e      	b.n	8001620 <__aeabi_dmul+0x214>
 8001902:	f000 fc6b 	bl	80021dc <__clzsi2>
 8001906:	0002      	movs	r2, r0
 8001908:	0003      	movs	r3, r0
 800190a:	3215      	adds	r2, #21
 800190c:	3320      	adds	r3, #32
 800190e:	2a1c      	cmp	r2, #28
 8001910:	dc00      	bgt.n	8001914 <__aeabi_dmul+0x508>
 8001912:	e64e      	b.n	80015b2 <__aeabi_dmul+0x1a6>
 8001914:	0002      	movs	r2, r0
 8001916:	0034      	movs	r4, r6
 8001918:	3a08      	subs	r2, #8
 800191a:	2000      	movs	r0, #0
 800191c:	4094      	lsls	r4, r2
 800191e:	e652      	b.n	80015c6 <__aeabi_dmul+0x1ba>
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	e604      	b.n	800152e <__aeabi_dmul+0x122>
 8001924:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <__aeabi_dmul+0x58c>)
 8001926:	0021      	movs	r1, r4
 8001928:	469c      	mov	ip, r3
 800192a:	0003      	movs	r3, r0
 800192c:	9d01      	ldr	r5, [sp, #4]
 800192e:	40d3      	lsrs	r3, r2
 8001930:	4465      	add	r5, ip
 8001932:	40a9      	lsls	r1, r5
 8001934:	4319      	orrs	r1, r3
 8001936:	0003      	movs	r3, r0
 8001938:	40ab      	lsls	r3, r5
 800193a:	1e58      	subs	r0, r3, #1
 800193c:	4183      	sbcs	r3, r0
 800193e:	4319      	orrs	r1, r3
 8001940:	0008      	movs	r0, r1
 8001942:	40d4      	lsrs	r4, r2
 8001944:	074b      	lsls	r3, r1, #29
 8001946:	d009      	beq.n	800195c <__aeabi_dmul+0x550>
 8001948:	230f      	movs	r3, #15
 800194a:	400b      	ands	r3, r1
 800194c:	2b04      	cmp	r3, #4
 800194e:	d005      	beq.n	800195c <__aeabi_dmul+0x550>
 8001950:	1d0b      	adds	r3, r1, #4
 8001952:	428b      	cmp	r3, r1
 8001954:	4180      	sbcs	r0, r0
 8001956:	4240      	negs	r0, r0
 8001958:	1824      	adds	r4, r4, r0
 800195a:	0018      	movs	r0, r3
 800195c:	0223      	lsls	r3, r4, #8
 800195e:	d400      	bmi.n	8001962 <__aeabi_dmul+0x556>
 8001960:	e6d6      	b.n	8001710 <__aeabi_dmul+0x304>
 8001962:	2301      	movs	r3, #1
 8001964:	2400      	movs	r4, #0
 8001966:	2200      	movs	r2, #0
 8001968:	e5a6      	b.n	80014b8 <__aeabi_dmul+0xac>
 800196a:	290f      	cmp	r1, #15
 800196c:	d1aa      	bne.n	80018c4 <__aeabi_dmul+0x4b8>
 800196e:	2380      	movs	r3, #128	@ 0x80
 8001970:	4652      	mov	r2, sl
 8001972:	031b      	lsls	r3, r3, #12
 8001974:	421a      	tst	r2, r3
 8001976:	d0a9      	beq.n	80018cc <__aeabi_dmul+0x4c0>
 8001978:	421c      	tst	r4, r3
 800197a:	d1a7      	bne.n	80018cc <__aeabi_dmul+0x4c0>
 800197c:	431c      	orrs	r4, r3
 800197e:	9b00      	ldr	r3, [sp, #0]
 8001980:	0002      	movs	r2, r0
 8001982:	469b      	mov	fp, r3
 8001984:	4b03      	ldr	r3, [pc, #12]	@ (8001994 <__aeabi_dmul+0x588>)
 8001986:	e597      	b.n	80014b8 <__aeabi_dmul+0xac>
 8001988:	2400      	movs	r4, #0
 800198a:	e6c1      	b.n	8001710 <__aeabi_dmul+0x304>
 800198c:	2400      	movs	r4, #0
 800198e:	4b01      	ldr	r3, [pc, #4]	@ (8001994 <__aeabi_dmul+0x588>)
 8001990:	0022      	movs	r2, r4
 8001992:	e591      	b.n	80014b8 <__aeabi_dmul+0xac>
 8001994:	000007ff 	.word	0x000007ff
 8001998:	0000041e 	.word	0x0000041e

0800199c <__aeabi_dsub>:
 800199c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800199e:	464e      	mov	r6, r9
 80019a0:	4645      	mov	r5, r8
 80019a2:	46de      	mov	lr, fp
 80019a4:	4657      	mov	r7, sl
 80019a6:	b5e0      	push	{r5, r6, r7, lr}
 80019a8:	b085      	sub	sp, #20
 80019aa:	9000      	str	r0, [sp, #0]
 80019ac:	9101      	str	r1, [sp, #4]
 80019ae:	030c      	lsls	r4, r1, #12
 80019b0:	004f      	lsls	r7, r1, #1
 80019b2:	0fce      	lsrs	r6, r1, #31
 80019b4:	0a61      	lsrs	r1, r4, #9
 80019b6:	9c00      	ldr	r4, [sp, #0]
 80019b8:	46b0      	mov	r8, r6
 80019ba:	0f64      	lsrs	r4, r4, #29
 80019bc:	430c      	orrs	r4, r1
 80019be:	9900      	ldr	r1, [sp, #0]
 80019c0:	0d7f      	lsrs	r7, r7, #21
 80019c2:	00c8      	lsls	r0, r1, #3
 80019c4:	0011      	movs	r1, r2
 80019c6:	001a      	movs	r2, r3
 80019c8:	031b      	lsls	r3, r3, #12
 80019ca:	469c      	mov	ip, r3
 80019cc:	9100      	str	r1, [sp, #0]
 80019ce:	9201      	str	r2, [sp, #4]
 80019d0:	0051      	lsls	r1, r2, #1
 80019d2:	0d4b      	lsrs	r3, r1, #21
 80019d4:	4699      	mov	r9, r3
 80019d6:	9b01      	ldr	r3, [sp, #4]
 80019d8:	9d00      	ldr	r5, [sp, #0]
 80019da:	0fd9      	lsrs	r1, r3, #31
 80019dc:	4663      	mov	r3, ip
 80019de:	0f6a      	lsrs	r2, r5, #29
 80019e0:	0a5b      	lsrs	r3, r3, #9
 80019e2:	4313      	orrs	r3, r2
 80019e4:	00ea      	lsls	r2, r5, #3
 80019e6:	4694      	mov	ip, r2
 80019e8:	4693      	mov	fp, r2
 80019ea:	4ac1      	ldr	r2, [pc, #772]	@ (8001cf0 <__aeabi_dsub+0x354>)
 80019ec:	9003      	str	r0, [sp, #12]
 80019ee:	9302      	str	r3, [sp, #8]
 80019f0:	4591      	cmp	r9, r2
 80019f2:	d100      	bne.n	80019f6 <__aeabi_dsub+0x5a>
 80019f4:	e0cd      	b.n	8001b92 <__aeabi_dsub+0x1f6>
 80019f6:	2501      	movs	r5, #1
 80019f8:	4069      	eors	r1, r5
 80019fa:	464d      	mov	r5, r9
 80019fc:	1b7d      	subs	r5, r7, r5
 80019fe:	46aa      	mov	sl, r5
 8001a00:	428e      	cmp	r6, r1
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x6a>
 8001a04:	e080      	b.n	8001b08 <__aeabi_dsub+0x16c>
 8001a06:	2d00      	cmp	r5, #0
 8001a08:	dc00      	bgt.n	8001a0c <__aeabi_dsub+0x70>
 8001a0a:	e335      	b.n	8002078 <__aeabi_dsub+0x6dc>
 8001a0c:	4649      	mov	r1, r9
 8001a0e:	2900      	cmp	r1, #0
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dsub+0x78>
 8001a12:	e0df      	b.n	8001bd4 <__aeabi_dsub+0x238>
 8001a14:	4297      	cmp	r7, r2
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dsub+0x7e>
 8001a18:	e194      	b.n	8001d44 <__aeabi_dsub+0x3a8>
 8001a1a:	4652      	mov	r2, sl
 8001a1c:	2501      	movs	r5, #1
 8001a1e:	2a38      	cmp	r2, #56	@ 0x38
 8001a20:	dc19      	bgt.n	8001a56 <__aeabi_dsub+0xba>
 8001a22:	2280      	movs	r2, #128	@ 0x80
 8001a24:	9b02      	ldr	r3, [sp, #8]
 8001a26:	0412      	lsls	r2, r2, #16
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	9302      	str	r3, [sp, #8]
 8001a2c:	4652      	mov	r2, sl
 8001a2e:	2a1f      	cmp	r2, #31
 8001a30:	dd00      	ble.n	8001a34 <__aeabi_dsub+0x98>
 8001a32:	e1e3      	b.n	8001dfc <__aeabi_dsub+0x460>
 8001a34:	4653      	mov	r3, sl
 8001a36:	2220      	movs	r2, #32
 8001a38:	4661      	mov	r1, ip
 8001a3a:	9d02      	ldr	r5, [sp, #8]
 8001a3c:	1ad2      	subs	r2, r2, r3
 8001a3e:	4095      	lsls	r5, r2
 8001a40:	40d9      	lsrs	r1, r3
 8001a42:	430d      	orrs	r5, r1
 8001a44:	4661      	mov	r1, ip
 8001a46:	4091      	lsls	r1, r2
 8001a48:	000a      	movs	r2, r1
 8001a4a:	1e51      	subs	r1, r2, #1
 8001a4c:	418a      	sbcs	r2, r1
 8001a4e:	4315      	orrs	r5, r2
 8001a50:	9a02      	ldr	r2, [sp, #8]
 8001a52:	40da      	lsrs	r2, r3
 8001a54:	1aa4      	subs	r4, r4, r2
 8001a56:	1b45      	subs	r5, r0, r5
 8001a58:	42a8      	cmp	r0, r5
 8001a5a:	4180      	sbcs	r0, r0
 8001a5c:	4240      	negs	r0, r0
 8001a5e:	1a24      	subs	r4, r4, r0
 8001a60:	0223      	lsls	r3, r4, #8
 8001a62:	d400      	bmi.n	8001a66 <__aeabi_dsub+0xca>
 8001a64:	e13d      	b.n	8001ce2 <__aeabi_dsub+0x346>
 8001a66:	0264      	lsls	r4, r4, #9
 8001a68:	0a64      	lsrs	r4, r4, #9
 8001a6a:	2c00      	cmp	r4, #0
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0xd4>
 8001a6e:	e147      	b.n	8001d00 <__aeabi_dsub+0x364>
 8001a70:	0020      	movs	r0, r4
 8001a72:	f000 fbb3 	bl	80021dc <__clzsi2>
 8001a76:	0003      	movs	r3, r0
 8001a78:	3b08      	subs	r3, #8
 8001a7a:	2120      	movs	r1, #32
 8001a7c:	0028      	movs	r0, r5
 8001a7e:	1aca      	subs	r2, r1, r3
 8001a80:	40d0      	lsrs	r0, r2
 8001a82:	409c      	lsls	r4, r3
 8001a84:	0002      	movs	r2, r0
 8001a86:	409d      	lsls	r5, r3
 8001a88:	4322      	orrs	r2, r4
 8001a8a:	429f      	cmp	r7, r3
 8001a8c:	dd00      	ble.n	8001a90 <__aeabi_dsub+0xf4>
 8001a8e:	e177      	b.n	8001d80 <__aeabi_dsub+0x3e4>
 8001a90:	1bd8      	subs	r0, r3, r7
 8001a92:	3001      	adds	r0, #1
 8001a94:	1a09      	subs	r1, r1, r0
 8001a96:	002c      	movs	r4, r5
 8001a98:	408d      	lsls	r5, r1
 8001a9a:	40c4      	lsrs	r4, r0
 8001a9c:	1e6b      	subs	r3, r5, #1
 8001a9e:	419d      	sbcs	r5, r3
 8001aa0:	0013      	movs	r3, r2
 8001aa2:	40c2      	lsrs	r2, r0
 8001aa4:	408b      	lsls	r3, r1
 8001aa6:	4325      	orrs	r5, r4
 8001aa8:	2700      	movs	r7, #0
 8001aaa:	0014      	movs	r4, r2
 8001aac:	431d      	orrs	r5, r3
 8001aae:	076b      	lsls	r3, r5, #29
 8001ab0:	d009      	beq.n	8001ac6 <__aeabi_dsub+0x12a>
 8001ab2:	230f      	movs	r3, #15
 8001ab4:	402b      	ands	r3, r5
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d005      	beq.n	8001ac6 <__aeabi_dsub+0x12a>
 8001aba:	1d2b      	adds	r3, r5, #4
 8001abc:	42ab      	cmp	r3, r5
 8001abe:	41ad      	sbcs	r5, r5
 8001ac0:	426d      	negs	r5, r5
 8001ac2:	1964      	adds	r4, r4, r5
 8001ac4:	001d      	movs	r5, r3
 8001ac6:	0223      	lsls	r3, r4, #8
 8001ac8:	d400      	bmi.n	8001acc <__aeabi_dsub+0x130>
 8001aca:	e140      	b.n	8001d4e <__aeabi_dsub+0x3b2>
 8001acc:	4a88      	ldr	r2, [pc, #544]	@ (8001cf0 <__aeabi_dsub+0x354>)
 8001ace:	3701      	adds	r7, #1
 8001ad0:	4297      	cmp	r7, r2
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dsub+0x13a>
 8001ad4:	e101      	b.n	8001cda <__aeabi_dsub+0x33e>
 8001ad6:	2601      	movs	r6, #1
 8001ad8:	4643      	mov	r3, r8
 8001ada:	4986      	ldr	r1, [pc, #536]	@ (8001cf4 <__aeabi_dsub+0x358>)
 8001adc:	08ed      	lsrs	r5, r5, #3
 8001ade:	4021      	ands	r1, r4
 8001ae0:	074a      	lsls	r2, r1, #29
 8001ae2:	432a      	orrs	r2, r5
 8001ae4:	057c      	lsls	r4, r7, #21
 8001ae6:	024d      	lsls	r5, r1, #9
 8001ae8:	0b2d      	lsrs	r5, r5, #12
 8001aea:	0d64      	lsrs	r4, r4, #21
 8001aec:	401e      	ands	r6, r3
 8001aee:	0524      	lsls	r4, r4, #20
 8001af0:	432c      	orrs	r4, r5
 8001af2:	07f6      	lsls	r6, r6, #31
 8001af4:	4334      	orrs	r4, r6
 8001af6:	0010      	movs	r0, r2
 8001af8:	0021      	movs	r1, r4
 8001afa:	b005      	add	sp, #20
 8001afc:	bcf0      	pop	{r4, r5, r6, r7}
 8001afe:	46bb      	mov	fp, r7
 8001b00:	46b2      	mov	sl, r6
 8001b02:	46a9      	mov	r9, r5
 8001b04:	46a0      	mov	r8, r4
 8001b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b08:	2d00      	cmp	r5, #0
 8001b0a:	dc00      	bgt.n	8001b0e <__aeabi_dsub+0x172>
 8001b0c:	e2d0      	b.n	80020b0 <__aeabi_dsub+0x714>
 8001b0e:	4649      	mov	r1, r9
 8001b10:	2900      	cmp	r1, #0
 8001b12:	d000      	beq.n	8001b16 <__aeabi_dsub+0x17a>
 8001b14:	e0d4      	b.n	8001cc0 <__aeabi_dsub+0x324>
 8001b16:	4661      	mov	r1, ip
 8001b18:	9b02      	ldr	r3, [sp, #8]
 8001b1a:	4319      	orrs	r1, r3
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_dsub+0x184>
 8001b1e:	e12b      	b.n	8001d78 <__aeabi_dsub+0x3dc>
 8001b20:	1e69      	subs	r1, r5, #1
 8001b22:	2d01      	cmp	r5, #1
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dsub+0x18c>
 8001b26:	e1d9      	b.n	8001edc <__aeabi_dsub+0x540>
 8001b28:	4295      	cmp	r5, r2
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_dsub+0x192>
 8001b2c:	e10a      	b.n	8001d44 <__aeabi_dsub+0x3a8>
 8001b2e:	2501      	movs	r5, #1
 8001b30:	2938      	cmp	r1, #56	@ 0x38
 8001b32:	dc17      	bgt.n	8001b64 <__aeabi_dsub+0x1c8>
 8001b34:	468a      	mov	sl, r1
 8001b36:	4653      	mov	r3, sl
 8001b38:	2b1f      	cmp	r3, #31
 8001b3a:	dd00      	ble.n	8001b3e <__aeabi_dsub+0x1a2>
 8001b3c:	e1e7      	b.n	8001f0e <__aeabi_dsub+0x572>
 8001b3e:	2220      	movs	r2, #32
 8001b40:	1ad2      	subs	r2, r2, r3
 8001b42:	9b02      	ldr	r3, [sp, #8]
 8001b44:	4661      	mov	r1, ip
 8001b46:	4093      	lsls	r3, r2
 8001b48:	001d      	movs	r5, r3
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	40d9      	lsrs	r1, r3
 8001b4e:	4663      	mov	r3, ip
 8001b50:	4093      	lsls	r3, r2
 8001b52:	001a      	movs	r2, r3
 8001b54:	430d      	orrs	r5, r1
 8001b56:	1e51      	subs	r1, r2, #1
 8001b58:	418a      	sbcs	r2, r1
 8001b5a:	4653      	mov	r3, sl
 8001b5c:	4315      	orrs	r5, r2
 8001b5e:	9a02      	ldr	r2, [sp, #8]
 8001b60:	40da      	lsrs	r2, r3
 8001b62:	18a4      	adds	r4, r4, r2
 8001b64:	182d      	adds	r5, r5, r0
 8001b66:	4285      	cmp	r5, r0
 8001b68:	4180      	sbcs	r0, r0
 8001b6a:	4240      	negs	r0, r0
 8001b6c:	1824      	adds	r4, r4, r0
 8001b6e:	0223      	lsls	r3, r4, #8
 8001b70:	d400      	bmi.n	8001b74 <__aeabi_dsub+0x1d8>
 8001b72:	e0b6      	b.n	8001ce2 <__aeabi_dsub+0x346>
 8001b74:	4b5e      	ldr	r3, [pc, #376]	@ (8001cf0 <__aeabi_dsub+0x354>)
 8001b76:	3701      	adds	r7, #1
 8001b78:	429f      	cmp	r7, r3
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_dsub+0x1e2>
 8001b7c:	e0ad      	b.n	8001cda <__aeabi_dsub+0x33e>
 8001b7e:	2101      	movs	r1, #1
 8001b80:	4b5c      	ldr	r3, [pc, #368]	@ (8001cf4 <__aeabi_dsub+0x358>)
 8001b82:	086a      	lsrs	r2, r5, #1
 8001b84:	401c      	ands	r4, r3
 8001b86:	4029      	ands	r1, r5
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	07e5      	lsls	r5, r4, #31
 8001b8c:	4315      	orrs	r5, r2
 8001b8e:	0864      	lsrs	r4, r4, #1
 8001b90:	e78d      	b.n	8001aae <__aeabi_dsub+0x112>
 8001b92:	4a59      	ldr	r2, [pc, #356]	@ (8001cf8 <__aeabi_dsub+0x35c>)
 8001b94:	9b02      	ldr	r3, [sp, #8]
 8001b96:	4692      	mov	sl, r2
 8001b98:	4662      	mov	r2, ip
 8001b9a:	44ba      	add	sl, r7
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	d02c      	beq.n	8001bfa <__aeabi_dsub+0x25e>
 8001ba0:	428e      	cmp	r6, r1
 8001ba2:	d02e      	beq.n	8001c02 <__aeabi_dsub+0x266>
 8001ba4:	4652      	mov	r2, sl
 8001ba6:	2a00      	cmp	r2, #0
 8001ba8:	d060      	beq.n	8001c6c <__aeabi_dsub+0x2d0>
 8001baa:	2f00      	cmp	r7, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dsub+0x214>
 8001bae:	e0db      	b.n	8001d68 <__aeabi_dsub+0x3cc>
 8001bb0:	4663      	mov	r3, ip
 8001bb2:	000e      	movs	r6, r1
 8001bb4:	9c02      	ldr	r4, [sp, #8]
 8001bb6:	08d8      	lsrs	r0, r3, #3
 8001bb8:	0762      	lsls	r2, r4, #29
 8001bba:	4302      	orrs	r2, r0
 8001bbc:	08e4      	lsrs	r4, r4, #3
 8001bbe:	0013      	movs	r3, r2
 8001bc0:	4323      	orrs	r3, r4
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dsub+0x22a>
 8001bc4:	e254      	b.n	8002070 <__aeabi_dsub+0x6d4>
 8001bc6:	2580      	movs	r5, #128	@ 0x80
 8001bc8:	032d      	lsls	r5, r5, #12
 8001bca:	4325      	orrs	r5, r4
 8001bcc:	032d      	lsls	r5, r5, #12
 8001bce:	4c48      	ldr	r4, [pc, #288]	@ (8001cf0 <__aeabi_dsub+0x354>)
 8001bd0:	0b2d      	lsrs	r5, r5, #12
 8001bd2:	e78c      	b.n	8001aee <__aeabi_dsub+0x152>
 8001bd4:	4661      	mov	r1, ip
 8001bd6:	9b02      	ldr	r3, [sp, #8]
 8001bd8:	4319      	orrs	r1, r3
 8001bda:	d100      	bne.n	8001bde <__aeabi_dsub+0x242>
 8001bdc:	e0cc      	b.n	8001d78 <__aeabi_dsub+0x3dc>
 8001bde:	0029      	movs	r1, r5
 8001be0:	3901      	subs	r1, #1
 8001be2:	2d01      	cmp	r5, #1
 8001be4:	d100      	bne.n	8001be8 <__aeabi_dsub+0x24c>
 8001be6:	e188      	b.n	8001efa <__aeabi_dsub+0x55e>
 8001be8:	4295      	cmp	r5, r2
 8001bea:	d100      	bne.n	8001bee <__aeabi_dsub+0x252>
 8001bec:	e0aa      	b.n	8001d44 <__aeabi_dsub+0x3a8>
 8001bee:	2501      	movs	r5, #1
 8001bf0:	2938      	cmp	r1, #56	@ 0x38
 8001bf2:	dd00      	ble.n	8001bf6 <__aeabi_dsub+0x25a>
 8001bf4:	e72f      	b.n	8001a56 <__aeabi_dsub+0xba>
 8001bf6:	468a      	mov	sl, r1
 8001bf8:	e718      	b.n	8001a2c <__aeabi_dsub+0x90>
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4051      	eors	r1, r2
 8001bfe:	428e      	cmp	r6, r1
 8001c00:	d1d0      	bne.n	8001ba4 <__aeabi_dsub+0x208>
 8001c02:	4653      	mov	r3, sl
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d100      	bne.n	8001c0a <__aeabi_dsub+0x26e>
 8001c08:	e0be      	b.n	8001d88 <__aeabi_dsub+0x3ec>
 8001c0a:	2f00      	cmp	r7, #0
 8001c0c:	d000      	beq.n	8001c10 <__aeabi_dsub+0x274>
 8001c0e:	e138      	b.n	8001e82 <__aeabi_dsub+0x4e6>
 8001c10:	46ca      	mov	sl, r9
 8001c12:	0022      	movs	r2, r4
 8001c14:	4302      	orrs	r2, r0
 8001c16:	d100      	bne.n	8001c1a <__aeabi_dsub+0x27e>
 8001c18:	e1e2      	b.n	8001fe0 <__aeabi_dsub+0x644>
 8001c1a:	4653      	mov	r3, sl
 8001c1c:	1e59      	subs	r1, r3, #1
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dsub+0x288>
 8001c22:	e20d      	b.n	8002040 <__aeabi_dsub+0x6a4>
 8001c24:	4a32      	ldr	r2, [pc, #200]	@ (8001cf0 <__aeabi_dsub+0x354>)
 8001c26:	4592      	cmp	sl, r2
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dsub+0x290>
 8001c2a:	e1d2      	b.n	8001fd2 <__aeabi_dsub+0x636>
 8001c2c:	2701      	movs	r7, #1
 8001c2e:	2938      	cmp	r1, #56	@ 0x38
 8001c30:	dc13      	bgt.n	8001c5a <__aeabi_dsub+0x2be>
 8001c32:	291f      	cmp	r1, #31
 8001c34:	dd00      	ble.n	8001c38 <__aeabi_dsub+0x29c>
 8001c36:	e1ee      	b.n	8002016 <__aeabi_dsub+0x67a>
 8001c38:	2220      	movs	r2, #32
 8001c3a:	9b02      	ldr	r3, [sp, #8]
 8001c3c:	1a52      	subs	r2, r2, r1
 8001c3e:	0025      	movs	r5, r4
 8001c40:	0007      	movs	r7, r0
 8001c42:	469a      	mov	sl, r3
 8001c44:	40cc      	lsrs	r4, r1
 8001c46:	4090      	lsls	r0, r2
 8001c48:	4095      	lsls	r5, r2
 8001c4a:	40cf      	lsrs	r7, r1
 8001c4c:	44a2      	add	sl, r4
 8001c4e:	1e42      	subs	r2, r0, #1
 8001c50:	4190      	sbcs	r0, r2
 8001c52:	4653      	mov	r3, sl
 8001c54:	432f      	orrs	r7, r5
 8001c56:	4307      	orrs	r7, r0
 8001c58:	9302      	str	r3, [sp, #8]
 8001c5a:	003d      	movs	r5, r7
 8001c5c:	4465      	add	r5, ip
 8001c5e:	4565      	cmp	r5, ip
 8001c60:	4192      	sbcs	r2, r2
 8001c62:	9b02      	ldr	r3, [sp, #8]
 8001c64:	4252      	negs	r2, r2
 8001c66:	464f      	mov	r7, r9
 8001c68:	18d4      	adds	r4, r2, r3
 8001c6a:	e780      	b.n	8001b6e <__aeabi_dsub+0x1d2>
 8001c6c:	4a23      	ldr	r2, [pc, #140]	@ (8001cfc <__aeabi_dsub+0x360>)
 8001c6e:	1c7d      	adds	r5, r7, #1
 8001c70:	4215      	tst	r5, r2
 8001c72:	d000      	beq.n	8001c76 <__aeabi_dsub+0x2da>
 8001c74:	e0aa      	b.n	8001dcc <__aeabi_dsub+0x430>
 8001c76:	4662      	mov	r2, ip
 8001c78:	0025      	movs	r5, r4
 8001c7a:	9b02      	ldr	r3, [sp, #8]
 8001c7c:	4305      	orrs	r5, r0
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	2f00      	cmp	r7, #0
 8001c82:	d000      	beq.n	8001c86 <__aeabi_dsub+0x2ea>
 8001c84:	e0f5      	b.n	8001e72 <__aeabi_dsub+0x4d6>
 8001c86:	2d00      	cmp	r5, #0
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x2f0>
 8001c8a:	e16b      	b.n	8001f64 <__aeabi_dsub+0x5c8>
 8001c8c:	2a00      	cmp	r2, #0
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_dsub+0x2f6>
 8001c90:	e152      	b.n	8001f38 <__aeabi_dsub+0x59c>
 8001c92:	4663      	mov	r3, ip
 8001c94:	1ac5      	subs	r5, r0, r3
 8001c96:	9b02      	ldr	r3, [sp, #8]
 8001c98:	1ae2      	subs	r2, r4, r3
 8001c9a:	42a8      	cmp	r0, r5
 8001c9c:	419b      	sbcs	r3, r3
 8001c9e:	425b      	negs	r3, r3
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	021a      	lsls	r2, r3, #8
 8001ca4:	d400      	bmi.n	8001ca8 <__aeabi_dsub+0x30c>
 8001ca6:	e1d5      	b.n	8002054 <__aeabi_dsub+0x6b8>
 8001ca8:	4663      	mov	r3, ip
 8001caa:	1a1d      	subs	r5, r3, r0
 8001cac:	45ac      	cmp	ip, r5
 8001cae:	4192      	sbcs	r2, r2
 8001cb0:	2601      	movs	r6, #1
 8001cb2:	9b02      	ldr	r3, [sp, #8]
 8001cb4:	4252      	negs	r2, r2
 8001cb6:	1b1c      	subs	r4, r3, r4
 8001cb8:	4688      	mov	r8, r1
 8001cba:	1aa4      	subs	r4, r4, r2
 8001cbc:	400e      	ands	r6, r1
 8001cbe:	e6f6      	b.n	8001aae <__aeabi_dsub+0x112>
 8001cc0:	4297      	cmp	r7, r2
 8001cc2:	d03f      	beq.n	8001d44 <__aeabi_dsub+0x3a8>
 8001cc4:	4652      	mov	r2, sl
 8001cc6:	2501      	movs	r5, #1
 8001cc8:	2a38      	cmp	r2, #56	@ 0x38
 8001cca:	dd00      	ble.n	8001cce <__aeabi_dsub+0x332>
 8001ccc:	e74a      	b.n	8001b64 <__aeabi_dsub+0x1c8>
 8001cce:	2280      	movs	r2, #128	@ 0x80
 8001cd0:	9b02      	ldr	r3, [sp, #8]
 8001cd2:	0412      	lsls	r2, r2, #16
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	9302      	str	r3, [sp, #8]
 8001cd8:	e72d      	b.n	8001b36 <__aeabi_dsub+0x19a>
 8001cda:	003c      	movs	r4, r7
 8001cdc:	2500      	movs	r5, #0
 8001cde:	2200      	movs	r2, #0
 8001ce0:	e705      	b.n	8001aee <__aeabi_dsub+0x152>
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	402b      	ands	r3, r5
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d000      	beq.n	8001cec <__aeabi_dsub+0x350>
 8001cea:	e6e2      	b.n	8001ab2 <__aeabi_dsub+0x116>
 8001cec:	e06b      	b.n	8001dc6 <__aeabi_dsub+0x42a>
 8001cee:	46c0      	nop			@ (mov r8, r8)
 8001cf0:	000007ff 	.word	0x000007ff
 8001cf4:	ff7fffff 	.word	0xff7fffff
 8001cf8:	fffff801 	.word	0xfffff801
 8001cfc:	000007fe 	.word	0x000007fe
 8001d00:	0028      	movs	r0, r5
 8001d02:	f000 fa6b 	bl	80021dc <__clzsi2>
 8001d06:	0003      	movs	r3, r0
 8001d08:	3318      	adds	r3, #24
 8001d0a:	2b1f      	cmp	r3, #31
 8001d0c:	dc00      	bgt.n	8001d10 <__aeabi_dsub+0x374>
 8001d0e:	e6b4      	b.n	8001a7a <__aeabi_dsub+0xde>
 8001d10:	002a      	movs	r2, r5
 8001d12:	3808      	subs	r0, #8
 8001d14:	4082      	lsls	r2, r0
 8001d16:	429f      	cmp	r7, r3
 8001d18:	dd00      	ble.n	8001d1c <__aeabi_dsub+0x380>
 8001d1a:	e0b9      	b.n	8001e90 <__aeabi_dsub+0x4f4>
 8001d1c:	1bdb      	subs	r3, r3, r7
 8001d1e:	1c58      	adds	r0, r3, #1
 8001d20:	281f      	cmp	r0, #31
 8001d22:	dc00      	bgt.n	8001d26 <__aeabi_dsub+0x38a>
 8001d24:	e1a0      	b.n	8002068 <__aeabi_dsub+0x6cc>
 8001d26:	0015      	movs	r5, r2
 8001d28:	3b1f      	subs	r3, #31
 8001d2a:	40dd      	lsrs	r5, r3
 8001d2c:	2820      	cmp	r0, #32
 8001d2e:	d005      	beq.n	8001d3c <__aeabi_dsub+0x3a0>
 8001d30:	2340      	movs	r3, #64	@ 0x40
 8001d32:	1a1b      	subs	r3, r3, r0
 8001d34:	409a      	lsls	r2, r3
 8001d36:	1e53      	subs	r3, r2, #1
 8001d38:	419a      	sbcs	r2, r3
 8001d3a:	4315      	orrs	r5, r2
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	2700      	movs	r7, #0
 8001d40:	402b      	ands	r3, r5
 8001d42:	e7d0      	b.n	8001ce6 <__aeabi_dsub+0x34a>
 8001d44:	08c0      	lsrs	r0, r0, #3
 8001d46:	0762      	lsls	r2, r4, #29
 8001d48:	4302      	orrs	r2, r0
 8001d4a:	08e4      	lsrs	r4, r4, #3
 8001d4c:	e737      	b.n	8001bbe <__aeabi_dsub+0x222>
 8001d4e:	08ea      	lsrs	r2, r5, #3
 8001d50:	0763      	lsls	r3, r4, #29
 8001d52:	431a      	orrs	r2, r3
 8001d54:	4bd3      	ldr	r3, [pc, #844]	@ (80020a4 <__aeabi_dsub+0x708>)
 8001d56:	08e4      	lsrs	r4, r4, #3
 8001d58:	429f      	cmp	r7, r3
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x3c2>
 8001d5c:	e72f      	b.n	8001bbe <__aeabi_dsub+0x222>
 8001d5e:	0324      	lsls	r4, r4, #12
 8001d60:	0b25      	lsrs	r5, r4, #12
 8001d62:	057c      	lsls	r4, r7, #21
 8001d64:	0d64      	lsrs	r4, r4, #21
 8001d66:	e6c2      	b.n	8001aee <__aeabi_dsub+0x152>
 8001d68:	46ca      	mov	sl, r9
 8001d6a:	0022      	movs	r2, r4
 8001d6c:	4302      	orrs	r2, r0
 8001d6e:	d158      	bne.n	8001e22 <__aeabi_dsub+0x486>
 8001d70:	4663      	mov	r3, ip
 8001d72:	000e      	movs	r6, r1
 8001d74:	9c02      	ldr	r4, [sp, #8]
 8001d76:	9303      	str	r3, [sp, #12]
 8001d78:	9b03      	ldr	r3, [sp, #12]
 8001d7a:	4657      	mov	r7, sl
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	e7e7      	b.n	8001d50 <__aeabi_dsub+0x3b4>
 8001d80:	4cc9      	ldr	r4, [pc, #804]	@ (80020a8 <__aeabi_dsub+0x70c>)
 8001d82:	1aff      	subs	r7, r7, r3
 8001d84:	4014      	ands	r4, r2
 8001d86:	e692      	b.n	8001aae <__aeabi_dsub+0x112>
 8001d88:	4dc8      	ldr	r5, [pc, #800]	@ (80020ac <__aeabi_dsub+0x710>)
 8001d8a:	1c7a      	adds	r2, r7, #1
 8001d8c:	422a      	tst	r2, r5
 8001d8e:	d000      	beq.n	8001d92 <__aeabi_dsub+0x3f6>
 8001d90:	e084      	b.n	8001e9c <__aeabi_dsub+0x500>
 8001d92:	0022      	movs	r2, r4
 8001d94:	4302      	orrs	r2, r0
 8001d96:	2f00      	cmp	r7, #0
 8001d98:	d000      	beq.n	8001d9c <__aeabi_dsub+0x400>
 8001d9a:	e0ef      	b.n	8001f7c <__aeabi_dsub+0x5e0>
 8001d9c:	2a00      	cmp	r2, #0
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x406>
 8001da0:	e0e5      	b.n	8001f6e <__aeabi_dsub+0x5d2>
 8001da2:	4662      	mov	r2, ip
 8001da4:	9902      	ldr	r1, [sp, #8]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x410>
 8001daa:	e0c5      	b.n	8001f38 <__aeabi_dsub+0x59c>
 8001dac:	4663      	mov	r3, ip
 8001dae:	18c5      	adds	r5, r0, r3
 8001db0:	468c      	mov	ip, r1
 8001db2:	4285      	cmp	r5, r0
 8001db4:	4180      	sbcs	r0, r0
 8001db6:	4464      	add	r4, ip
 8001db8:	4240      	negs	r0, r0
 8001dba:	1824      	adds	r4, r4, r0
 8001dbc:	0223      	lsls	r3, r4, #8
 8001dbe:	d502      	bpl.n	8001dc6 <__aeabi_dsub+0x42a>
 8001dc0:	4bb9      	ldr	r3, [pc, #740]	@ (80020a8 <__aeabi_dsub+0x70c>)
 8001dc2:	3701      	adds	r7, #1
 8001dc4:	401c      	ands	r4, r3
 8001dc6:	46ba      	mov	sl, r7
 8001dc8:	9503      	str	r5, [sp, #12]
 8001dca:	e7d5      	b.n	8001d78 <__aeabi_dsub+0x3dc>
 8001dcc:	4662      	mov	r2, ip
 8001dce:	1a85      	subs	r5, r0, r2
 8001dd0:	42a8      	cmp	r0, r5
 8001dd2:	4192      	sbcs	r2, r2
 8001dd4:	4252      	negs	r2, r2
 8001dd6:	4691      	mov	r9, r2
 8001dd8:	9b02      	ldr	r3, [sp, #8]
 8001dda:	1ae3      	subs	r3, r4, r3
 8001ddc:	001a      	movs	r2, r3
 8001dde:	464b      	mov	r3, r9
 8001de0:	1ad2      	subs	r2, r2, r3
 8001de2:	0013      	movs	r3, r2
 8001de4:	4691      	mov	r9, r2
 8001de6:	021a      	lsls	r2, r3, #8
 8001de8:	d46c      	bmi.n	8001ec4 <__aeabi_dsub+0x528>
 8001dea:	464a      	mov	r2, r9
 8001dec:	464c      	mov	r4, r9
 8001dee:	432a      	orrs	r2, r5
 8001df0:	d000      	beq.n	8001df4 <__aeabi_dsub+0x458>
 8001df2:	e63a      	b.n	8001a6a <__aeabi_dsub+0xce>
 8001df4:	2600      	movs	r6, #0
 8001df6:	2400      	movs	r4, #0
 8001df8:	2500      	movs	r5, #0
 8001dfa:	e678      	b.n	8001aee <__aeabi_dsub+0x152>
 8001dfc:	9902      	ldr	r1, [sp, #8]
 8001dfe:	4653      	mov	r3, sl
 8001e00:	000d      	movs	r5, r1
 8001e02:	3a20      	subs	r2, #32
 8001e04:	40d5      	lsrs	r5, r2
 8001e06:	2b20      	cmp	r3, #32
 8001e08:	d006      	beq.n	8001e18 <__aeabi_dsub+0x47c>
 8001e0a:	2240      	movs	r2, #64	@ 0x40
 8001e0c:	1ad2      	subs	r2, r2, r3
 8001e0e:	000b      	movs	r3, r1
 8001e10:	4093      	lsls	r3, r2
 8001e12:	4662      	mov	r2, ip
 8001e14:	431a      	orrs	r2, r3
 8001e16:	4693      	mov	fp, r2
 8001e18:	465b      	mov	r3, fp
 8001e1a:	1e5a      	subs	r2, r3, #1
 8001e1c:	4193      	sbcs	r3, r2
 8001e1e:	431d      	orrs	r5, r3
 8001e20:	e619      	b.n	8001a56 <__aeabi_dsub+0xba>
 8001e22:	4653      	mov	r3, sl
 8001e24:	1e5a      	subs	r2, r3, #1
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x490>
 8001e2a:	e0c6      	b.n	8001fba <__aeabi_dsub+0x61e>
 8001e2c:	4e9d      	ldr	r6, [pc, #628]	@ (80020a4 <__aeabi_dsub+0x708>)
 8001e2e:	45b2      	cmp	sl, r6
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x498>
 8001e32:	e6bd      	b.n	8001bb0 <__aeabi_dsub+0x214>
 8001e34:	4688      	mov	r8, r1
 8001e36:	000e      	movs	r6, r1
 8001e38:	2501      	movs	r5, #1
 8001e3a:	2a38      	cmp	r2, #56	@ 0x38
 8001e3c:	dc10      	bgt.n	8001e60 <__aeabi_dsub+0x4c4>
 8001e3e:	2a1f      	cmp	r2, #31
 8001e40:	dc7f      	bgt.n	8001f42 <__aeabi_dsub+0x5a6>
 8001e42:	2120      	movs	r1, #32
 8001e44:	0025      	movs	r5, r4
 8001e46:	1a89      	subs	r1, r1, r2
 8001e48:	0007      	movs	r7, r0
 8001e4a:	4088      	lsls	r0, r1
 8001e4c:	408d      	lsls	r5, r1
 8001e4e:	40d7      	lsrs	r7, r2
 8001e50:	40d4      	lsrs	r4, r2
 8001e52:	1e41      	subs	r1, r0, #1
 8001e54:	4188      	sbcs	r0, r1
 8001e56:	9b02      	ldr	r3, [sp, #8]
 8001e58:	433d      	orrs	r5, r7
 8001e5a:	1b1b      	subs	r3, r3, r4
 8001e5c:	4305      	orrs	r5, r0
 8001e5e:	9302      	str	r3, [sp, #8]
 8001e60:	4662      	mov	r2, ip
 8001e62:	1b55      	subs	r5, r2, r5
 8001e64:	45ac      	cmp	ip, r5
 8001e66:	4192      	sbcs	r2, r2
 8001e68:	9b02      	ldr	r3, [sp, #8]
 8001e6a:	4252      	negs	r2, r2
 8001e6c:	464f      	mov	r7, r9
 8001e6e:	1a9c      	subs	r4, r3, r2
 8001e70:	e5f6      	b.n	8001a60 <__aeabi_dsub+0xc4>
 8001e72:	2d00      	cmp	r5, #0
 8001e74:	d000      	beq.n	8001e78 <__aeabi_dsub+0x4dc>
 8001e76:	e0b7      	b.n	8001fe8 <__aeabi_dsub+0x64c>
 8001e78:	2a00      	cmp	r2, #0
 8001e7a:	d100      	bne.n	8001e7e <__aeabi_dsub+0x4e2>
 8001e7c:	e0f0      	b.n	8002060 <__aeabi_dsub+0x6c4>
 8001e7e:	2601      	movs	r6, #1
 8001e80:	400e      	ands	r6, r1
 8001e82:	4663      	mov	r3, ip
 8001e84:	9802      	ldr	r0, [sp, #8]
 8001e86:	08d9      	lsrs	r1, r3, #3
 8001e88:	0742      	lsls	r2, r0, #29
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	08c4      	lsrs	r4, r0, #3
 8001e8e:	e696      	b.n	8001bbe <__aeabi_dsub+0x222>
 8001e90:	4c85      	ldr	r4, [pc, #532]	@ (80020a8 <__aeabi_dsub+0x70c>)
 8001e92:	1aff      	subs	r7, r7, r3
 8001e94:	4014      	ands	r4, r2
 8001e96:	0762      	lsls	r2, r4, #29
 8001e98:	08e4      	lsrs	r4, r4, #3
 8001e9a:	e760      	b.n	8001d5e <__aeabi_dsub+0x3c2>
 8001e9c:	4981      	ldr	r1, [pc, #516]	@ (80020a4 <__aeabi_dsub+0x708>)
 8001e9e:	428a      	cmp	r2, r1
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x508>
 8001ea2:	e0c9      	b.n	8002038 <__aeabi_dsub+0x69c>
 8001ea4:	4663      	mov	r3, ip
 8001ea6:	18c1      	adds	r1, r0, r3
 8001ea8:	4281      	cmp	r1, r0
 8001eaa:	4180      	sbcs	r0, r0
 8001eac:	9b02      	ldr	r3, [sp, #8]
 8001eae:	4240      	negs	r0, r0
 8001eb0:	18e3      	adds	r3, r4, r3
 8001eb2:	181b      	adds	r3, r3, r0
 8001eb4:	07dd      	lsls	r5, r3, #31
 8001eb6:	085c      	lsrs	r4, r3, #1
 8001eb8:	2307      	movs	r3, #7
 8001eba:	0849      	lsrs	r1, r1, #1
 8001ebc:	430d      	orrs	r5, r1
 8001ebe:	0017      	movs	r7, r2
 8001ec0:	402b      	ands	r3, r5
 8001ec2:	e710      	b.n	8001ce6 <__aeabi_dsub+0x34a>
 8001ec4:	4663      	mov	r3, ip
 8001ec6:	1a1d      	subs	r5, r3, r0
 8001ec8:	45ac      	cmp	ip, r5
 8001eca:	4192      	sbcs	r2, r2
 8001ecc:	2601      	movs	r6, #1
 8001ece:	9b02      	ldr	r3, [sp, #8]
 8001ed0:	4252      	negs	r2, r2
 8001ed2:	1b1c      	subs	r4, r3, r4
 8001ed4:	4688      	mov	r8, r1
 8001ed6:	1aa4      	subs	r4, r4, r2
 8001ed8:	400e      	ands	r6, r1
 8001eda:	e5c6      	b.n	8001a6a <__aeabi_dsub+0xce>
 8001edc:	4663      	mov	r3, ip
 8001ede:	18c5      	adds	r5, r0, r3
 8001ee0:	9b02      	ldr	r3, [sp, #8]
 8001ee2:	4285      	cmp	r5, r0
 8001ee4:	4180      	sbcs	r0, r0
 8001ee6:	469c      	mov	ip, r3
 8001ee8:	4240      	negs	r0, r0
 8001eea:	4464      	add	r4, ip
 8001eec:	1824      	adds	r4, r4, r0
 8001eee:	2701      	movs	r7, #1
 8001ef0:	0223      	lsls	r3, r4, #8
 8001ef2:	d400      	bmi.n	8001ef6 <__aeabi_dsub+0x55a>
 8001ef4:	e6f5      	b.n	8001ce2 <__aeabi_dsub+0x346>
 8001ef6:	2702      	movs	r7, #2
 8001ef8:	e641      	b.n	8001b7e <__aeabi_dsub+0x1e2>
 8001efa:	4663      	mov	r3, ip
 8001efc:	1ac5      	subs	r5, r0, r3
 8001efe:	42a8      	cmp	r0, r5
 8001f00:	4180      	sbcs	r0, r0
 8001f02:	9b02      	ldr	r3, [sp, #8]
 8001f04:	4240      	negs	r0, r0
 8001f06:	1ae4      	subs	r4, r4, r3
 8001f08:	2701      	movs	r7, #1
 8001f0a:	1a24      	subs	r4, r4, r0
 8001f0c:	e5a8      	b.n	8001a60 <__aeabi_dsub+0xc4>
 8001f0e:	9d02      	ldr	r5, [sp, #8]
 8001f10:	4652      	mov	r2, sl
 8001f12:	002b      	movs	r3, r5
 8001f14:	3a20      	subs	r2, #32
 8001f16:	40d3      	lsrs	r3, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	4653      	mov	r3, sl
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d006      	beq.n	8001f2e <__aeabi_dsub+0x592>
 8001f20:	2240      	movs	r2, #64	@ 0x40
 8001f22:	1ad2      	subs	r2, r2, r3
 8001f24:	002b      	movs	r3, r5
 8001f26:	4093      	lsls	r3, r2
 8001f28:	4662      	mov	r2, ip
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	4693      	mov	fp, r2
 8001f2e:	465d      	mov	r5, fp
 8001f30:	1e6b      	subs	r3, r5, #1
 8001f32:	419d      	sbcs	r5, r3
 8001f34:	430d      	orrs	r5, r1
 8001f36:	e615      	b.n	8001b64 <__aeabi_dsub+0x1c8>
 8001f38:	0762      	lsls	r2, r4, #29
 8001f3a:	08c0      	lsrs	r0, r0, #3
 8001f3c:	4302      	orrs	r2, r0
 8001f3e:	08e4      	lsrs	r4, r4, #3
 8001f40:	e70d      	b.n	8001d5e <__aeabi_dsub+0x3c2>
 8001f42:	0011      	movs	r1, r2
 8001f44:	0027      	movs	r7, r4
 8001f46:	3920      	subs	r1, #32
 8001f48:	40cf      	lsrs	r7, r1
 8001f4a:	2a20      	cmp	r2, #32
 8001f4c:	d005      	beq.n	8001f5a <__aeabi_dsub+0x5be>
 8001f4e:	2140      	movs	r1, #64	@ 0x40
 8001f50:	1a8a      	subs	r2, r1, r2
 8001f52:	4094      	lsls	r4, r2
 8001f54:	0025      	movs	r5, r4
 8001f56:	4305      	orrs	r5, r0
 8001f58:	9503      	str	r5, [sp, #12]
 8001f5a:	9d03      	ldr	r5, [sp, #12]
 8001f5c:	1e6a      	subs	r2, r5, #1
 8001f5e:	4195      	sbcs	r5, r2
 8001f60:	433d      	orrs	r5, r7
 8001f62:	e77d      	b.n	8001e60 <__aeabi_dsub+0x4c4>
 8001f64:	2a00      	cmp	r2, #0
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x5ce>
 8001f68:	e744      	b.n	8001df4 <__aeabi_dsub+0x458>
 8001f6a:	2601      	movs	r6, #1
 8001f6c:	400e      	ands	r6, r1
 8001f6e:	4663      	mov	r3, ip
 8001f70:	08d9      	lsrs	r1, r3, #3
 8001f72:	9b02      	ldr	r3, [sp, #8]
 8001f74:	075a      	lsls	r2, r3, #29
 8001f76:	430a      	orrs	r2, r1
 8001f78:	08dc      	lsrs	r4, r3, #3
 8001f7a:	e6f0      	b.n	8001d5e <__aeabi_dsub+0x3c2>
 8001f7c:	2a00      	cmp	r2, #0
 8001f7e:	d028      	beq.n	8001fd2 <__aeabi_dsub+0x636>
 8001f80:	4662      	mov	r2, ip
 8001f82:	9f02      	ldr	r7, [sp, #8]
 8001f84:	08c0      	lsrs	r0, r0, #3
 8001f86:	433a      	orrs	r2, r7
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dsub+0x5f0>
 8001f8a:	e6dc      	b.n	8001d46 <__aeabi_dsub+0x3aa>
 8001f8c:	0762      	lsls	r2, r4, #29
 8001f8e:	4310      	orrs	r0, r2
 8001f90:	2280      	movs	r2, #128	@ 0x80
 8001f92:	08e4      	lsrs	r4, r4, #3
 8001f94:	0312      	lsls	r2, r2, #12
 8001f96:	4214      	tst	r4, r2
 8001f98:	d009      	beq.n	8001fae <__aeabi_dsub+0x612>
 8001f9a:	08fd      	lsrs	r5, r7, #3
 8001f9c:	4215      	tst	r5, r2
 8001f9e:	d106      	bne.n	8001fae <__aeabi_dsub+0x612>
 8001fa0:	4663      	mov	r3, ip
 8001fa2:	2601      	movs	r6, #1
 8001fa4:	002c      	movs	r4, r5
 8001fa6:	08d8      	lsrs	r0, r3, #3
 8001fa8:	077b      	lsls	r3, r7, #29
 8001faa:	4318      	orrs	r0, r3
 8001fac:	400e      	ands	r6, r1
 8001fae:	0f42      	lsrs	r2, r0, #29
 8001fb0:	00c0      	lsls	r0, r0, #3
 8001fb2:	08c0      	lsrs	r0, r0, #3
 8001fb4:	0752      	lsls	r2, r2, #29
 8001fb6:	4302      	orrs	r2, r0
 8001fb8:	e601      	b.n	8001bbe <__aeabi_dsub+0x222>
 8001fba:	4663      	mov	r3, ip
 8001fbc:	1a1d      	subs	r5, r3, r0
 8001fbe:	45ac      	cmp	ip, r5
 8001fc0:	4192      	sbcs	r2, r2
 8001fc2:	9b02      	ldr	r3, [sp, #8]
 8001fc4:	4252      	negs	r2, r2
 8001fc6:	1b1c      	subs	r4, r3, r4
 8001fc8:	000e      	movs	r6, r1
 8001fca:	4688      	mov	r8, r1
 8001fcc:	2701      	movs	r7, #1
 8001fce:	1aa4      	subs	r4, r4, r2
 8001fd0:	e546      	b.n	8001a60 <__aeabi_dsub+0xc4>
 8001fd2:	4663      	mov	r3, ip
 8001fd4:	08d9      	lsrs	r1, r3, #3
 8001fd6:	9b02      	ldr	r3, [sp, #8]
 8001fd8:	075a      	lsls	r2, r3, #29
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	08dc      	lsrs	r4, r3, #3
 8001fde:	e5ee      	b.n	8001bbe <__aeabi_dsub+0x222>
 8001fe0:	4663      	mov	r3, ip
 8001fe2:	9c02      	ldr	r4, [sp, #8]
 8001fe4:	9303      	str	r3, [sp, #12]
 8001fe6:	e6c7      	b.n	8001d78 <__aeabi_dsub+0x3dc>
 8001fe8:	08c0      	lsrs	r0, r0, #3
 8001fea:	2a00      	cmp	r2, #0
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x654>
 8001fee:	e6aa      	b.n	8001d46 <__aeabi_dsub+0x3aa>
 8001ff0:	0762      	lsls	r2, r4, #29
 8001ff2:	4310      	orrs	r0, r2
 8001ff4:	2280      	movs	r2, #128	@ 0x80
 8001ff6:	08e4      	lsrs	r4, r4, #3
 8001ff8:	0312      	lsls	r2, r2, #12
 8001ffa:	4214      	tst	r4, r2
 8001ffc:	d0d7      	beq.n	8001fae <__aeabi_dsub+0x612>
 8001ffe:	9f02      	ldr	r7, [sp, #8]
 8002000:	08fd      	lsrs	r5, r7, #3
 8002002:	4215      	tst	r5, r2
 8002004:	d1d3      	bne.n	8001fae <__aeabi_dsub+0x612>
 8002006:	4663      	mov	r3, ip
 8002008:	2601      	movs	r6, #1
 800200a:	08d8      	lsrs	r0, r3, #3
 800200c:	077b      	lsls	r3, r7, #29
 800200e:	002c      	movs	r4, r5
 8002010:	4318      	orrs	r0, r3
 8002012:	400e      	ands	r6, r1
 8002014:	e7cb      	b.n	8001fae <__aeabi_dsub+0x612>
 8002016:	000a      	movs	r2, r1
 8002018:	0027      	movs	r7, r4
 800201a:	3a20      	subs	r2, #32
 800201c:	40d7      	lsrs	r7, r2
 800201e:	2920      	cmp	r1, #32
 8002020:	d005      	beq.n	800202e <__aeabi_dsub+0x692>
 8002022:	2240      	movs	r2, #64	@ 0x40
 8002024:	1a52      	subs	r2, r2, r1
 8002026:	4094      	lsls	r4, r2
 8002028:	0025      	movs	r5, r4
 800202a:	4305      	orrs	r5, r0
 800202c:	9503      	str	r5, [sp, #12]
 800202e:	9d03      	ldr	r5, [sp, #12]
 8002030:	1e6a      	subs	r2, r5, #1
 8002032:	4195      	sbcs	r5, r2
 8002034:	432f      	orrs	r7, r5
 8002036:	e610      	b.n	8001c5a <__aeabi_dsub+0x2be>
 8002038:	0014      	movs	r4, r2
 800203a:	2500      	movs	r5, #0
 800203c:	2200      	movs	r2, #0
 800203e:	e556      	b.n	8001aee <__aeabi_dsub+0x152>
 8002040:	9b02      	ldr	r3, [sp, #8]
 8002042:	4460      	add	r0, ip
 8002044:	4699      	mov	r9, r3
 8002046:	4560      	cmp	r0, ip
 8002048:	4192      	sbcs	r2, r2
 800204a:	444c      	add	r4, r9
 800204c:	4252      	negs	r2, r2
 800204e:	0005      	movs	r5, r0
 8002050:	18a4      	adds	r4, r4, r2
 8002052:	e74c      	b.n	8001eee <__aeabi_dsub+0x552>
 8002054:	001a      	movs	r2, r3
 8002056:	001c      	movs	r4, r3
 8002058:	432a      	orrs	r2, r5
 800205a:	d000      	beq.n	800205e <__aeabi_dsub+0x6c2>
 800205c:	e6b3      	b.n	8001dc6 <__aeabi_dsub+0x42a>
 800205e:	e6c9      	b.n	8001df4 <__aeabi_dsub+0x458>
 8002060:	2480      	movs	r4, #128	@ 0x80
 8002062:	2600      	movs	r6, #0
 8002064:	0324      	lsls	r4, r4, #12
 8002066:	e5ae      	b.n	8001bc6 <__aeabi_dsub+0x22a>
 8002068:	2120      	movs	r1, #32
 800206a:	2500      	movs	r5, #0
 800206c:	1a09      	subs	r1, r1, r0
 800206e:	e517      	b.n	8001aa0 <__aeabi_dsub+0x104>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	4c0b      	ldr	r4, [pc, #44]	@ (80020a4 <__aeabi_dsub+0x708>)
 8002076:	e53a      	b.n	8001aee <__aeabi_dsub+0x152>
 8002078:	2d00      	cmp	r5, #0
 800207a:	d100      	bne.n	800207e <__aeabi_dsub+0x6e2>
 800207c:	e5f6      	b.n	8001c6c <__aeabi_dsub+0x2d0>
 800207e:	464b      	mov	r3, r9
 8002080:	1bda      	subs	r2, r3, r7
 8002082:	4692      	mov	sl, r2
 8002084:	2f00      	cmp	r7, #0
 8002086:	d100      	bne.n	800208a <__aeabi_dsub+0x6ee>
 8002088:	e66f      	b.n	8001d6a <__aeabi_dsub+0x3ce>
 800208a:	2a38      	cmp	r2, #56	@ 0x38
 800208c:	dc05      	bgt.n	800209a <__aeabi_dsub+0x6fe>
 800208e:	2680      	movs	r6, #128	@ 0x80
 8002090:	0436      	lsls	r6, r6, #16
 8002092:	4334      	orrs	r4, r6
 8002094:	4688      	mov	r8, r1
 8002096:	000e      	movs	r6, r1
 8002098:	e6d1      	b.n	8001e3e <__aeabi_dsub+0x4a2>
 800209a:	4688      	mov	r8, r1
 800209c:	000e      	movs	r6, r1
 800209e:	2501      	movs	r5, #1
 80020a0:	e6de      	b.n	8001e60 <__aeabi_dsub+0x4c4>
 80020a2:	46c0      	nop			@ (mov r8, r8)
 80020a4:	000007ff 	.word	0x000007ff
 80020a8:	ff7fffff 	.word	0xff7fffff
 80020ac:	000007fe 	.word	0x000007fe
 80020b0:	2d00      	cmp	r5, #0
 80020b2:	d100      	bne.n	80020b6 <__aeabi_dsub+0x71a>
 80020b4:	e668      	b.n	8001d88 <__aeabi_dsub+0x3ec>
 80020b6:	464b      	mov	r3, r9
 80020b8:	1bd9      	subs	r1, r3, r7
 80020ba:	2f00      	cmp	r7, #0
 80020bc:	d101      	bne.n	80020c2 <__aeabi_dsub+0x726>
 80020be:	468a      	mov	sl, r1
 80020c0:	e5a7      	b.n	8001c12 <__aeabi_dsub+0x276>
 80020c2:	2701      	movs	r7, #1
 80020c4:	2938      	cmp	r1, #56	@ 0x38
 80020c6:	dd00      	ble.n	80020ca <__aeabi_dsub+0x72e>
 80020c8:	e5c7      	b.n	8001c5a <__aeabi_dsub+0x2be>
 80020ca:	2280      	movs	r2, #128	@ 0x80
 80020cc:	0412      	lsls	r2, r2, #16
 80020ce:	4314      	orrs	r4, r2
 80020d0:	e5af      	b.n	8001c32 <__aeabi_dsub+0x296>
 80020d2:	46c0      	nop			@ (mov r8, r8)

080020d4 <__aeabi_d2iz>:
 80020d4:	000b      	movs	r3, r1
 80020d6:	0002      	movs	r2, r0
 80020d8:	b570      	push	{r4, r5, r6, lr}
 80020da:	4d16      	ldr	r5, [pc, #88]	@ (8002134 <__aeabi_d2iz+0x60>)
 80020dc:	030c      	lsls	r4, r1, #12
 80020de:	b082      	sub	sp, #8
 80020e0:	0049      	lsls	r1, r1, #1
 80020e2:	2000      	movs	r0, #0
 80020e4:	9200      	str	r2, [sp, #0]
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	0b24      	lsrs	r4, r4, #12
 80020ea:	0d49      	lsrs	r1, r1, #21
 80020ec:	0fde      	lsrs	r6, r3, #31
 80020ee:	42a9      	cmp	r1, r5
 80020f0:	dd04      	ble.n	80020fc <__aeabi_d2iz+0x28>
 80020f2:	4811      	ldr	r0, [pc, #68]	@ (8002138 <__aeabi_d2iz+0x64>)
 80020f4:	4281      	cmp	r1, r0
 80020f6:	dd03      	ble.n	8002100 <__aeabi_d2iz+0x2c>
 80020f8:	4b10      	ldr	r3, [pc, #64]	@ (800213c <__aeabi_d2iz+0x68>)
 80020fa:	18f0      	adds	r0, r6, r3
 80020fc:	b002      	add	sp, #8
 80020fe:	bd70      	pop	{r4, r5, r6, pc}
 8002100:	2080      	movs	r0, #128	@ 0x80
 8002102:	0340      	lsls	r0, r0, #13
 8002104:	4320      	orrs	r0, r4
 8002106:	4c0e      	ldr	r4, [pc, #56]	@ (8002140 <__aeabi_d2iz+0x6c>)
 8002108:	1a64      	subs	r4, r4, r1
 800210a:	2c1f      	cmp	r4, #31
 800210c:	dd08      	ble.n	8002120 <__aeabi_d2iz+0x4c>
 800210e:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <__aeabi_d2iz+0x70>)
 8002110:	1a5b      	subs	r3, r3, r1
 8002112:	40d8      	lsrs	r0, r3
 8002114:	0003      	movs	r3, r0
 8002116:	4258      	negs	r0, r3
 8002118:	2e00      	cmp	r6, #0
 800211a:	d1ef      	bne.n	80020fc <__aeabi_d2iz+0x28>
 800211c:	0018      	movs	r0, r3
 800211e:	e7ed      	b.n	80020fc <__aeabi_d2iz+0x28>
 8002120:	4b09      	ldr	r3, [pc, #36]	@ (8002148 <__aeabi_d2iz+0x74>)
 8002122:	9a00      	ldr	r2, [sp, #0]
 8002124:	469c      	mov	ip, r3
 8002126:	0003      	movs	r3, r0
 8002128:	4461      	add	r1, ip
 800212a:	408b      	lsls	r3, r1
 800212c:	40e2      	lsrs	r2, r4
 800212e:	4313      	orrs	r3, r2
 8002130:	e7f1      	b.n	8002116 <__aeabi_d2iz+0x42>
 8002132:	46c0      	nop			@ (mov r8, r8)
 8002134:	000003fe 	.word	0x000003fe
 8002138:	0000041d 	.word	0x0000041d
 800213c:	7fffffff 	.word	0x7fffffff
 8002140:	00000433 	.word	0x00000433
 8002144:	00000413 	.word	0x00000413
 8002148:	fffffbed 	.word	0xfffffbed

0800214c <__aeabi_f2d>:
 800214c:	b570      	push	{r4, r5, r6, lr}
 800214e:	0242      	lsls	r2, r0, #9
 8002150:	0043      	lsls	r3, r0, #1
 8002152:	0fc4      	lsrs	r4, r0, #31
 8002154:	20fe      	movs	r0, #254	@ 0xfe
 8002156:	0e1b      	lsrs	r3, r3, #24
 8002158:	1c59      	adds	r1, r3, #1
 800215a:	0a55      	lsrs	r5, r2, #9
 800215c:	4208      	tst	r0, r1
 800215e:	d00c      	beq.n	800217a <__aeabi_f2d+0x2e>
 8002160:	21e0      	movs	r1, #224	@ 0xe0
 8002162:	0089      	lsls	r1, r1, #2
 8002164:	468c      	mov	ip, r1
 8002166:	076d      	lsls	r5, r5, #29
 8002168:	0b12      	lsrs	r2, r2, #12
 800216a:	4463      	add	r3, ip
 800216c:	051b      	lsls	r3, r3, #20
 800216e:	4313      	orrs	r3, r2
 8002170:	07e4      	lsls	r4, r4, #31
 8002172:	4323      	orrs	r3, r4
 8002174:	0028      	movs	r0, r5
 8002176:	0019      	movs	r1, r3
 8002178:	bd70      	pop	{r4, r5, r6, pc}
 800217a:	2b00      	cmp	r3, #0
 800217c:	d114      	bne.n	80021a8 <__aeabi_f2d+0x5c>
 800217e:	2d00      	cmp	r5, #0
 8002180:	d01b      	beq.n	80021ba <__aeabi_f2d+0x6e>
 8002182:	0028      	movs	r0, r5
 8002184:	f000 f82a 	bl	80021dc <__clzsi2>
 8002188:	280a      	cmp	r0, #10
 800218a:	dc1c      	bgt.n	80021c6 <__aeabi_f2d+0x7a>
 800218c:	230b      	movs	r3, #11
 800218e:	002a      	movs	r2, r5
 8002190:	1a1b      	subs	r3, r3, r0
 8002192:	40da      	lsrs	r2, r3
 8002194:	0003      	movs	r3, r0
 8002196:	3315      	adds	r3, #21
 8002198:	409d      	lsls	r5, r3
 800219a:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <__aeabi_f2d+0x88>)
 800219c:	0312      	lsls	r2, r2, #12
 800219e:	1a1b      	subs	r3, r3, r0
 80021a0:	055b      	lsls	r3, r3, #21
 80021a2:	0b12      	lsrs	r2, r2, #12
 80021a4:	0d5b      	lsrs	r3, r3, #21
 80021a6:	e7e1      	b.n	800216c <__aeabi_f2d+0x20>
 80021a8:	2d00      	cmp	r5, #0
 80021aa:	d009      	beq.n	80021c0 <__aeabi_f2d+0x74>
 80021ac:	0b13      	lsrs	r3, r2, #12
 80021ae:	2280      	movs	r2, #128	@ 0x80
 80021b0:	0312      	lsls	r2, r2, #12
 80021b2:	431a      	orrs	r2, r3
 80021b4:	076d      	lsls	r5, r5, #29
 80021b6:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <__aeabi_f2d+0x8c>)
 80021b8:	e7d8      	b.n	800216c <__aeabi_f2d+0x20>
 80021ba:	2300      	movs	r3, #0
 80021bc:	2200      	movs	r2, #0
 80021be:	e7d5      	b.n	800216c <__aeabi_f2d+0x20>
 80021c0:	2200      	movs	r2, #0
 80021c2:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <__aeabi_f2d+0x8c>)
 80021c4:	e7d2      	b.n	800216c <__aeabi_f2d+0x20>
 80021c6:	0003      	movs	r3, r0
 80021c8:	002a      	movs	r2, r5
 80021ca:	3b0b      	subs	r3, #11
 80021cc:	409a      	lsls	r2, r3
 80021ce:	2500      	movs	r5, #0
 80021d0:	e7e3      	b.n	800219a <__aeabi_f2d+0x4e>
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	00000389 	.word	0x00000389
 80021d8:	000007ff 	.word	0x000007ff

080021dc <__clzsi2>:
 80021dc:	211c      	movs	r1, #28
 80021de:	2301      	movs	r3, #1
 80021e0:	041b      	lsls	r3, r3, #16
 80021e2:	4298      	cmp	r0, r3
 80021e4:	d301      	bcc.n	80021ea <__clzsi2+0xe>
 80021e6:	0c00      	lsrs	r0, r0, #16
 80021e8:	3910      	subs	r1, #16
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	4298      	cmp	r0, r3
 80021ee:	d301      	bcc.n	80021f4 <__clzsi2+0x18>
 80021f0:	0a00      	lsrs	r0, r0, #8
 80021f2:	3908      	subs	r1, #8
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	4298      	cmp	r0, r3
 80021f8:	d301      	bcc.n	80021fe <__clzsi2+0x22>
 80021fa:	0900      	lsrs	r0, r0, #4
 80021fc:	3904      	subs	r1, #4
 80021fe:	a202      	add	r2, pc, #8	@ (adr r2, 8002208 <__clzsi2+0x2c>)
 8002200:	5c10      	ldrb	r0, [r2, r0]
 8002202:	1840      	adds	r0, r0, r1
 8002204:	4770      	bx	lr
 8002206:	46c0      	nop			@ (mov r8, r8)
 8002208:	02020304 	.word	0x02020304
 800220c:	01010101 	.word	0x01010101
	...

08002218 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002218:	2301      	movs	r3, #1
 800221a:	4a0a      	ldr	r2, [pc, #40]	@ (8002244 <MX_DMA_Init+0x2c>)
{
 800221c:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800221e:	6b91      	ldr	r1, [r2, #56]	@ 0x38
{
 8002220:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002222:	4319      	orrs	r1, r3
 8002224:	6391      	str	r1, [r2, #56]	@ 0x38
 8002226:	6b92      	ldr	r2, [r2, #56]	@ 0x38

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002228:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800222a:	4013      	ands	r3, r2
 800222c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002232:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002234:	f000 f9d4 	bl	80025e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002238:	2009      	movs	r0, #9
 800223a:	f000 f9fb 	bl	8002634 <HAL_NVIC_EnableIRQ>

}
 800223e:	b003      	add	sp, #12
 8002240:	bd00      	pop	{pc}
 8002242:	46c0      	nop			@ (mov r8, r8)
 8002244:	40021000 	.word	0x40021000

08002248 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002248:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800224a:	2401      	movs	r4, #1
{
 800224c:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224e:	2214      	movs	r2, #20
 8002250:	2100      	movs	r1, #0
 8002252:	a802      	add	r0, sp, #8
 8002254:	f001 ff98 	bl	8004188 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002258:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <MX_GPIO_Init+0x68>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800225a:	25a0      	movs	r5, #160	@ 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800225c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800225e:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002260:	4322      	orrs	r2, r4
 8002262:	635a      	str	r2, [r3, #52]	@ 0x34
 8002264:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002266:	0028      	movs	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002268:	4022      	ands	r2, r4
 800226a:	9200      	str	r2, [sp, #0]
 800226c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	2202      	movs	r2, #2
 8002270:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002272:	4311      	orrs	r1, r2
 8002274:	6359      	str	r1, [r3, #52]	@ 0x34
 8002276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002278:	2170      	movs	r1, #112	@ 0x70
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227a:	401a      	ands	r2, r3
 800227c:	9201      	str	r2, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002280:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002282:	f000 fc29 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|LED1_Pin|LED2_Pin;
 8002286:	2370      	movs	r3, #112	@ 0x70
 8002288:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	0028      	movs	r0, r5
 800228e:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002294:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002296:	f000 fb2d 	bl	80028f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800229a:	2203      	movs	r2, #3
 800229c:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229e:	4805      	ldr	r0, [pc, #20]	@ (80022b4 <MX_GPIO_Init+0x6c>)
 80022a0:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80022a2:	9202      	str	r2, [sp, #8]
 80022a4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a6:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a8:	f000 fb24 	bl	80028f4 <HAL_GPIO_Init>

}
 80022ac:	b009      	add	sp, #36	@ 0x24
 80022ae:	bd30      	pop	{r4, r5, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	50000400 	.word	0x50000400

080022b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80022bc:	f000 f96a 	bl	8002594 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80022c0:	f000 f80b 	bl	80022da <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80022c4:	f7ff ffc0 	bl	8002248 <MX_GPIO_Init>
    MX_DMA_Init();
 80022c8:	f7ff ffa6 	bl	8002218 <MX_DMA_Init>
    MX_SPI1_Init();
 80022cc:	f000 f86e 	bl	80023ac <MX_SPI1_Init>
    /* USER CODE BEGIN 2 */
    setup();
 80022d0:	f001 feec 	bl	80040ac <setup>
    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        loop();
 80022d4:	f001 ff02 	bl	80040dc <loop>
 80022d8:	e7fc      	b.n	80022d4 <main+0x1c>

080022da <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022da:	b590      	push	{r4, r7, lr}
 80022dc:	b093      	sub	sp, #76	@ 0x4c
 80022de:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022e0:	2414      	movs	r4, #20
 80022e2:	193b      	adds	r3, r7, r4
 80022e4:	0018      	movs	r0, r3
 80022e6:	2334      	movs	r3, #52	@ 0x34
 80022e8:	001a      	movs	r2, r3
 80022ea:	2100      	movs	r1, #0
 80022ec:	f001 ff4c 	bl	8004188 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	0018      	movs	r0, r3
 80022f4:	2310      	movs	r3, #16
 80022f6:	001a      	movs	r2, r3
 80022f8:	2100      	movs	r1, #0
 80022fa:	f001 ff45 	bl	8004188 <memset>

    /** Configure the main internal regulator output voltage
    */
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022fe:	2380      	movs	r3, #128	@ 0x80
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	0018      	movs	r0, r3
 8002304:	f000 fbee 	bl	8002ae4 <HAL_PWREx_ControlVoltageScaling>

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002308:	193b      	adds	r3, r7, r4
 800230a:	2202      	movs	r2, #2
 800230c:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800230e:	193b      	adds	r3, r7, r4
 8002310:	2280      	movs	r2, #128	@ 0x80
 8002312:	0052      	lsls	r2, r2, #1
 8002314:	60da      	str	r2, [r3, #12]
    RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002316:	0021      	movs	r1, r4
 8002318:	187b      	adds	r3, r7, r1
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800231e:	187b      	adds	r3, r7, r1
 8002320:	2240      	movs	r2, #64	@ 0x40
 8002322:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002324:	187b      	adds	r3, r7, r1
 8002326:	2202      	movs	r2, #2
 8002328:	61da      	str	r2, [r3, #28]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800232a:	187b      	adds	r3, r7, r1
 800232c:	2202      	movs	r2, #2
 800232e:	621a      	str	r2, [r3, #32]
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002330:	187b      	adds	r3, r7, r1
 8002332:	2210      	movs	r2, #16
 8002334:	625a      	str	r2, [r3, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLN = 25;
 8002336:	187b      	adds	r3, r7, r1
 8002338:	2219      	movs	r2, #25
 800233a:	629a      	str	r2, [r3, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800233c:	187b      	adds	r3, r7, r1
 800233e:	2280      	movs	r2, #128	@ 0x80
 8002340:	0292      	lsls	r2, r2, #10
 8002342:	62da      	str	r2, [r3, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8002344:	187b      	adds	r3, r7, r1
 8002346:	22c0      	movs	r2, #192	@ 0xc0
 8002348:	05d2      	lsls	r2, r2, #23
 800234a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800234c:	187b      	adds	r3, r7, r1
 800234e:	0018      	movs	r0, r3
 8002350:	f000 fbf8 	bl	8002b44 <HAL_RCC_OscConfig>
 8002354:	0003      	movs	r3, r0
 8002356:	1e5a      	subs	r2, r3, #1
 8002358:	4193      	sbcs	r3, r2
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <_Z18SystemClock_Configv+0x8a>
    {
        Error_Handler();
 8002360:	f000 f81d 	bl	800239e <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	2207      	movs	r2, #7
 8002368:	601a      	str	r2, [r3, #0]
                                  |RCC_CLOCKTYPE_PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	2202      	movs	r2, #2
 800236e:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	2200      	movs	r2, #0
 800237a:	60da      	str	r2, [r3, #12]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	2102      	movs	r1, #2
 8002380:	0018      	movs	r0, r3
 8002382:	f000 fe8b 	bl	800309c <HAL_RCC_ClockConfig>
 8002386:	0003      	movs	r3, r0
 8002388:	1e5a      	subs	r2, r3, #1
 800238a:	4193      	sbcs	r3, r2
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <_Z18SystemClock_Configv+0xbc>
    {
        Error_Handler();
 8002392:	f000 f804 	bl	800239e <Error_Handler>
    }
}
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	46bd      	mov	sp, r7
 800239a:	b013      	add	sp, #76	@ 0x4c
 800239c:	bd90      	pop	{r4, r7, pc}

0800239e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a2:	b672      	cpsid	i
}
 80023a4:	46c0      	nop			@ (mov r8, r8)
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	e7fd      	b.n	80023a6 <Error_Handler+0x8>
	...

080023ac <MX_SPI1_Init>:

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023ac:	22e0      	movs	r2, #224	@ 0xe0
  hspi1.Instance = SPI1;
 80023ae:	4811      	ldr	r0, [pc, #68]	@ (80023f4 <MX_SPI1_Init+0x48>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023b0:	00d2      	lsls	r2, r2, #3
{
 80023b2:	b510      	push	{r4, lr}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023b4:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80023b6:	2201      	movs	r2, #1
  hspi1.Instance = SPI1;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <MX_SPI1_Init+0x4c>)
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80023ba:	6142      	str	r2, [r0, #20]
  hspi1.Instance = SPI1;
 80023bc:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023be:	2382      	movs	r3, #130	@ 0x82
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023c0:	2280      	movs	r2, #128	@ 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023c6:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023c8:	0092      	lsls	r2, r2, #2
 80023ca:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023cc:	3ae9      	subs	r2, #233	@ 0xe9
 80023ce:	3aff      	subs	r2, #255	@ 0xff
 80023d0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 80023d2:	3a11      	subs	r2, #17
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023d4:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023d6:	6103      	str	r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023d8:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023da:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023dc:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023de:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023e0:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80023e2:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023e4:	f001 f82c 	bl	8003440 <HAL_SPI_Init>
 80023e8:	2800      	cmp	r0, #0
 80023ea:	d100      	bne.n	80023ee <MX_SPI1_Init+0x42>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023ec:	bd10      	pop	{r4, pc}
    Error_Handler();
 80023ee:	f7ff ffd6 	bl	800239e <Error_Handler>
}
 80023f2:	e7fb      	b.n	80023ec <MX_SPI1_Init+0x40>
 80023f4:	200000f4 	.word	0x200000f4
 80023f8:	40013000 	.word	0x40013000

080023fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023fc:	b530      	push	{r4, r5, lr}
 80023fe:	0004      	movs	r4, r0
 8002400:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002402:	2214      	movs	r2, #20
 8002404:	2100      	movs	r1, #0
 8002406:	a802      	add	r0, sp, #8
 8002408:	f001 febe 	bl	8004188 <memset>
  if(spiHandle->Instance==SPI1)
 800240c:	4b1d      	ldr	r3, [pc, #116]	@ (8002484 <HAL_SPI_MspInit+0x88>)
 800240e:	6822      	ldr	r2, [r4, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002414:	b009      	add	sp, #36	@ 0x24
 8002416:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002418:	2180      	movs	r1, #128	@ 0x80
 800241a:	4b1b      	ldr	r3, [pc, #108]	@ (8002488 <HAL_SPI_MspInit+0x8c>)
 800241c:	0149      	lsls	r1, r1, #5
 800241e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002420:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002422:	430a      	orrs	r2, r1
 8002424:	641a      	str	r2, [r3, #64]	@ 0x40
 8002426:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002428:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 800242a:	400a      	ands	r2, r1
 800242c:	9200      	str	r2, [sp, #0]
 800242e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002430:	2201      	movs	r2, #1
 8002432:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002434:	4311      	orrs	r1, r2
 8002436:	6359      	str	r1, [r3, #52]	@ 0x34
 8002438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243c:	401a      	ands	r2, r3
 800243e:	9201      	str	r2, [sp, #4]
 8002440:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SCK_Pin|DIN_Pin;
 8002442:	2282      	movs	r2, #130	@ 0x82
 8002444:	2302      	movs	r3, #2
 8002446:	9202      	str	r2, [sp, #8]
 8002448:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244a:	f000 fa53 	bl	80028f4 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA1_Channel1;
 800244e:	4d0f      	ldr	r5, [pc, #60]	@ (800248c <HAL_SPI_MspInit+0x90>)
 8002450:	4b0f      	ldr	r3, [pc, #60]	@ (8002490 <HAL_SPI_MspInit+0x94>)
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002452:	2280      	movs	r2, #128	@ 0x80
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8002454:	602b      	str	r3, [r5, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002456:	2311      	movs	r3, #17
 8002458:	606b      	str	r3, [r5, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800245a:	3b01      	subs	r3, #1
 800245c:	60ab      	str	r3, [r5, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800245e:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002460:	0028      	movs	r0, r5
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002462:	60eb      	str	r3, [r5, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002464:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002466:	616b      	str	r3, [r5, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002468:	61ab      	str	r3, [r5, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800246a:	61eb      	str	r3, [r5, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800246c:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800246e:	f000 f927 	bl	80026c0 <HAL_DMA_Init>
 8002472:	2800      	cmp	r0, #0
 8002474:	d102      	bne.n	800247c <HAL_SPI_MspInit+0x80>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002476:	6565      	str	r5, [r4, #84]	@ 0x54
 8002478:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 800247a:	e7cb      	b.n	8002414 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 800247c:	f7ff ff8f 	bl	800239e <Error_Handler>
 8002480:	e7f9      	b.n	8002476 <HAL_SPI_MspInit+0x7a>
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	40013000 	.word	0x40013000
 8002488:	40021000 	.word	0x40021000
 800248c:	20000098 	.word	0x20000098
 8002490:	40020008 	.word	0x40020008

08002494 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002494:	2201      	movs	r2, #1
 8002496:	4b0a      	ldr	r3, [pc, #40]	@ (80024c0 <HAL_MspInit+0x2c>)
{
 8002498:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800249c:	4311      	orrs	r1, r2
 800249e:	6419      	str	r1, [r3, #64]	@ 0x40
 80024a0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80024a2:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a4:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	9200      	str	r2, [sp, #0]
 80024a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024ac:	0549      	lsls	r1, r1, #21
 80024ae:	430a      	orrs	r2, r1
 80024b0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b4:	400b      	ands	r3, r1
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ba:	b002      	add	sp, #8
 80024bc:	4770      	bx	lr
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	40021000 	.word	0x40021000

080024c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024c4:	e7fe      	b.n	80024c4 <NMI_Handler>
 80024c6:	46c0      	nop			@ (mov r8, r8)

080024c8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <HardFault_Handler>
 80024ca:	46c0      	nop			@ (mov r8, r8)

080024cc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80024cc:	4770      	bx	lr
 80024ce:	46c0      	nop			@ (mov r8, r8)

080024d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80024d0:	4770      	bx	lr
 80024d2:	46c0      	nop			@ (mov r8, r8)

080024d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d6:	f000 f871 	bl	80025bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
    task_handler();
 80024da:	f001 fe17 	bl	800410c <task_handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80024de:	bd10      	pop	{r4, pc}

080024e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80024e2:	4802      	ldr	r0, [pc, #8]	@ (80024ec <DMA1_Channel1_IRQHandler+0xc>)
 80024e4:	f000 f9aa 	bl	800283c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024e8:	bd10      	pop	{r4, pc}
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	20000098 	.word	0x20000098

080024f0 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f0:	4770      	bx	lr
 80024f2:	46c0      	nop			@ (mov r8, r8)

080024f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024f4:	480d      	ldr	r0, [pc, #52]	@ (800252c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024f8:	f7ff fffa 	bl	80024f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024fc:	480c      	ldr	r0, [pc, #48]	@ (8002530 <LoopForever+0x6>)
  ldr r1, =_edata
 80024fe:	490d      	ldr	r1, [pc, #52]	@ (8002534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002500:	4a0d      	ldr	r2, [pc, #52]	@ (8002538 <LoopForever+0xe>)
  movs r3, #0
 8002502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002504:	e002      	b.n	800250c <LoopCopyDataInit>

08002506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800250a:	3304      	adds	r3, #4

0800250c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800250c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800250e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002510:	d3f9      	bcc.n	8002506 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002512:	4a0a      	ldr	r2, [pc, #40]	@ (800253c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002514:	4c0a      	ldr	r4, [pc, #40]	@ (8002540 <LoopForever+0x16>)
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002518:	e001      	b.n	800251e <LoopFillZerobss>

0800251a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800251a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800251c:	3204      	adds	r2, #4

0800251e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800251e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002520:	d3fb      	bcc.n	800251a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002522:	f001 fe39 	bl	8004198 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002526:	f7ff fec7 	bl	80022b8 <main>

0800252a <LoopForever>:

LoopForever:
  b LoopForever
 800252a:	e7fe      	b.n	800252a <LoopForever>
  ldr   r0, =_estack
 800252c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002534:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002538:	080042b8 	.word	0x080042b8
  ldr r2, =_sbss
 800253c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002540:	200010c8 	.word	0x200010c8

08002544 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002544:	e7fe      	b.n	8002544 <ADC1_IRQHandler>
	...

08002548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002548:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800254a:	4b0f      	ldr	r3, [pc, #60]	@ (8002588 <HAL_InitTick+0x40>)
{
 800254c:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 800254e:	7819      	ldrb	r1, [r3, #0]
 8002550:	2900      	cmp	r1, #0
 8002552:	d101      	bne.n	8002558 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8002554:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8002556:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002558:	20fa      	movs	r0, #250	@ 0xfa
 800255a:	0080      	lsls	r0, r0, #2
 800255c:	f7fd fdd0 	bl	8000100 <__udivsi3>
 8002560:	4d0a      	ldr	r5, [pc, #40]	@ (800258c <HAL_InitTick+0x44>)
 8002562:	0001      	movs	r1, r0
 8002564:	6828      	ldr	r0, [r5, #0]
 8002566:	f7fd fdcb 	bl	8000100 <__udivsi3>
 800256a:	f000 f86f 	bl	800264c <HAL_SYSTICK_Config>
 800256e:	2800      	cmp	r0, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002572:	2c03      	cmp	r4, #3
 8002574:	d8ee      	bhi.n	8002554 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002576:	3801      	subs	r0, #1
 8002578:	2200      	movs	r2, #0
 800257a:	0021      	movs	r1, r4
 800257c:	f000 f830 	bl	80025e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002580:	4b03      	ldr	r3, [pc, #12]	@ (8002590 <HAL_InitTick+0x48>)
 8002582:	2000      	movs	r0, #0
 8002584:	601c      	str	r4, [r3, #0]
  return status;
 8002586:	e7e6      	b.n	8002556 <HAL_InitTick+0xe>
 8002588:	20000004 	.word	0x20000004
 800258c:	20000000 	.word	0x20000000
 8002590:	20000008 	.word	0x20000008

08002594 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002594:	2380      	movs	r3, #128	@ 0x80
 8002596:	4a08      	ldr	r2, [pc, #32]	@ (80025b8 <HAL_Init+0x24>)
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	6811      	ldr	r1, [r2, #0]
{
 800259c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800259e:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025a0:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a2:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025a4:	f7ff ffd0 	bl	8002548 <HAL_InitTick>
 80025a8:	1e04      	subs	r4, r0, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_Init+0x1e>
    status = HAL_ERROR;
 80025ac:	2401      	movs	r4, #1
}
 80025ae:	0020      	movs	r0, r4
 80025b0:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 80025b2:	f7ff ff6f 	bl	8002494 <HAL_MspInit>
 80025b6:	e7fa      	b.n	80025ae <HAL_Init+0x1a>
 80025b8:	40022000 	.word	0x40022000

080025bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80025bc:	4a03      	ldr	r2, [pc, #12]	@ (80025cc <HAL_IncTick+0x10>)
 80025be:	4b04      	ldr	r3, [pc, #16]	@ (80025d0 <HAL_IncTick+0x14>)
 80025c0:	6811      	ldr	r1, [r2, #0]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	185b      	adds	r3, r3, r1
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	4770      	bx	lr
 80025ca:	46c0      	nop			@ (mov r8, r8)
 80025cc:	20000158 	.word	0x20000158
 80025d0:	20000004 	.word	0x20000004

080025d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80025d4:	4b01      	ldr	r3, [pc, #4]	@ (80025dc <HAL_GetTick+0x8>)
 80025d6:	6818      	ldr	r0, [r3, #0]
}
 80025d8:	4770      	bx	lr
 80025da:	46c0      	nop			@ (mov r8, r8)
 80025dc:	20000158 	.word	0x20000158

080025e0 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025e0:	22ff      	movs	r2, #255	@ 0xff
 80025e2:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e4:	b510      	push	{r4, lr}
 80025e6:	0014      	movs	r4, r2
 80025e8:	4003      	ands	r3, r0
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025ee:	0189      	lsls	r1, r1, #6
 80025f0:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025f2:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025f4:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 80025f6:	2800      	cmp	r0, #0
 80025f8:	db0b      	blt.n	8002612 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025fa:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <HAL_NVIC_SetPriority+0x4c>)
 80025fc:	21c0      	movs	r1, #192	@ 0xc0
 80025fe:	469c      	mov	ip, r3
 8002600:	0880      	lsrs	r0, r0, #2
 8002602:	0080      	lsls	r0, r0, #2
 8002604:	4460      	add	r0, ip
 8002606:	0089      	lsls	r1, r1, #2
 8002608:	5843      	ldr	r3, [r0, r1]
 800260a:	4023      	ands	r3, r4
 800260c:	4313      	orrs	r3, r2
 800260e:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8002610:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002612:	230f      	movs	r3, #15
 8002614:	4906      	ldr	r1, [pc, #24]	@ (8002630 <HAL_NVIC_SetPriority+0x50>)
 8002616:	4003      	ands	r3, r0
 8002618:	468c      	mov	ip, r1
 800261a:	3b08      	subs	r3, #8
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4463      	add	r3, ip
 8002622:	69d9      	ldr	r1, [r3, #28]
 8002624:	400c      	ands	r4, r1
 8002626:	4314      	orrs	r4, r2
 8002628:	61dc      	str	r4, [r3, #28]
 800262a:	e7f1      	b.n	8002610 <HAL_NVIC_SetPriority+0x30>
 800262c:	e000e100 	.word	0xe000e100
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002634:	2800      	cmp	r0, #0
 8002636:	db05      	blt.n	8002644 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002638:	221f      	movs	r2, #31
 800263a:	2301      	movs	r3, #1
 800263c:	4002      	ands	r2, r0
 800263e:	4093      	lsls	r3, r2
 8002640:	4a01      	ldr	r2, [pc, #4]	@ (8002648 <HAL_NVIC_EnableIRQ+0x14>)
 8002642:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002644:	4770      	bx	lr
 8002646:	46c0      	nop			@ (mov r8, r8)
 8002648:	e000e100 	.word	0xe000e100

0800264c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800264c:	2280      	movs	r2, #128	@ 0x80
 800264e:	1e43      	subs	r3, r0, #1
 8002650:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002652:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002654:	4293      	cmp	r3, r2
 8002656:	d20e      	bcs.n	8002676 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002658:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265a:	4a07      	ldr	r2, [pc, #28]	@ (8002678 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800265c:	4807      	ldr	r0, [pc, #28]	@ (800267c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002660:	6a03      	ldr	r3, [r0, #32]
 8002662:	0609      	lsls	r1, r1, #24
 8002664:	021b      	lsls	r3, r3, #8
 8002666:	0a1b      	lsrs	r3, r3, #8
 8002668:	430b      	orrs	r3, r1
 800266a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800266c:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800266e:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002670:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002672:	3307      	adds	r3, #7
 8002674:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8002676:	4770      	bx	lr
 8002678:	e000e010 	.word	0xe000e010
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002680:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002682:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8002684:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 8002686:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002688:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 800268a:	2c00      	cmp	r4, #0
 800268c:	d002      	beq.n	8002694 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800268e:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8002690:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8002692:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002694:	241c      	movs	r4, #28
 8002696:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8002698:	4e08      	ldr	r6, [pc, #32]	@ (80026bc <DMA_SetConfig+0x3c>)
 800269a:	4025      	ands	r5, r4
 800269c:	3c1b      	subs	r4, #27
 800269e:	40ac      	lsls	r4, r5
 80026a0:	6877      	ldr	r7, [r6, #4]
 80026a2:	433c      	orrs	r4, r7
 80026a4:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026a6:	6804      	ldr	r4, [r0, #0]
 80026a8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026aa:	6883      	ldr	r3, [r0, #8]
 80026ac:	2b10      	cmp	r3, #16
 80026ae:	d002      	beq.n	80026b6 <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80026b0:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80026b2:	60e2      	str	r2, [r4, #12]
  }
}
 80026b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 80026b6:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80026b8:	60e1      	str	r1, [r4, #12]
 80026ba:	e7fb      	b.n	80026b4 <DMA_SetConfig+0x34>
 80026bc:	40020000 	.word	0x40020000

080026c0 <HAL_DMA_Init>:
{
 80026c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026c2:	46c6      	mov	lr, r8
 80026c4:	0004      	movs	r4, r0
 80026c6:	b500      	push	{lr}
  if (hdma == NULL)
 80026c8:	2800      	cmp	r0, #0
 80026ca:	d060      	beq.n	800278e <HAL_DMA_Init+0xce>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026cc:	6805      	ldr	r5, [r0, #0]
 80026ce:	4b31      	ldr	r3, [pc, #196]	@ (8002794 <HAL_DMA_Init+0xd4>)
 80026d0:	2114      	movs	r1, #20
 80026d2:	18e8      	adds	r0, r5, r3
 80026d4:	f7fd fd14 	bl	8000100 <__udivsi3>
 80026d8:	0083      	lsls	r3, r0, #2
 80026da:	6423      	str	r3, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80026dc:	2202      	movs	r2, #2
 80026de:	2325      	movs	r3, #37	@ 0x25
 80026e0:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026e2:	682b      	ldr	r3, [r5, #0]
 80026e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002798 <HAL_DMA_Init+0xd8>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80026e6:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026e8:	4013      	ands	r3, r2
 80026ea:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80026ec:	68e3      	ldr	r3, [r4, #12]
 80026ee:	6921      	ldr	r1, [r4, #16]
 80026f0:	4333      	orrs	r3, r6
 80026f2:	430b      	orrs	r3, r1
 80026f4:	6961      	ldr	r1, [r4, #20]
 80026f6:	682a      	ldr	r2, [r5, #0]
 80026f8:	430b      	orrs	r3, r1
 80026fa:	69a1      	ldr	r1, [r4, #24]
 80026fc:	430b      	orrs	r3, r1
 80026fe:	69e1      	ldr	r1, [r4, #28]
 8002700:	430b      	orrs	r3, r1
 8002702:	6a21      	ldr	r1, [r4, #32]
 8002704:	430b      	orrs	r3, r1
 8002706:	4313      	orrs	r3, r2
 8002708:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800270a:	4b24      	ldr	r3, [pc, #144]	@ (800279c <HAL_DMA_Init+0xdc>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800270c:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800270e:	469c      	mov	ip, r3
 8002710:	4460      	add	r0, ip
 8002712:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002714:	20ff      	movs	r0, #255	@ 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002716:	4b22      	ldr	r3, [pc, #136]	@ (80027a0 <HAL_DMA_Init+0xe0>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002718:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800271a:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800271c:	6467      	str	r7, [r4, #68]	@ 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800271e:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002720:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002722:	f7fd fced 	bl	8000100 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002726:	231f      	movs	r3, #31
 8002728:	2201      	movs	r2, #1
 800272a:	4003      	ands	r3, r0
 800272c:	0010      	movs	r0, r2
 800272e:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002730:	2380      	movs	r3, #128	@ 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002732:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002734:	01db      	lsls	r3, r3, #7
 8002736:	429e      	cmp	r6, r3
 8002738:	d01f      	beq.n	800277a <HAL_DMA_Init+0xba>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800273a:	233f      	movs	r3, #63	@ 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800273c:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800273e:	6861      	ldr	r1, [r4, #4]
 8002740:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002742:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002744:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002746:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002748:	2903      	cmp	r1, #3
 800274a:	d81b      	bhi.n	8002784 <HAL_DMA_Init+0xc4>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800274c:	4915      	ldr	r1, [pc, #84]	@ (80027a4 <HAL_DMA_Init+0xe4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800274e:	4816      	ldr	r0, [pc, #88]	@ (80027a8 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002750:	1859      	adds	r1, r3, r1

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002752:	3b01      	subs	r3, #1
 8002754:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002756:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002758:	0089      	lsls	r1, r1, #2
 800275a:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800275c:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800275e:	65a2      	str	r2, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002760:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002762:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002764:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002766:	2225      	movs	r2, #37	@ 0x25
 8002768:	2101      	movs	r1, #1
  return HAL_OK;
 800276a:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276c:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800276e:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8002770:	3a01      	subs	r2, #1
 8002772:	54a3      	strb	r3, [r4, r2]
}
 8002774:	bc80      	pop	{r7}
 8002776:	46b8      	mov	r8, r7
 8002778:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800277a:	2300      	movs	r3, #0
 800277c:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800277e:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002780:	4643      	mov	r3, r8
 8002782:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002788:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800278a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800278c:	e7ea      	b.n	8002764 <HAL_DMA_Init+0xa4>
    return HAL_ERROR;
 800278e:	2001      	movs	r0, #1
 8002790:	e7f0      	b.n	8002774 <HAL_DMA_Init+0xb4>
 8002792:	46c0      	nop			@ (mov r8, r8)
 8002794:	bffdfff8 	.word	0xbffdfff8
 8002798:	ffff800f 	.word	0xffff800f
 800279c:	10008200 	.word	0x10008200
 80027a0:	40020880 	.word	0x40020880
 80027a4:	1000823f 	.word	0x1000823f
 80027a8:	40020940 	.word	0x40020940

080027ac <HAL_DMA_Start_IT>:
{
 80027ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ae:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80027b0:	2024      	movs	r0, #36	@ 0x24
 80027b2:	5c25      	ldrb	r5, [r4, r0]
 80027b4:	2d01      	cmp	r5, #1
 80027b6:	d035      	beq.n	8002824 <HAL_DMA_Start_IT+0x78>
 80027b8:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 80027ba:	2625      	movs	r6, #37	@ 0x25
  __HAL_LOCK(hdma);
 80027bc:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 80027be:	5da5      	ldrb	r5, [r4, r6]
 80027c0:	b2ef      	uxtb	r7, r5
 80027c2:	2d01      	cmp	r5, #1
 80027c4:	d005      	beq.n	80027d2 <HAL_DMA_Start_IT+0x26>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027c6:	2380      	movs	r3, #128	@ 0x80
 80027c8:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80027ca:	2300      	movs	r3, #0
 80027cc:	5423      	strb	r3, [r4, r0]
    status = HAL_ERROR;
 80027ce:	2001      	movs	r0, #1
}
 80027d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80027d2:	3822      	subs	r0, #34	@ 0x22
 80027d4:	55a0      	strb	r0, [r4, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027d6:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80027d8:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027da:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80027dc:	6828      	ldr	r0, [r5, #0]
 80027de:	43b8      	bics	r0, r7
 80027e0:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027e2:	0020      	movs	r0, r4
 80027e4:	f7ff ff4c 	bl	8002680 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80027e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01c      	beq.n	8002828 <HAL_DMA_Start_IT+0x7c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027ee:	220e      	movs	r2, #14
 80027f0:	682b      	ldr	r3, [r5, #0]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80027f6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80027f8:	6813      	ldr	r3, [r2, #0]
 80027fa:	03db      	lsls	r3, r3, #15
 80027fc:	d504      	bpl.n	8002808 <HAL_DMA_Start_IT+0x5c>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80027fe:	2380      	movs	r3, #128	@ 0x80
 8002800:	6811      	ldr	r1, [r2, #0]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	430b      	orrs	r3, r1
 8002806:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002808:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800280a:	2b00      	cmp	r3, #0
 800280c:	d004      	beq.n	8002818 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800280e:	2280      	movs	r2, #128	@ 0x80
 8002810:	6819      	ldr	r1, [r3, #0]
 8002812:	0052      	lsls	r2, r2, #1
 8002814:	430a      	orrs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002818:	2201      	movs	r2, #1
 800281a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800281c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800281e:	4313      	orrs	r3, r2
 8002820:	602b      	str	r3, [r5, #0]
 8002822:	e7d5      	b.n	80027d0 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8002824:	2002      	movs	r0, #2
 8002826:	e7d3      	b.n	80027d0 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002828:	2204      	movs	r2, #4
 800282a:	682b      	ldr	r3, [r5, #0]
 800282c:	4393      	bics	r3, r2
 800282e:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002830:	682b      	ldr	r3, [r5, #0]
 8002832:	3206      	adds	r2, #6
 8002834:	4313      	orrs	r3, r2
 8002836:	602b      	str	r3, [r5, #0]
 8002838:	e7dd      	b.n	80027f6 <HAL_DMA_Start_IT+0x4a>
 800283a:	46c0      	nop			@ (mov r8, r8)

0800283c <HAL_DMA_IRQHandler>:
{
 800283c:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800283e:	211c      	movs	r1, #28
 8002840:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 8002842:	4b2b      	ldr	r3, [pc, #172]	@ (80028f0 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 8002844:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 8002846:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002848:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800284a:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800284c:	400b      	ands	r3, r1
 800284e:	0021      	movs	r1, r4
 8002850:	4099      	lsls	r1, r3
 8002852:	420a      	tst	r2, r1
 8002854:	d010      	beq.n	8002878 <HAL_DMA_IRQHandler+0x3c>
 8002856:	422c      	tst	r4, r5
 8002858:	d00e      	beq.n	8002878 <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800285a:	6833      	ldr	r3, [r6, #0]
 800285c:	069b      	lsls	r3, r3, #26
 800285e:	d402      	bmi.n	8002866 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002860:	6833      	ldr	r3, [r6, #0]
 8002862:	43a3      	bics	r3, r4
 8002864:	6033      	str	r3, [r6, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002866:	4b22      	ldr	r3, [pc, #136]	@ (80028f0 <HAL_DMA_IRQHandler+0xb4>)
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	4311      	orrs	r1, r2
 800286c:	6059      	str	r1, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800286e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002870:	2b00      	cmp	r3, #0
 8002872:	d000      	beq.n	8002876 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8002874:	4798      	blx	r3
}
 8002876:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002878:	2402      	movs	r4, #2
 800287a:	0021      	movs	r1, r4
 800287c:	4099      	lsls	r1, r3
 800287e:	420a      	tst	r2, r1
 8002880:	d017      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x76>
 8002882:	422c      	tst	r4, r5
 8002884:	d015      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002886:	6833      	ldr	r3, [r6, #0]
 8002888:	069b      	lsls	r3, r3, #26
 800288a:	d406      	bmi.n	800289a <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800288c:	220a      	movs	r2, #10
 800288e:	6833      	ldr	r3, [r6, #0]
 8002890:	4393      	bics	r3, r2
 8002892:	6033      	str	r3, [r6, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8002894:	2325      	movs	r3, #37	@ 0x25
 8002896:	3a09      	subs	r2, #9
 8002898:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800289a:	4b15      	ldr	r3, [pc, #84]	@ (80028f0 <HAL_DMA_IRQHandler+0xb4>)
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	4311      	orrs	r1, r2
 80028a0:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2324      	movs	r3, #36	@ 0x24
 80028a6:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 80028a8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0e3      	beq.n	8002876 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80028ae:	4798      	blx	r3
  return;
 80028b0:	e7e1      	b.n	8002876 <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80028b2:	2108      	movs	r1, #8
 80028b4:	000c      	movs	r4, r1
 80028b6:	409c      	lsls	r4, r3
 80028b8:	4222      	tst	r2, r4
 80028ba:	d0dc      	beq.n	8002876 <HAL_DMA_IRQHandler+0x3a>
 80028bc:	4229      	tst	r1, r5
 80028be:	d0da      	beq.n	8002876 <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028c0:	6832      	ldr	r2, [r6, #0]
 80028c2:	3106      	adds	r1, #6
 80028c4:	438a      	bics	r2, r1
 80028c6:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80028c8:	2201      	movs	r2, #1
 80028ca:	0015      	movs	r5, r2
 80028cc:	409d      	lsls	r5, r3
 80028ce:	002b      	movs	r3, r5
 80028d0:	4907      	ldr	r1, [pc, #28]	@ (80028f0 <HAL_DMA_IRQHandler+0xb4>)
 80028d2:	684c      	ldr	r4, [r1, #4]
 80028d4:	4323      	orrs	r3, r4
 80028d6:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80028d8:	2325      	movs	r3, #37	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028da:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80028dc:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80028de:	2200      	movs	r2, #0
 80028e0:	3b01      	subs	r3, #1
 80028e2:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80028e4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0c5      	beq.n	8002876 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80028ea:	4798      	blx	r3
  return;
 80028ec:	e7c3      	b.n	8002876 <HAL_DMA_IRQHandler+0x3a>
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	40020000 	.word	0x40020000

080028f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f6:	46de      	mov	lr, fp
 80028f8:	4657      	mov	r7, sl
 80028fa:	464e      	mov	r6, r9
 80028fc:	4645      	mov	r5, r8
 80028fe:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002900:	680c      	ldr	r4, [r1, #0]
{
 8002902:	468b      	mov	fp, r1
  uint32_t position = 0x00u;
 8002904:	2300      	movs	r3, #0
{
 8002906:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002908:	2c00      	cmp	r4, #0
 800290a:	d068      	beq.n	80029de <HAL_GPIO_Init+0xea>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800290c:	2201      	movs	r2, #1
 800290e:	409a      	lsls	r2, r3
 8002910:	4694      	mov	ip, r2
 8002912:	4022      	ands	r2, r4
 8002914:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 8002916:	4662      	mov	r2, ip
 8002918:	4214      	tst	r4, r2
 800291a:	d05c      	beq.n	80029d6 <HAL_GPIO_Init+0xe2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800291c:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800291e:	465a      	mov	r2, fp
 8002920:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002922:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002924:	6855      	ldr	r5, [r2, #4]
 8002926:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002928:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800292a:	402a      	ands	r2, r5
 800292c:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800292e:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002930:	2e01      	cmp	r6, #1
 8002932:	d95b      	bls.n	80029ec <HAL_GPIO_Init+0xf8>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002934:	2a03      	cmp	r2, #3
 8002936:	d000      	beq.n	800293a <HAL_GPIO_Init+0x46>
 8002938:	e0ad      	b.n	8002a96 <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800293a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800293c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800293e:	9900      	ldr	r1, [sp, #0]
 8002940:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002942:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8002944:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002946:	22c0      	movs	r2, #192	@ 0xc0
 8002948:	0292      	lsls	r2, r2, #10
 800294a:	4215      	tst	r5, r2
 800294c:	d043      	beq.n	80029d6 <HAL_GPIO_Init+0xe2>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800294e:	2703      	movs	r7, #3
 8002950:	260f      	movs	r6, #15
 8002952:	495d      	ldr	r1, [pc, #372]	@ (8002ac8 <HAL_GPIO_Init+0x1d4>)
 8002954:	401f      	ands	r7, r3
 8002956:	468c      	mov	ip, r1
 8002958:	00ff      	lsls	r7, r7, #3
 800295a:	40be      	lsls	r6, r7
        temp = EXTI->EXTICR[position >> 2u];
 800295c:	089a      	lsrs	r2, r3, #2
 800295e:	0092      	lsls	r2, r2, #2
 8002960:	4462      	add	r2, ip
 8002962:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002964:	43b1      	bics	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002966:	26a0      	movs	r6, #160	@ 0xa0
 8002968:	05f6      	lsls	r6, r6, #23
 800296a:	42b0      	cmp	r0, r6
 800296c:	d00e      	beq.n	800298c <HAL_GPIO_Init+0x98>
 800296e:	4e57      	ldr	r6, [pc, #348]	@ (8002acc <HAL_GPIO_Init+0x1d8>)
 8002970:	42b0      	cmp	r0, r6
 8002972:	d100      	bne.n	8002976 <HAL_GPIO_Init+0x82>
 8002974:	e0a0      	b.n	8002ab8 <HAL_GPIO_Init+0x1c4>
 8002976:	4e56      	ldr	r6, [pc, #344]	@ (8002ad0 <HAL_GPIO_Init+0x1dc>)
 8002978:	42b0      	cmp	r0, r6
 800297a:	d100      	bne.n	800297e <HAL_GPIO_Init+0x8a>
 800297c:	e0a0      	b.n	8002ac0 <HAL_GPIO_Init+0x1cc>
 800297e:	4e55      	ldr	r6, [pc, #340]	@ (8002ad4 <HAL_GPIO_Init+0x1e0>)
 8002980:	42b0      	cmp	r0, r6
 8002982:	d100      	bne.n	8002986 <HAL_GPIO_Init+0x92>
 8002984:	e094      	b.n	8002ab0 <HAL_GPIO_Init+0x1bc>
 8002986:	2605      	movs	r6, #5
 8002988:	40be      	lsls	r6, r7
 800298a:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800298c:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 800298e:	6611      	str	r1, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 8002990:	4651      	mov	r1, sl
        temp = EXTI->RTSR1;
 8002992:	4a4d      	ldr	r2, [pc, #308]	@ (8002ac8 <HAL_GPIO_Init+0x1d4>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002994:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 8002996:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR1;
 8002998:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800299a:	4235      	tst	r5, r6
 800299c:	d000      	beq.n	80029a0 <HAL_GPIO_Init+0xac>
 800299e:	e077      	b.n	8002a90 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 80029a0:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80029a2:	4e49      	ldr	r6, [pc, #292]	@ (8002ac8 <HAL_GPIO_Init+0x1d4>)
 80029a4:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 80029a6:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029a8:	2680      	movs	r6, #128	@ 0x80
 80029aa:	03b6      	lsls	r6, r6, #14
 80029ac:	4235      	tst	r5, r6
 80029ae:	d16c      	bne.n	8002a8a <HAL_GPIO_Init+0x196>
        temp &= ~(iocurrent);
 80029b0:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80029b2:	4e45      	ldr	r6, [pc, #276]	@ (8002ac8 <HAL_GPIO_Init+0x1d4>)
 80029b4:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029b6:	2284      	movs	r2, #132	@ 0x84
 80029b8:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029ba:	03af      	lsls	r7, r5, #14
 80029bc:	d462      	bmi.n	8002a84 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 80029be:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80029c0:	2784      	movs	r7, #132	@ 0x84
 80029c2:	4e41      	ldr	r6, [pc, #260]	@ (8002ac8 <HAL_GPIO_Init+0x1d4>)
 80029c4:	51f2      	str	r2, [r6, r7]

        temp = EXTI->IMR1;
 80029c6:	2280      	movs	r2, #128	@ 0x80
 80029c8:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029ca:	03ed      	lsls	r5, r5, #15
 80029cc:	d456      	bmi.n	8002a7c <HAL_GPIO_Init+0x188>
        temp &= ~(iocurrent);
 80029ce:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80029d0:	2180      	movs	r1, #128	@ 0x80
 80029d2:	4d3d      	ldr	r5, [pc, #244]	@ (8002ac8 <HAL_GPIO_Init+0x1d4>)
 80029d4:	506a      	str	r2, [r5, r1]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029d6:	0022      	movs	r2, r4
      }
    }

    position++;
 80029d8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029da:	40da      	lsrs	r2, r3
 80029dc:	d196      	bne.n	800290c <HAL_GPIO_Init+0x18>
  }
}
 80029de:	b003      	add	sp, #12
 80029e0:	bcf0      	pop	{r4, r5, r6, r7}
 80029e2:	46bb      	mov	fp, r7
 80029e4:	46b2      	mov	sl, r6
 80029e6:	46a9      	mov	r9, r5
 80029e8:	46a0      	mov	r8, r4
 80029ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80029ec:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ee:	000e      	movs	r6, r1
 80029f0:	9900      	ldr	r1, [sp, #0]
 80029f2:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029f4:	4659      	mov	r1, fp
 80029f6:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029f8:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029fa:	000e      	movs	r6, r1
 80029fc:	40be      	lsls	r6, r7
 80029fe:	46b0      	mov	r8, r6
 8002a00:	464e      	mov	r6, r9
 8002a02:	4641      	mov	r1, r8
 8002a04:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 8002a06:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002a08:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a0a:	000e      	movs	r6, r1
 8002a0c:	4661      	mov	r1, ip
 8002a0e:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a10:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a12:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a14:	000e      	movs	r6, r1
 8002a16:	2101      	movs	r1, #1
 8002a18:	400e      	ands	r6, r1
 8002a1a:	409e      	lsls	r6, r3
 8002a1c:	46b4      	mov	ip, r6
 8002a1e:	4646      	mov	r6, r8
 8002a20:	4661      	mov	r1, ip
 8002a22:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 8002a24:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8002a26:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a28:	000e      	movs	r6, r1
 8002a2a:	9900      	ldr	r1, [sp, #0]
 8002a2c:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a2e:	4659      	mov	r1, fp
 8002a30:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a32:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a34:	000e      	movs	r6, r1
 8002a36:	40be      	lsls	r6, r7
 8002a38:	46b4      	mov	ip, r6
 8002a3a:	4646      	mov	r6, r8
 8002a3c:	4661      	mov	r1, ip
 8002a3e:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 8002a40:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a42:	2a02      	cmp	r2, #2
 8002a44:	d000      	beq.n	8002a48 <HAL_GPIO_Init+0x154>
 8002a46:	e778      	b.n	800293a <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 8002a48:	08d9      	lsrs	r1, r3, #3
 8002a4a:	0089      	lsls	r1, r1, #2
 8002a4c:	468c      	mov	ip, r1
 8002a4e:	4484      	add	ip, r0
 8002a50:	4661      	mov	r1, ip
 8002a52:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a54:	2107      	movs	r1, #7
 8002a56:	4019      	ands	r1, r3
 8002a58:	0089      	lsls	r1, r1, #2
 8002a5a:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 8002a5c:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a5e:	210f      	movs	r1, #15
 8002a60:	4646      	mov	r6, r8
 8002a62:	40b1      	lsls	r1, r6
 8002a64:	9e01      	ldr	r6, [sp, #4]
 8002a66:	438e      	bics	r6, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a68:	4659      	mov	r1, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a6a:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a6c:	4646      	mov	r6, r8
 8002a6e:	6909      	ldr	r1, [r1, #16]
 8002a70:	40b1      	lsls	r1, r6
 8002a72:	9e01      	ldr	r6, [sp, #4]
 8002a74:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 8002a76:	4661      	mov	r1, ip
 8002a78:	620e      	str	r6, [r1, #32]
 8002a7a:	e75e      	b.n	800293a <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 8002a7c:	4651      	mov	r1, sl
 8002a7e:	4311      	orrs	r1, r2
 8002a80:	000a      	movs	r2, r1
 8002a82:	e7a5      	b.n	80029d0 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8002a84:	4656      	mov	r6, sl
 8002a86:	4332      	orrs	r2, r6
 8002a88:	e79a      	b.n	80029c0 <HAL_GPIO_Init+0xcc>
          temp |= iocurrent;
 8002a8a:	4656      	mov	r6, sl
 8002a8c:	4332      	orrs	r2, r6
 8002a8e:	e790      	b.n	80029b2 <HAL_GPIO_Init+0xbe>
          temp |= iocurrent;
 8002a90:	4656      	mov	r6, sl
 8002a92:	4332      	orrs	r2, r6
 8002a94:	e785      	b.n	80029a2 <HAL_GPIO_Init+0xae>
        temp = GPIOx->PUPDR;
 8002a96:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a98:	9e00      	ldr	r6, [sp, #0]
 8002a9a:	4031      	ands	r1, r6
 8002a9c:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a9e:	4659      	mov	r1, fp
 8002aa0:	6889      	ldr	r1, [r1, #8]
 8002aa2:	40b9      	lsls	r1, r7
 8002aa4:	468c      	mov	ip, r1
 8002aa6:	4641      	mov	r1, r8
 8002aa8:	4666      	mov	r6, ip
 8002aaa:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8002aac:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aae:	e744      	b.n	800293a <HAL_GPIO_Init+0x46>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002ab0:	2603      	movs	r6, #3
 8002ab2:	40be      	lsls	r6, r7
 8002ab4:	4331      	orrs	r1, r6
 8002ab6:	e769      	b.n	800298c <HAL_GPIO_Init+0x98>
 8002ab8:	2601      	movs	r6, #1
 8002aba:	40be      	lsls	r6, r7
 8002abc:	4331      	orrs	r1, r6
 8002abe:	e765      	b.n	800298c <HAL_GPIO_Init+0x98>
 8002ac0:	2602      	movs	r6, #2
 8002ac2:	40be      	lsls	r6, r7
 8002ac4:	4331      	orrs	r1, r6
 8002ac6:	e761      	b.n	800298c <HAL_GPIO_Init+0x98>
 8002ac8:	40021800 	.word	0x40021800
 8002acc:	50000400 	.word	0x50000400
 8002ad0:	50000800 	.word	0x50000800
 8002ad4:	50000c00 	.word	0x50000c00

08002ad8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ad8:	2a00      	cmp	r2, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002adc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ade:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ae0:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8002ae2:	e7fc      	b.n	8002ade <HAL_GPIO_WritePin+0x6>

08002ae4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ae4:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002ae6:	4c13      	ldr	r4, [pc, #76]	@ (8002b34 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8002ae8:	4a13      	ldr	r2, [pc, #76]	@ (8002b38 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8002aea:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002aec:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002aee:	4013      	ands	r3, r2
 8002af0:	4303      	orrs	r3, r0
 8002af2:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af4:	2380      	movs	r3, #128	@ 0x80
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4298      	cmp	r0, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8002afc:	0028      	movs	r0, r5
 8002afe:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002b00:	4b0e      	ldr	r3, [pc, #56]	@ (8002b3c <HAL_PWREx_ControlVoltageScaling+0x58>)
 8002b02:	490f      	ldr	r1, [pc, #60]	@ (8002b40 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	0058      	lsls	r0, r3, #1
 8002b08:	18c0      	adds	r0, r0, r3
 8002b0a:	0040      	lsls	r0, r0, #1
 8002b0c:	f7fd faf8 	bl	8000100 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b10:	2280      	movs	r2, #128	@ 0x80
 8002b12:	6963      	ldr	r3, [r4, #20]
 8002b14:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002b16:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b18:	4213      	tst	r3, r2
 8002b1a:	d102      	bne.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0x3e>
 8002b1c:	e7ee      	b.n	8002afc <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	d005      	beq.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b22:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8002b24:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b26:	4213      	tst	r3, r2
 8002b28:	d1f9      	bne.n	8002b1e <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8002b2a:	2500      	movs	r5, #0
 8002b2c:	e7e6      	b.n	8002afc <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8002b2e:	2503      	movs	r5, #3
 8002b30:	e7e4      	b.n	8002afc <HAL_PWREx_ControlVoltageScaling+0x18>
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	40007000 	.word	0x40007000
 8002b38:	fffff9ff 	.word	0xfffff9ff
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	000f4240 	.word	0x000f4240

08002b44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b46:	46ce      	mov	lr, r9
 8002b48:	4647      	mov	r7, r8
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	0004      	movs	r4, r0
 8002b4e:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b50:	2800      	cmp	r0, #0
 8002b52:	d027      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b54:	6803      	ldr	r3, [r0, #0]
 8002b56:	07da      	lsls	r2, r3, #31
 8002b58:	d511      	bpl.n	8002b7e <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b5a:	2238      	movs	r2, #56	@ 0x38
 8002b5c:	49c0      	ldr	r1, [pc, #768]	@ (8002e60 <HAL_RCC_OscConfig+0x31c>)
 8002b5e:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b60:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b62:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002b64:	2a10      	cmp	r2, #16
 8002b66:	d100      	bne.n	8002b6a <HAL_RCC_OscConfig+0x26>
 8002b68:	e0cc      	b.n	8002d04 <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002b6a:	2a08      	cmp	r2, #8
 8002b6c:	d000      	beq.n	8002b70 <HAL_RCC_OscConfig+0x2c>
 8002b6e:	e0cd      	b.n	8002d0c <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	4abb      	ldr	r2, [pc, #748]	@ (8002e60 <HAL_RCC_OscConfig+0x31c>)
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	0392      	lsls	r2, r2, #14
 8002b76:	d502      	bpl.n	8002b7e <HAL_RCC_OscConfig+0x3a>
 8002b78:	6862      	ldr	r2, [r4, #4]
 8002b7a:	2a00      	cmp	r2, #0
 8002b7c:	d012      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b7e:	079a      	lsls	r2, r3, #30
 8002b80:	d532      	bpl.n	8002be8 <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b82:	2338      	movs	r3, #56	@ 0x38
 8002b84:	4ab6      	ldr	r2, [pc, #728]	@ (8002e60 <HAL_RCC_OscConfig+0x31c>)
 8002b86:	6891      	ldr	r1, [r2, #8]
 8002b88:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b8a:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d100      	bne.n	8002b92 <HAL_RCC_OscConfig+0x4e>
 8002b90:	e10b      	b.n	8002daa <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d000      	beq.n	8002b98 <HAL_RCC_OscConfig+0x54>
 8002b96:	e10d      	b.n	8002db4 <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b98:	6813      	ldr	r3, [r2, #0]
 8002b9a:	055b      	lsls	r3, r3, #21
 8002b9c:	d508      	bpl.n	8002bb0 <HAL_RCC_OscConfig+0x6c>
 8002b9e:	68e3      	ldr	r3, [r4, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8002ba4:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8002ba6:	b003      	add	sp, #12
 8002ba8:	bcc0      	pop	{r6, r7}
 8002baa:	46b9      	mov	r9, r7
 8002bac:	46b0      	mov	r8, r6
 8002bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb0:	6851      	ldr	r1, [r2, #4]
 8002bb2:	6963      	ldr	r3, [r4, #20]
 8002bb4:	48ab      	ldr	r0, [pc, #684]	@ (8002e64 <HAL_RCC_OscConfig+0x320>)
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	4001      	ands	r1, r0
 8002bba:	430b      	orrs	r3, r1
 8002bbc:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bbe:	4aa8      	ldr	r2, [pc, #672]	@ (8002e60 <HAL_RCC_OscConfig+0x31c>)
 8002bc0:	49a9      	ldr	r1, [pc, #676]	@ (8002e68 <HAL_RCC_OscConfig+0x324>)
 8002bc2:	6813      	ldr	r3, [r2, #0]
 8002bc4:	400b      	ands	r3, r1
 8002bc6:	6921      	ldr	r1, [r4, #16]
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002bcc:	6813      	ldr	r3, [r2, #0]
 8002bce:	4aa7      	ldr	r2, [pc, #668]	@ (8002e6c <HAL_RCC_OscConfig+0x328>)
 8002bd0:	049b      	lsls	r3, r3, #18
 8002bd2:	0f5b      	lsrs	r3, r3, #29
 8002bd4:	40da      	lsrs	r2, r3
 8002bd6:	49a6      	ldr	r1, [pc, #664]	@ (8002e70 <HAL_RCC_OscConfig+0x32c>)
 8002bd8:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bda:	4ba6      	ldr	r3, [pc, #664]	@ (8002e74 <HAL_RCC_OscConfig+0x330>)
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	f7ff fcb3 	bl	8002548 <HAL_InitTick>
 8002be2:	2800      	cmp	r0, #0
 8002be4:	d1de      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	071a      	lsls	r2, r3, #28
 8002bea:	d46d      	bmi.n	8002cc8 <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bec:	075b      	lsls	r3, r3, #29
 8002bee:	d545      	bpl.n	8002c7c <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002bf0:	2338      	movs	r3, #56	@ 0x38
 8002bf2:	4a9b      	ldr	r2, [pc, #620]	@ (8002e60 <HAL_RCC_OscConfig+0x31c>)
 8002bf4:	6891      	ldr	r1, [r2, #8]
 8002bf6:	400b      	ands	r3, r1
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d100      	bne.n	8002bfe <HAL_RCC_OscConfig+0xba>
 8002bfc:	e0cc      	b.n	8002d98 <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bfe:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002c00:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c02:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002c04:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8002c06:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c08:	4219      	tst	r1, r3
 8002c0a:	d108      	bne.n	8002c1e <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 8002c0c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002c0e:	4319      	orrs	r1, r3
 8002c10:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8002c12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c14:	4013      	ands	r3, r2
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1e:	2780      	movs	r7, #128	@ 0x80
 8002c20:	4e95      	ldr	r6, [pc, #596]	@ (8002e78 <HAL_RCC_OscConfig+0x334>)
 8002c22:	007f      	lsls	r7, r7, #1
 8002c24:	6833      	ldr	r3, [r6, #0]
 8002c26:	423b      	tst	r3, r7
 8002c28:	d100      	bne.n	8002c2c <HAL_RCC_OscConfig+0xe8>
 8002c2a:	e0ff      	b.n	8002e2c <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2c:	68a3      	ldr	r3, [r4, #8]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d100      	bne.n	8002c34 <HAL_RCC_OscConfig+0xf0>
 8002c32:	e0e5      	b.n	8002e00 <HAL_RCC_OscConfig+0x2bc>
 8002c34:	2b05      	cmp	r3, #5
 8002c36:	d100      	bne.n	8002c3a <HAL_RCC_OscConfig+0xf6>
 8002c38:	e1c8      	b.n	8002fcc <HAL_RCC_OscConfig+0x488>
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	4e88      	ldr	r6, [pc, #544]	@ (8002e60 <HAL_RCC_OscConfig+0x31c>)
 8002c3e:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8002c40:	438a      	bics	r2, r1
 8002c42:	65f2      	str	r2, [r6, #92]	@ 0x5c
 8002c44:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8002c46:	3103      	adds	r1, #3
 8002c48:	438a      	bics	r2, r1
 8002c4a:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d000      	beq.n	8002c52 <HAL_RCC_OscConfig+0x10e>
 8002c50:	e0da      	b.n	8002e08 <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 8002c52:	f7ff fcbf 	bl	80025d4 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c56:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8002c58:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c5a:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5c:	4d87      	ldr	r5, [pc, #540]	@ (8002e7c <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c5e:	e005      	b.n	8002c6c <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c60:	f7ff fcb8 	bl	80025d4 <HAL_GetTick>
 8002c64:	1bc0      	subs	r0, r0, r7
 8002c66:	42a8      	cmp	r0, r5
 8002c68:	d900      	bls.n	8002c6c <HAL_RCC_OscConfig+0x128>
 8002c6a:	e0ee      	b.n	8002e4a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c6c:	4642      	mov	r2, r8
 8002c6e:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8002c70:	421a      	tst	r2, r3
 8002c72:	d1f5      	bne.n	8002c60 <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 8002c74:	464b      	mov	r3, r9
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d100      	bne.n	8002c7c <HAL_RCC_OscConfig+0x138>
 8002c7a:	e163      	b.n	8002f44 <HAL_RCC_OscConfig+0x400>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c7c:	69e3      	ldr	r3, [r4, #28]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d020      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c82:	2238      	movs	r2, #56	@ 0x38
 8002c84:	4d76      	ldr	r5, [pc, #472]	@ (8002e60 <HAL_RCC_OscConfig+0x31c>)
 8002c86:	68a9      	ldr	r1, [r5, #8]
 8002c88:	400a      	ands	r2, r1
 8002c8a:	2a10      	cmp	r2, #16
 8002c8c:	d100      	bne.n	8002c90 <HAL_RCC_OscConfig+0x14c>
 8002c8e:	e11d      	b.n	8002ecc <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d100      	bne.n	8002c96 <HAL_RCC_OscConfig+0x152>
 8002c94:	e15c      	b.n	8002f50 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_PLL_DISABLE();
 8002c96:	682b      	ldr	r3, [r5, #0]
 8002c98:	4a79      	ldr	r2, [pc, #484]	@ (8002e80 <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9a:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ca0:	f7ff fc98 	bl	80025d4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca4:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8002ca6:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca8:	e005      	b.n	8002cb6 <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002caa:	f7ff fc93 	bl	80025d4 <HAL_GetTick>
 8002cae:	1b00      	subs	r0, r0, r4
 8002cb0:	2802      	cmp	r0, #2
 8002cb2:	d900      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x172>
 8002cb4:	e0c9      	b.n	8002e4a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb6:	682b      	ldr	r3, [r5, #0]
 8002cb8:	4233      	tst	r3, r6
 8002cba:	d1f6      	bne.n	8002caa <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002cbc:	68eb      	ldr	r3, [r5, #12]
 8002cbe:	4a71      	ldr	r2, [pc, #452]	@ (8002e84 <HAL_RCC_OscConfig+0x340>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	e76e      	b.n	8002ba6 <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002cc8:	2238      	movs	r2, #56	@ 0x38
 8002cca:	4d65      	ldr	r5, [pc, #404]	@ (8002e60 <HAL_RCC_OscConfig+0x31c>)
 8002ccc:	68a9      	ldr	r1, [r5, #8]
 8002cce:	400a      	ands	r2, r1
 8002cd0:	2a18      	cmp	r2, #24
 8002cd2:	d043      	beq.n	8002d5c <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cd4:	69a3      	ldr	r3, [r4, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d100      	bne.n	8002cdc <HAL_RCC_OscConfig+0x198>
 8002cda:	e0b8      	b.n	8002e4e <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 8002cdc:	2201      	movs	r2, #1
 8002cde:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ce0:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002ce6:	f7ff fc75 	bl	80025d4 <HAL_GetTick>
 8002cea:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cec:	e005      	b.n	8002cfa <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cee:	f7ff fc71 	bl	80025d4 <HAL_GetTick>
 8002cf2:	1b80      	subs	r0, r0, r6
 8002cf4:	2802      	cmp	r0, #2
 8002cf6:	d900      	bls.n	8002cfa <HAL_RCC_OscConfig+0x1b6>
 8002cf8:	e0a7      	b.n	8002e4a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cfa:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002cfc:	421f      	tst	r7, r3
 8002cfe:	d0f6      	beq.n	8002cee <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	e773      	b.n	8002bec <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d04:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002d06:	0789      	lsls	r1, r1, #30
 8002d08:	d100      	bne.n	8002d0c <HAL_RCC_OscConfig+0x1c8>
 8002d0a:	e731      	b.n	8002b70 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d0c:	2280      	movs	r2, #128	@ 0x80
 8002d0e:	6863      	ldr	r3, [r4, #4]
 8002d10:	0252      	lsls	r2, r2, #9
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d02b      	beq.n	8002d6e <HAL_RCC_OscConfig+0x22a>
 8002d16:	21a0      	movs	r1, #160	@ 0xa0
 8002d18:	02c9      	lsls	r1, r1, #11
 8002d1a:	428b      	cmp	r3, r1
 8002d1c:	d100      	bne.n	8002d20 <HAL_RCC_OscConfig+0x1dc>
 8002d1e:	e0fc      	b.n	8002f1a <HAL_RCC_OscConfig+0x3d6>
 8002d20:	4d4f      	ldr	r5, [pc, #316]	@ (8002e60 <HAL_RCC_OscConfig+0x31c>)
 8002d22:	4959      	ldr	r1, [pc, #356]	@ (8002e88 <HAL_RCC_OscConfig+0x344>)
 8002d24:	682a      	ldr	r2, [r5, #0]
 8002d26:	400a      	ands	r2, r1
 8002d28:	602a      	str	r2, [r5, #0]
 8002d2a:	682a      	ldr	r2, [r5, #0]
 8002d2c:	4957      	ldr	r1, [pc, #348]	@ (8002e8c <HAL_RCC_OscConfig+0x348>)
 8002d2e:	400a      	ands	r2, r1
 8002d30:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d11f      	bne.n	8002d76 <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 8002d36:	f7ff fc4d 	bl	80025d4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d3a:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002d3c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d3e:	02bf      	lsls	r7, r7, #10
 8002d40:	e004      	b.n	8002d4c <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d42:	f7ff fc47 	bl	80025d4 <HAL_GetTick>
 8002d46:	1b80      	subs	r0, r0, r6
 8002d48:	2864      	cmp	r0, #100	@ 0x64
 8002d4a:	d87e      	bhi.n	8002e4a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d4c:	682b      	ldr	r3, [r5, #0]
 8002d4e:	423b      	tst	r3, r7
 8002d50:	d1f7      	bne.n	8002d42 <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	079a      	lsls	r2, r3, #30
 8002d56:	d400      	bmi.n	8002d5a <HAL_RCC_OscConfig+0x216>
 8002d58:	e746      	b.n	8002be8 <HAL_RCC_OscConfig+0xa4>
 8002d5a:	e712      	b.n	8002b82 <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002d5c:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8002d5e:	0792      	lsls	r2, r2, #30
 8002d60:	d400      	bmi.n	8002d64 <HAL_RCC_OscConfig+0x220>
 8002d62:	e743      	b.n	8002bec <HAL_RCC_OscConfig+0xa8>
 8002d64:	69a2      	ldr	r2, [r4, #24]
 8002d66:	2a00      	cmp	r2, #0
 8002d68:	d000      	beq.n	8002d6c <HAL_RCC_OscConfig+0x228>
 8002d6a:	e73f      	b.n	8002bec <HAL_RCC_OscConfig+0xa8>
 8002d6c:	e71a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6e:	4a3c      	ldr	r2, [pc, #240]	@ (8002e60 <HAL_RCC_OscConfig+0x31c>)
 8002d70:	6811      	ldr	r1, [r2, #0]
 8002d72:	430b      	orrs	r3, r1
 8002d74:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d76:	f7ff fc2d 	bl	80025d4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d7a:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002d7c:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d7e:	4f38      	ldr	r7, [pc, #224]	@ (8002e60 <HAL_RCC_OscConfig+0x31c>)
 8002d80:	02b6      	lsls	r6, r6, #10
 8002d82:	e004      	b.n	8002d8e <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d84:	f7ff fc26 	bl	80025d4 <HAL_GetTick>
 8002d88:	1b40      	subs	r0, r0, r5
 8002d8a:	2864      	cmp	r0, #100	@ 0x64
 8002d8c:	d85d      	bhi.n	8002e4a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	4233      	tst	r3, r6
 8002d92:	d0f7      	beq.n	8002d84 <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	e7dd      	b.n	8002d54 <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002d98:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8002d9a:	079b      	lsls	r3, r3, #30
 8002d9c:	d400      	bmi.n	8002da0 <HAL_RCC_OscConfig+0x25c>
 8002d9e:	e76d      	b.n	8002c7c <HAL_RCC_OscConfig+0x138>
 8002da0:	68a3      	ldr	r3, [r4, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d000      	beq.n	8002da8 <HAL_RCC_OscConfig+0x264>
 8002da6:	e769      	b.n	8002c7c <HAL_RCC_OscConfig+0x138>
 8002da8:	e6fc      	b.n	8002ba4 <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002daa:	3b0d      	subs	r3, #13
 8002dac:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d100      	bne.n	8002db4 <HAL_RCC_OscConfig+0x270>
 8002db2:	e0bc      	b.n	8002f2e <HAL_RCC_OscConfig+0x3ea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002db4:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002db6:	4d2a      	ldr	r5, [pc, #168]	@ (8002e60 <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d073      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002dbc:	682b      	ldr	r3, [r5, #0]
 8002dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8002e68 <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc0:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc6:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8002dcc:	2380      	movs	r3, #128	@ 0x80
 8002dce:	682a      	ldr	r2, [r5, #0]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002dd6:	f7ff fbfd 	bl	80025d4 <HAL_GetTick>
 8002dda:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ddc:	e004      	b.n	8002de8 <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dde:	f7ff fbf9 	bl	80025d4 <HAL_GetTick>
 8002de2:	1b80      	subs	r0, r0, r6
 8002de4:	2802      	cmp	r0, #2
 8002de6:	d830      	bhi.n	8002e4a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de8:	682b      	ldr	r3, [r5, #0]
 8002dea:	423b      	tst	r3, r7
 8002dec:	d0f7      	beq.n	8002dde <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dee:	686a      	ldr	r2, [r5, #4]
 8002df0:	6963      	ldr	r3, [r4, #20]
 8002df2:	491c      	ldr	r1, [pc, #112]	@ (8002e64 <HAL_RCC_OscConfig+0x320>)
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	400a      	ands	r2, r1
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	e6f3      	b.n	8002be8 <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e00:	4917      	ldr	r1, [pc, #92]	@ (8002e60 <HAL_RCC_OscConfig+0x31c>)
 8002e02:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 8002e04:	4313      	orrs	r3, r2
 8002e06:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8002e08:	f7ff fbe4 	bl	80025d4 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e0c:	4b14      	ldr	r3, [pc, #80]	@ (8002e60 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8002e0e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e10:	4698      	mov	r8, r3
 8002e12:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e14:	4d19      	ldr	r5, [pc, #100]	@ (8002e7c <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e16:	e004      	b.n	8002e22 <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e18:	f7ff fbdc 	bl	80025d4 <HAL_GetTick>
 8002e1c:	1b80      	subs	r0, r0, r6
 8002e1e:	42a8      	cmp	r0, r5
 8002e20:	d813      	bhi.n	8002e4a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e22:	4643      	mov	r3, r8
 8002e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e26:	421f      	tst	r7, r3
 8002e28:	d0f6      	beq.n	8002e18 <HAL_RCC_OscConfig+0x2d4>
 8002e2a:	e723      	b.n	8002c74 <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e2c:	6833      	ldr	r3, [r6, #0]
 8002e2e:	433b      	orrs	r3, r7
 8002e30:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002e32:	f7ff fbcf 	bl	80025d4 <HAL_GetTick>
 8002e36:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e38:	6833      	ldr	r3, [r6, #0]
 8002e3a:	423b      	tst	r3, r7
 8002e3c:	d000      	beq.n	8002e40 <HAL_RCC_OscConfig+0x2fc>
 8002e3e:	e6f5      	b.n	8002c2c <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e40:	f7ff fbc8 	bl	80025d4 <HAL_GetTick>
 8002e44:	1b40      	subs	r0, r0, r5
 8002e46:	2802      	cmp	r0, #2
 8002e48:	d9f6      	bls.n	8002e38 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 8002e4a:	2003      	movs	r0, #3
 8002e4c:	e6ab      	b.n	8002ba6 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 8002e4e:	2201      	movs	r2, #1
 8002e50:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e52:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8002e54:	4393      	bics	r3, r2
 8002e56:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002e58:	f7ff fbbc 	bl	80025d4 <HAL_GetTick>
 8002e5c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e5e:	e01c      	b.n	8002e9a <HAL_RCC_OscConfig+0x356>
 8002e60:	40021000 	.word	0x40021000
 8002e64:	ffff80ff 	.word	0xffff80ff
 8002e68:	ffffc7ff 	.word	0xffffc7ff
 8002e6c:	00f42400 	.word	0x00f42400
 8002e70:	20000000 	.word	0x20000000
 8002e74:	20000008 	.word	0x20000008
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	00001388 	.word	0x00001388
 8002e80:	feffffff 	.word	0xfeffffff
 8002e84:	effefffc 	.word	0xeffefffc
 8002e88:	fffeffff 	.word	0xfffeffff
 8002e8c:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e90:	f7ff fba0 	bl	80025d4 <HAL_GetTick>
 8002e94:	1b80      	subs	r0, r0, r6
 8002e96:	2802      	cmp	r0, #2
 8002e98:	d8d7      	bhi.n	8002e4a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e9a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002e9c:	421f      	tst	r7, r3
 8002e9e:	d1f7      	bne.n	8002e90 <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	e6a3      	b.n	8002bec <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 8002ea4:	682b      	ldr	r3, [r5, #0]
 8002ea6:	4a50      	ldr	r2, [pc, #320]	@ (8002fe8 <HAL_RCC_OscConfig+0x4a4>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ea8:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8002eaa:	4013      	ands	r3, r2
 8002eac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002eae:	f7ff fb91 	bl	80025d4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eb2:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8002eb4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eb6:	e004      	b.n	8002ec2 <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb8:	f7ff fb8c 	bl	80025d4 <HAL_GetTick>
 8002ebc:	1b80      	subs	r0, r0, r6
 8002ebe:	2802      	cmp	r0, #2
 8002ec0:	d8c3      	bhi.n	8002e4a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ec2:	682b      	ldr	r3, [r5, #0]
 8002ec4:	423b      	tst	r3, r7
 8002ec6:	d1f7      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	e68d      	b.n	8002be8 <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d100      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x38e>
 8002ed0:	e668      	b.n	8002ba4 <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed2:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8002ed4:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	6a21      	ldr	r1, [r4, #32]
 8002ed8:	4002      	ands	r2, r0
 8002eda:	428a      	cmp	r2, r1
 8002edc:	d000      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x39c>
 8002ede:	e661      	b.n	8002ba4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ee0:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ee4:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee6:	428a      	cmp	r2, r1
 8002ee8:	d000      	beq.n	8002eec <HAL_RCC_OscConfig+0x3a8>
 8002eea:	e65b      	b.n	8002ba4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eec:	21fe      	movs	r1, #254	@ 0xfe
 8002eee:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002ef0:	01c9      	lsls	r1, r1, #7
 8002ef2:	4001      	ands	r1, r0
 8002ef4:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ef6:	4291      	cmp	r1, r2
 8002ef8:	d000      	beq.n	8002efc <HAL_RCC_OscConfig+0x3b8>
 8002efa:	e653      	b.n	8002ba4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002efc:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002efe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f00:	0392      	lsls	r2, r2, #14
 8002f02:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f04:	428a      	cmp	r2, r1
 8002f06:	d000      	beq.n	8002f0a <HAL_RCC_OscConfig+0x3c6>
 8002f08:	e64c      	b.n	8002ba4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002f0c:	0f40      	lsrs	r0, r0, #29
 8002f0e:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f10:	1ac0      	subs	r0, r0, r3
 8002f12:	1e43      	subs	r3, r0, #1
 8002f14:	4198      	sbcs	r0, r3
 8002f16:	b2c0      	uxtb	r0, r0
 8002f18:	e645      	b.n	8002ba6 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1a:	2180      	movs	r1, #128	@ 0x80
 8002f1c:	4b33      	ldr	r3, [pc, #204]	@ (8002fec <HAL_RCC_OscConfig+0x4a8>)
 8002f1e:	02c9      	lsls	r1, r1, #11
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	4301      	orrs	r1, r0
 8002f24:	6019      	str	r1, [r3, #0]
 8002f26:	6819      	ldr	r1, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f2c:	e723      	b.n	8002d76 <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f2e:	6813      	ldr	r3, [r2, #0]
 8002f30:	055b      	lsls	r3, r3, #21
 8002f32:	d455      	bmi.n	8002fe0 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f34:	6851      	ldr	r1, [r2, #4]
 8002f36:	6963      	ldr	r3, [r4, #20]
 8002f38:	482d      	ldr	r0, [pc, #180]	@ (8002ff0 <HAL_RCC_OscConfig+0x4ac>)
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	4001      	ands	r1, r0
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f42:	e64a      	b.n	8002bda <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 8002f44:	4a29      	ldr	r2, [pc, #164]	@ (8002fec <HAL_RCC_OscConfig+0x4a8>)
 8002f46:	492b      	ldr	r1, [pc, #172]	@ (8002ff4 <HAL_RCC_OscConfig+0x4b0>)
 8002f48:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8002f4a:	400b      	ands	r3, r1
 8002f4c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002f4e:	e695      	b.n	8002c7c <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 8002f50:	682b      	ldr	r3, [r5, #0]
 8002f52:	4a29      	ldr	r2, [pc, #164]	@ (8002ff8 <HAL_RCC_OscConfig+0x4b4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f54:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8002f56:	4013      	ands	r3, r2
 8002f58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f5a:	f7ff fb3b 	bl	80025d4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f5e:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8002f60:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f62:	e005      	b.n	8002f70 <HAL_RCC_OscConfig+0x42c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f64:	f7ff fb36 	bl	80025d4 <HAL_GetTick>
 8002f68:	1b80      	subs	r0, r0, r6
 8002f6a:	2802      	cmp	r0, #2
 8002f6c:	d900      	bls.n	8002f70 <HAL_RCC_OscConfig+0x42c>
 8002f6e:	e76c      	b.n	8002e4a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	423b      	tst	r3, r7
 8002f74:	d1f6      	bne.n	8002f64 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f76:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002f78:	6a23      	ldr	r3, [r4, #32]
 8002f7a:	68ea      	ldr	r2, [r5, #12]
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	491f      	ldr	r1, [pc, #124]	@ (8002ffc <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f80:	4e1a      	ldr	r6, [pc, #104]	@ (8002fec <HAL_RCC_OscConfig+0x4a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f82:	400a      	ands	r2, r1
 8002f84:	4313      	orrs	r3, r2
 8002f86:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002f90:	0212      	lsls	r2, r2, #8
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002f96:	2380      	movs	r3, #128	@ 0x80
 8002f98:	682a      	ldr	r2, [r5, #0]
 8002f9a:	045b      	lsls	r3, r3, #17
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002fa0:	2380      	movs	r3, #128	@ 0x80
 8002fa2:	68ea      	ldr	r2, [r5, #12]
 8002fa4:	055b      	lsls	r3, r3, #21
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002faa:	f7ff fb13 	bl	80025d4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fae:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002fb0:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb2:	04ad      	lsls	r5, r5, #18
 8002fb4:	e005      	b.n	8002fc2 <HAL_RCC_OscConfig+0x47e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb6:	f7ff fb0d 	bl	80025d4 <HAL_GetTick>
 8002fba:	1b00      	subs	r0, r0, r4
 8002fbc:	2802      	cmp	r0, #2
 8002fbe:	d900      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x47e>
 8002fc0:	e743      	b.n	8002e4a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc2:	6833      	ldr	r3, [r6, #0]
 8002fc4:	422b      	tst	r3, r5
 8002fc6:	d0f6      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 8002fc8:	2000      	movs	r0, #0
 8002fca:	e5ec      	b.n	8002ba6 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fcc:	2104      	movs	r1, #4
 8002fce:	4b07      	ldr	r3, [pc, #28]	@ (8002fec <HAL_RCC_OscConfig+0x4a8>)
 8002fd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fd8:	3903      	subs	r1, #3
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fde:	e713      	b.n	8002e08 <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe0:	68e3      	ldr	r3, [r4, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1a6      	bne.n	8002f34 <HAL_RCC_OscConfig+0x3f0>
 8002fe6:	e5dd      	b.n	8002ba4 <HAL_RCC_OscConfig+0x60>
 8002fe8:	fffffeff 	.word	0xfffffeff
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	ffff80ff 	.word	0xffff80ff
 8002ff4:	efffffff 	.word	0xefffffff
 8002ff8:	feffffff 	.word	0xfeffffff
 8002ffc:	1fc1808c 	.word	0x1fc1808c

08003000 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003000:	2338      	movs	r3, #56	@ 0x38
 8003002:	4a22      	ldr	r2, [pc, #136]	@ (800308c <HAL_RCC_GetSysClockFreq+0x8c>)
{
 8003004:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003006:	6891      	ldr	r1, [r2, #8]
 8003008:	420b      	tst	r3, r1
 800300a:	d105      	bne.n	8003018 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800300c:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800300e:	4820      	ldr	r0, [pc, #128]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003010:	049b      	lsls	r3, r3, #18
 8003012:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003014:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8003016:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003018:	6891      	ldr	r1, [r2, #8]
 800301a:	4019      	ands	r1, r3
 800301c:	2908      	cmp	r1, #8
 800301e:	d014      	beq.n	800304a <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003020:	6891      	ldr	r1, [r2, #8]
 8003022:	4019      	ands	r1, r3
 8003024:	2910      	cmp	r1, #16
 8003026:	d012      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003028:	6891      	ldr	r1, [r2, #8]
 800302a:	4019      	ands	r1, r3
 800302c:	2920      	cmp	r1, #32
 800302e:	d024      	beq.n	800307a <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003030:	6890      	ldr	r0, [r2, #8]
 8003032:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8003034:	3818      	subs	r0, #24
 8003036:	1e43      	subs	r3, r0, #1
 8003038:	4198      	sbcs	r0, r3
 800303a:	4b16      	ldr	r3, [pc, #88]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x94>)
 800303c:	4240      	negs	r0, r0
 800303e:	4018      	ands	r0, r3
 8003040:	23fa      	movs	r3, #250	@ 0xfa
 8003042:	01db      	lsls	r3, r3, #7
 8003044:	469c      	mov	ip, r3
 8003046:	4460      	add	r0, ip
 8003048:	e7e5      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 800304a:	4813      	ldr	r0, [pc, #76]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x98>)
 800304c:	e7e3      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800304e:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003050:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003052:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003054:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003056:	0649      	lsls	r1, r1, #25
 8003058:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800305a:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800305c:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800305e:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 8003060:	079b      	lsls	r3, r3, #30
 8003062:	d00d      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003064:	480a      	ldr	r0, [pc, #40]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x90>)
 8003066:	f7fd f84b 	bl	8000100 <__udivsi3>
 800306a:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800306c:	4b07      	ldr	r3, [pc, #28]	@ (800308c <HAL_RCC_GetSysClockFreq+0x8c>)
 800306e:	68d9      	ldr	r1, [r3, #12]
 8003070:	0f49      	lsrs	r1, r1, #29
 8003072:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8003074:	f7fd f844 	bl	8000100 <__udivsi3>
 8003078:	e7cd      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 800307a:	2080      	movs	r0, #128	@ 0x80
 800307c:	0200      	lsls	r0, r0, #8
 800307e:	e7ca      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003080:	4805      	ldr	r0, [pc, #20]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x98>)
 8003082:	f7fd f83d 	bl	8000100 <__udivsi3>
 8003086:	4360      	muls	r0, r4
        break;
 8003088:	e7f0      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x6c>
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	40021000 	.word	0x40021000
 8003090:	00f42400 	.word	0x00f42400
 8003094:	ffff8300 	.word	0xffff8300
 8003098:	007a1200 	.word	0x007a1200

0800309c <HAL_RCC_ClockConfig>:
{
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	46ce      	mov	lr, r9
 80030a0:	4647      	mov	r7, r8
 80030a2:	0005      	movs	r5, r0
 80030a4:	000c      	movs	r4, r1
 80030a6:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 80030a8:	2800      	cmp	r0, #0
 80030aa:	d026      	beq.n	80030fa <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030ac:	2207      	movs	r2, #7
 80030ae:	4e57      	ldr	r6, [pc, #348]	@ (800320c <HAL_RCC_ClockConfig+0x170>)
 80030b0:	6833      	ldr	r3, [r6, #0]
 80030b2:	4013      	ands	r3, r2
 80030b4:	428b      	cmp	r3, r1
 80030b6:	d35e      	bcc.n	8003176 <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b8:	682b      	ldr	r3, [r5, #0]
 80030ba:	079a      	lsls	r2, r3, #30
 80030bc:	d50e      	bpl.n	80030dc <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030be:	075a      	lsls	r2, r3, #29
 80030c0:	d505      	bpl.n	80030ce <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030c2:	22e0      	movs	r2, #224	@ 0xe0
 80030c4:	4952      	ldr	r1, [pc, #328]	@ (8003210 <HAL_RCC_ClockConfig+0x174>)
 80030c6:	01d2      	lsls	r2, r2, #7
 80030c8:	6888      	ldr	r0, [r1, #8]
 80030ca:	4302      	orrs	r2, r0
 80030cc:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ce:	4950      	ldr	r1, [pc, #320]	@ (8003210 <HAL_RCC_ClockConfig+0x174>)
 80030d0:	4850      	ldr	r0, [pc, #320]	@ (8003214 <HAL_RCC_ClockConfig+0x178>)
 80030d2:	688a      	ldr	r2, [r1, #8]
 80030d4:	4002      	ands	r2, r0
 80030d6:	68a8      	ldr	r0, [r5, #8]
 80030d8:	4302      	orrs	r2, r0
 80030da:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030dc:	07db      	lsls	r3, r3, #31
 80030de:	d52b      	bpl.n	8003138 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e0:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030e2:	4a4b      	ldr	r2, [pc, #300]	@ (8003210 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d100      	bne.n	80030ea <HAL_RCC_ClockConfig+0x4e>
 80030e8:	e07c      	b.n	80031e4 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d007      	beq.n	80030fe <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d000      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x58>
 80030f2:	e07d      	b.n	80031f0 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	0552      	lsls	r2, r2, #21
 80030f8:	d404      	bmi.n	8003104 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80030fa:	2001      	movs	r0, #1
 80030fc:	e037      	b.n	800316e <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	0192      	lsls	r2, r2, #6
 8003102:	d5fa      	bpl.n	80030fa <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003104:	2107      	movs	r1, #7
 8003106:	4e42      	ldr	r6, [pc, #264]	@ (8003210 <HAL_RCC_ClockConfig+0x174>)
 8003108:	68b2      	ldr	r2, [r6, #8]
 800310a:	438a      	bics	r2, r1
 800310c:	4313      	orrs	r3, r2
 800310e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003110:	f7ff fa60 	bl	80025d4 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003114:	2338      	movs	r3, #56	@ 0x38
 8003116:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003118:	4b3f      	ldr	r3, [pc, #252]	@ (8003218 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 800311a:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311c:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311e:	e004      	b.n	800312a <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003120:	f7ff fa58 	bl	80025d4 <HAL_GetTick>
 8003124:	1bc0      	subs	r0, r0, r7
 8003126:	4548      	cmp	r0, r9
 8003128:	d83b      	bhi.n	80031a2 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312a:	4643      	mov	r3, r8
 800312c:	68b2      	ldr	r2, [r6, #8]
 800312e:	401a      	ands	r2, r3
 8003130:	686b      	ldr	r3, [r5, #4]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	429a      	cmp	r2, r3
 8003136:	d1f3      	bne.n	8003120 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003138:	2207      	movs	r2, #7
 800313a:	4e34      	ldr	r6, [pc, #208]	@ (800320c <HAL_RCC_ClockConfig+0x170>)
 800313c:	6833      	ldr	r3, [r6, #0]
 800313e:	4013      	ands	r3, r2
 8003140:	42a3      	cmp	r3, r4
 8003142:	d838      	bhi.n	80031b6 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	075b      	lsls	r3, r3, #29
 8003148:	d42d      	bmi.n	80031a6 <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800314a:	f7ff ff59 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 800314e:	4b30      	ldr	r3, [pc, #192]	@ (8003210 <HAL_RCC_ClockConfig+0x174>)
 8003150:	4a32      	ldr	r2, [pc, #200]	@ (800321c <HAL_RCC_ClockConfig+0x180>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4932      	ldr	r1, [pc, #200]	@ (8003220 <HAL_RCC_ClockConfig+0x184>)
 8003156:	051b      	lsls	r3, r3, #20
 8003158:	0f1b      	lsrs	r3, r3, #28
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	589b      	ldr	r3, [r3, r2]
 800315e:	221f      	movs	r2, #31
 8003160:	4013      	ands	r3, r2
 8003162:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 8003164:	4b2f      	ldr	r3, [pc, #188]	@ (8003224 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003166:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	f7ff f9ed 	bl	8002548 <HAL_InitTick>
}
 800316e:	bcc0      	pop	{r6, r7}
 8003170:	46b9      	mov	r9, r7
 8003172:	46b0      	mov	r8, r6
 8003174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	6833      	ldr	r3, [r6, #0]
 8003178:	4393      	bics	r3, r2
 800317a:	430b      	orrs	r3, r1
 800317c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800317e:	f7ff fa29 	bl	80025d4 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003182:	2307      	movs	r3, #7
 8003184:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003186:	4b24      	ldr	r3, [pc, #144]	@ (8003218 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8003188:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800318a:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800318c:	4642      	mov	r2, r8
 800318e:	6833      	ldr	r3, [r6, #0]
 8003190:	4013      	ands	r3, r2
 8003192:	42a3      	cmp	r3, r4
 8003194:	d100      	bne.n	8003198 <HAL_RCC_ClockConfig+0xfc>
 8003196:	e78f      	b.n	80030b8 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003198:	f7ff fa1c 	bl	80025d4 <HAL_GetTick>
 800319c:	1bc0      	subs	r0, r0, r7
 800319e:	4548      	cmp	r0, r9
 80031a0:	d9f4      	bls.n	800318c <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 80031a2:	2003      	movs	r0, #3
 80031a4:	e7e3      	b.n	800316e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003210 <HAL_RCC_ClockConfig+0x174>)
 80031a8:	491f      	ldr	r1, [pc, #124]	@ (8003228 <HAL_RCC_ClockConfig+0x18c>)
 80031aa:	6893      	ldr	r3, [r2, #8]
 80031ac:	400b      	ands	r3, r1
 80031ae:	68e9      	ldr	r1, [r5, #12]
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6093      	str	r3, [r2, #8]
 80031b4:	e7c9      	b.n	800314a <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	6833      	ldr	r3, [r6, #0]
 80031b8:	4393      	bics	r3, r2
 80031ba:	4323      	orrs	r3, r4
 80031bc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80031be:	f7ff fa09 	bl	80025d4 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031c2:	2307      	movs	r3, #7
 80031c4:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c6:	4b14      	ldr	r3, [pc, #80]	@ (8003218 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80031c8:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ca:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031cc:	4642      	mov	r2, r8
 80031ce:	6833      	ldr	r3, [r6, #0]
 80031d0:	4013      	ands	r3, r2
 80031d2:	42a3      	cmp	r3, r4
 80031d4:	d0b6      	beq.n	8003144 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d6:	f7ff f9fd 	bl	80025d4 <HAL_GetTick>
 80031da:	1bc0      	subs	r0, r0, r7
 80031dc:	4548      	cmp	r0, r9
 80031de:	d9f5      	bls.n	80031cc <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 80031e0:	2003      	movs	r0, #3
 80031e2:	e7c4      	b.n	800316e <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	0392      	lsls	r2, r2, #14
 80031e8:	d500      	bpl.n	80031ec <HAL_RCC_ClockConfig+0x150>
 80031ea:	e78b      	b.n	8003104 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80031ec:	2001      	movs	r0, #1
 80031ee:	e7be      	b.n	800316e <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031f6:	0792      	lsls	r2, r2, #30
 80031f8:	d500      	bpl.n	80031fc <HAL_RCC_ClockConfig+0x160>
 80031fa:	e783      	b.n	8003104 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80031fc:	2001      	movs	r0, #1
 80031fe:	e7b6      	b.n	800316e <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003200:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003202:	0792      	lsls	r2, r2, #30
 8003204:	d500      	bpl.n	8003208 <HAL_RCC_ClockConfig+0x16c>
 8003206:	e77d      	b.n	8003104 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8003208:	2001      	movs	r0, #1
 800320a:	e7b0      	b.n	800316e <HAL_RCC_ClockConfig+0xd2>
 800320c:	40022000 	.word	0x40022000
 8003210:	40021000 	.word	0x40021000
 8003214:	fffff0ff 	.word	0xfffff0ff
 8003218:	00001388 	.word	0x00001388
 800321c:	0800426c 	.word	0x0800426c
 8003220:	20000000 	.word	0x20000000
 8003224:	20000008 	.word	0x20000008
 8003228:	ffff8fff 	.word	0xffff8fff

0800322c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800322c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800322e:	46c6      	mov	lr, r8
 8003230:	b500      	push	{lr}
 8003232:	000c      	movs	r4, r1
 8003234:	0016      	movs	r6, r2
 8003236:	b082      	sub	sp, #8
 8003238:	0007      	movs	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800323a:	f7ff f9cb 	bl	80025d4 <HAL_GetTick>
 800323e:	1936      	adds	r6, r6, r4
 8003240:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8003242:	f7ff f9c7 	bl	80025d4 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003246:	2580      	movs	r5, #128	@ 0x80
  tmp_tickstart = HAL_GetTick();
 8003248:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800324a:	4b26      	ldr	r3, [pc, #152]	@ (80032e4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	015b      	lsls	r3, r3, #5
 8003250:	0d1b      	lsrs	r3, r3, #20
 8003252:	4373      	muls	r3, r6
 8003254:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	e001      	b.n	800325e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 800325a:	1c63      	adds	r3, r4, #1
 800325c:	d107      	bne.n	800326e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800325e:	6893      	ldr	r3, [r2, #8]
 8003260:	421d      	tst	r5, r3
 8003262:	d1fa      	bne.n	800325a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
      }
      count--;
    }
  }

  return HAL_OK;
 8003264:	2000      	movs	r0, #0
}
 8003266:	b002      	add	sp, #8
 8003268:	bc80      	pop	{r7}
 800326a:	46b8      	mov	r8, r7
 800326c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800326e:	f7ff f9b1 	bl	80025d4 <HAL_GetTick>
 8003272:	4643      	mov	r3, r8
 8003274:	1ac0      	subs	r0, r0, r3
 8003276:	42b0      	cmp	r0, r6
 8003278:	d208      	bcs.n	800328c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
      if (count == 0U)
 800327a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800327c:	1e5a      	subs	r2, r3, #1
 800327e:	4193      	sbcs	r3, r2
 8003280:	425b      	negs	r3, r3
 8003282:	401e      	ands	r6, r3
      count--;
 8003284:	9b01      	ldr	r3, [sp, #4]
 8003286:	3b01      	subs	r3, #1
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	e7e4      	b.n	8003256 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800328c:	21e0      	movs	r1, #224	@ 0xe0
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	438a      	bics	r2, r1
 8003294:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003296:	2282      	movs	r2, #130	@ 0x82
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	0052      	lsls	r2, r2, #1
 800329c:	4291      	cmp	r1, r2
 800329e:	d013      	beq.n	80032c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032a0:	2180      	movs	r1, #128	@ 0x80
 80032a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032a4:	0189      	lsls	r1, r1, #6
 80032a6:	428a      	cmp	r2, r1
 80032a8:	d106      	bne.n	80032b8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
          SPI_RESET_CRC(hspi);
 80032aa:	6819      	ldr	r1, [r3, #0]
 80032ac:	480e      	ldr	r0, [pc, #56]	@ (80032e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 80032ae:	4001      	ands	r1, r0
 80032b0:	6019      	str	r1, [r3, #0]
 80032b2:	6819      	ldr	r1, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80032b8:	235d      	movs	r3, #93	@ 0x5d
 80032ba:	2201      	movs	r2, #1
 80032bc:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 80032be:	2200      	movs	r2, #0
 80032c0:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 80032c2:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80032c4:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 80032c6:	e7ce      	b.n	8003266 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032c8:	2180      	movs	r1, #128	@ 0x80
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	0209      	lsls	r1, r1, #8
 80032ce:	428a      	cmp	r2, r1
 80032d0:	d003      	beq.n	80032da <SPI_WaitFlagStateUntilTimeout.constprop.0+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032d2:	2180      	movs	r1, #128	@ 0x80
 80032d4:	00c9      	lsls	r1, r1, #3
 80032d6:	428a      	cmp	r2, r1
 80032d8:	d1e2      	bne.n	80032a0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
          __HAL_SPI_DISABLE(hspi);
 80032da:	2140      	movs	r1, #64	@ 0x40
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	438a      	bics	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	e7dd      	b.n	80032a0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
 80032e4:	20000000 	.word	0x20000000
 80032e8:	ffffdfff 	.word	0xffffdfff

080032ec <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80032ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ee:	46de      	mov	lr, fp
 80032f0:	4657      	mov	r7, sl
 80032f2:	464e      	mov	r6, r9
 80032f4:	4645      	mov	r5, r8
 80032f6:	b5e0      	push	{r5, r6, r7, lr}
 80032f8:	b083      	sub	sp, #12
 80032fa:	001e      	movs	r6, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032fc:	466b      	mov	r3, sp
 80032fe:	1cdf      	adds	r7, r3, #3
 8003300:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003302:	0015      	movs	r5, r2
 8003304:	4681      	mov	r9, r0
 8003306:	000c      	movs	r4, r1
  __IO uint8_t  tmpreg8 = 0;
 8003308:	703b      	strb	r3, [r7, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800330a:	f7ff f963 	bl	80025d4 <HAL_GetTick>
 800330e:	1976      	adds	r6, r6, r5
 8003310:	1a33      	subs	r3, r6, r0
 8003312:	4698      	mov	r8, r3
  tmp_tickstart = HAL_GetTick();
 8003314:	f7ff f95e 	bl	80025d4 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003318:	464b      	mov	r3, r9
 800331a:	681b      	ldr	r3, [r3, #0]
  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);

  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800331c:	26c0      	movs	r6, #192	@ 0xc0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800331e:	469a      	mov	sl, r3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003320:	4b34      	ldr	r3, [pc, #208]	@ (80033f4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
  tmp_tickstart = HAL_GetTick();
 8003322:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003324:	681b      	ldr	r3, [r3, #0]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003326:	00f6      	lsls	r6, r6, #3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003328:	009a      	lsls	r2, r3, #2
 800332a:	18d2      	adds	r2, r2, r3
 800332c:	00d3      	lsls	r3, r2, #3
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	4642      	mov	r2, r8
 8003332:	0d1b      	lsrs	r3, r3, #20
 8003334:	4353      	muls	r3, r2
  while ((hspi->Instance->SR & Fifo) != State)
 8003336:	4652      	mov	r2, sl
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003338:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800333a:	e001      	b.n	8003340 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 800333c:	1c6b      	adds	r3, r5, #1
 800333e:	d10b      	bne.n	8003358 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8003340:	6893      	ldr	r3, [r2, #8]
 8003342:	4223      	tst	r3, r4
 8003344:	d01d      	beq.n	8003382 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x96>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003346:	42b4      	cmp	r4, r6
 8003348:	d1f8      	bne.n	800333c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x50>
      tmpreg8 = *ptmpreg8;
 800334a:	4653      	mov	r3, sl
 800334c:	7b1b      	ldrb	r3, [r3, #12]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	703b      	strb	r3, [r7, #0]
      UNUSED(tmpreg8);
 8003352:	783b      	ldrb	r3, [r7, #0]
    if (Timeout != HAL_MAX_DELAY)
 8003354:	1c6b      	adds	r3, r5, #1
 8003356:	d0f3      	beq.n	8003340 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003358:	f7ff f93c 	bl	80025d4 <HAL_GetTick>
 800335c:	465b      	mov	r3, fp
 800335e:	1ac0      	subs	r0, r0, r3
 8003360:	4540      	cmp	r0, r8
 8003362:	d216      	bcs.n	8003392 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003364:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8003366:	1e5a      	subs	r2, r3, #1
 8003368:	4193      	sbcs	r3, r2
 800336a:	4642      	mov	r2, r8
 800336c:	425b      	negs	r3, r3
 800336e:	401a      	ands	r2, r3
      }
      count--;
 8003370:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003372:	4690      	mov	r8, r2
      count--;
 8003374:	3b01      	subs	r3, #1
 8003376:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003378:	464b      	mov	r3, r9
 800337a:	681a      	ldr	r2, [r3, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800337c:	6893      	ldr	r3, [r2, #8]
 800337e:	4223      	tst	r3, r4
 8003380:	d1e1      	bne.n	8003346 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
    }
  }

  return HAL_OK;
 8003382:	2000      	movs	r0, #0
}
 8003384:	b003      	add	sp, #12
 8003386:	bcf0      	pop	{r4, r5, r6, r7}
 8003388:	46bb      	mov	fp, r7
 800338a:	46b2      	mov	sl, r6
 800338c:	46a9      	mov	r9, r5
 800338e:	46a0      	mov	r8, r4
 8003390:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003392:	464b      	mov	r3, r9
 8003394:	21e0      	movs	r1, #224	@ 0xe0
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800339c:	4649      	mov	r1, r9
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800339e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a0:	2282      	movs	r2, #130	@ 0x82
 80033a2:	6849      	ldr	r1, [r1, #4]
 80033a4:	0052      	lsls	r2, r2, #1
 80033a6:	4291      	cmp	r1, r2
 80033a8:	d015      	beq.n	80033d6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033aa:	464a      	mov	r2, r9
 80033ac:	2180      	movs	r1, #128	@ 0x80
 80033ae:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80033b0:	0189      	lsls	r1, r1, #6
 80033b2:	428a      	cmp	r2, r1
 80033b4:	d106      	bne.n	80033c4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
          SPI_RESET_CRC(hspi);
 80033b6:	6819      	ldr	r1, [r3, #0]
 80033b8:	480f      	ldr	r0, [pc, #60]	@ (80033f8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x10c>)
 80033ba:	4001      	ands	r1, r0
 80033bc:	6019      	str	r1, [r3, #0]
 80033be:	6819      	ldr	r1, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80033c4:	235d      	movs	r3, #93	@ 0x5d
 80033c6:	2201      	movs	r2, #1
 80033c8:	4649      	mov	r1, r9
 80033ca:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 80033cc:	2200      	movs	r2, #0
 80033ce:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 80033d0:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80033d2:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 80033d4:	e7d6      	b.n	8003384 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033d6:	464a      	mov	r2, r9
 80033d8:	2180      	movs	r1, #128	@ 0x80
 80033da:	6892      	ldr	r2, [r2, #8]
 80033dc:	0209      	lsls	r1, r1, #8
 80033de:	428a      	cmp	r2, r1
 80033e0:	d003      	beq.n	80033ea <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033e2:	2180      	movs	r1, #128	@ 0x80
 80033e4:	00c9      	lsls	r1, r1, #3
 80033e6:	428a      	cmp	r2, r1
 80033e8:	d1df      	bne.n	80033aa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          __HAL_SPI_DISABLE(hspi);
 80033ea:	2140      	movs	r1, #64	@ 0x40
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	438a      	bics	r2, r1
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	e7da      	b.n	80033aa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
 80033f4:	20000000 	.word	0x20000000
 80033f8:	ffffdfff 	.word	0xffffdfff

080033fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033fe:	0013      	movs	r3, r2
{
 8003400:	000d      	movs	r5, r1
 8003402:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003404:	000a      	movs	r2, r1
 8003406:	21c0      	movs	r1, #192	@ 0xc0
 8003408:	0149      	lsls	r1, r1, #5
{
 800340a:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800340c:	f7ff ff6e 	bl	80032ec <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003410:	2800      	cmp	r0, #0
 8003412:	d10f      	bne.n	8003434 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003414:	0032      	movs	r2, r6
 8003416:	0029      	movs	r1, r5
 8003418:	0020      	movs	r0, r4
 800341a:	f7ff ff07 	bl	800322c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800341e:	2800      	cmp	r0, #0
 8003420:	d108      	bne.n	8003434 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003422:	21c0      	movs	r1, #192	@ 0xc0
 8003424:	0033      	movs	r3, r6
 8003426:	002a      	movs	r2, r5
 8003428:	0020      	movs	r0, r4
 800342a:	00c9      	lsls	r1, r1, #3
 800342c:	f7ff ff5e 	bl	80032ec <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003430:	2800      	cmp	r0, #0
 8003432:	d004      	beq.n	800343e <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003434:	2220      	movs	r2, #32
    return HAL_TIMEOUT;
 8003436:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003438:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800343a:	4313      	orrs	r3, r2
 800343c:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800343e:	bd70      	pop	{r4, r5, r6, pc}

08003440 <HAL_SPI_Init>:
{
 8003440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003442:	46de      	mov	lr, fp
 8003444:	4657      	mov	r7, sl
 8003446:	464e      	mov	r6, r9
 8003448:	4645      	mov	r5, r8
 800344a:	0004      	movs	r4, r0
 800344c:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 800344e:	2800      	cmp	r0, #0
 8003450:	d100      	bne.n	8003454 <HAL_SPI_Init+0x14>
 8003452:	e093      	b.n	800357c <HAL_SPI_Init+0x13c>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003454:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8003456:	2d00      	cmp	r5, #0
 8003458:	d069      	beq.n	800352e <HAL_SPI_Init+0xee>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800345a:	2300      	movs	r3, #0
 800345c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800345e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003460:	2300      	movs	r3, #0
 8003462:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003464:	335d      	adds	r3, #93	@ 0x5d
 8003466:	5ce3      	ldrb	r3, [r4, r3]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d06c      	beq.n	8003548 <HAL_SPI_Init+0x108>
  hspi->State = HAL_SPI_STATE_BUSY;
 800346e:	235d      	movs	r3, #93	@ 0x5d
 8003470:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 8003472:	2140      	movs	r1, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8003474:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8003476:	6822      	ldr	r2, [r4, #0]
 8003478:	6813      	ldr	r3, [r2, #0]
 800347a:	438b      	bics	r3, r1
 800347c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800347e:	23e0      	movs	r3, #224	@ 0xe0
 8003480:	68e1      	ldr	r1, [r4, #12]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4299      	cmp	r1, r3
 8003486:	d866      	bhi.n	8003556 <HAL_SPI_Init+0x116>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003488:	d000      	beq.n	800348c <HAL_SPI_Init+0x4c>
 800348a:	e070      	b.n	800356e <HAL_SPI_Init+0x12e>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800348c:	2380      	movs	r3, #128	@ 0x80
 800348e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003490:	019b      	lsls	r3, r3, #6
 8003492:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003494:	2380      	movs	r3, #128	@ 0x80
 8003496:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003498:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800349a:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800349c:	2682      	movs	r6, #130	@ 0x82
 800349e:	2784      	movs	r7, #132	@ 0x84
 80034a0:	6863      	ldr	r3, [r4, #4]
 80034a2:	0076      	lsls	r6, r6, #1
 80034a4:	4033      	ands	r3, r6
 80034a6:	68a6      	ldr	r6, [r4, #8]
 80034a8:	023f      	lsls	r7, r7, #8
 80034aa:	403e      	ands	r6, r7
 80034ac:	2702      	movs	r7, #2
 80034ae:	4333      	orrs	r3, r6
 80034b0:	6926      	ldr	r6, [r4, #16]
 80034b2:	69a0      	ldr	r0, [r4, #24]
 80034b4:	403e      	ands	r6, r7
 80034b6:	4333      	orrs	r3, r6
 80034b8:	2601      	movs	r6, #1
 80034ba:	6967      	ldr	r7, [r4, #20]
 80034bc:	46b2      	mov	sl, r6
 80034be:	4037      	ands	r7, r6
 80034c0:	433b      	orrs	r3, r7
 80034c2:	2780      	movs	r7, #128	@ 0x80
 80034c4:	00bf      	lsls	r7, r7, #2
 80034c6:	4007      	ands	r7, r0
 80034c8:	433b      	orrs	r3, r7
 80034ca:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034cc:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034ce:	46b8      	mov	r8, r7
 80034d0:	2738      	movs	r7, #56	@ 0x38
 80034d2:	46b9      	mov	r9, r7
 80034d4:	4647      	mov	r7, r8
 80034d6:	464e      	mov	r6, r9
 80034d8:	4037      	ands	r7, r6
 80034da:	6a26      	ldr	r6, [r4, #32]
 80034dc:	433b      	orrs	r3, r7
 80034de:	46b0      	mov	r8, r6
 80034e0:	2680      	movs	r6, #128	@ 0x80
 80034e2:	4647      	mov	r7, r8
 80034e4:	4037      	ands	r7, r6
 80034e6:	4666      	mov	r6, ip
 80034e8:	433b      	orrs	r3, r7
 80034ea:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034ec:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034ee:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80034f2:	4033      	ands	r3, r6
 80034f4:	26f0      	movs	r6, #240	@ 0xf0
 80034f6:	0136      	lsls	r6, r6, #4
 80034f8:	4031      	ands	r1, r6
 80034fa:	4319      	orrs	r1, r3
 80034fc:	2304      	movs	r3, #4
 80034fe:	4003      	ands	r3, r0
 8003500:	4319      	orrs	r1, r3
 8003502:	2310      	movs	r3, #16
 8003504:	402b      	ands	r3, r5
 8003506:	4319      	orrs	r1, r3
 8003508:	465b      	mov	r3, fp
 800350a:	4319      	orrs	r1, r3
 800350c:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800350e:	69d3      	ldr	r3, [r2, #28]
 8003510:	491d      	ldr	r1, [pc, #116]	@ (8003588 <HAL_SPI_Init+0x148>)
  return HAL_OK;
 8003512:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003514:	400b      	ands	r3, r1
 8003516:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003518:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800351a:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800351c:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800351e:	335d      	adds	r3, #93	@ 0x5d
 8003520:	54e2      	strb	r2, [r4, r3]
}
 8003522:	bcf0      	pop	{r4, r5, r6, r7}
 8003524:	46bb      	mov	fp, r7
 8003526:	46b2      	mov	sl, r6
 8003528:	46a9      	mov	r9, r5
 800352a:	46a0      	mov	r8, r4
 800352c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800352e:	2382      	movs	r3, #130	@ 0x82
 8003530:	6842      	ldr	r2, [r0, #4]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	429a      	cmp	r2, r3
 8003536:	d093      	beq.n	8003460 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003538:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800353a:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800353c:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800353e:	335d      	adds	r3, #93	@ 0x5d
 8003540:	5ce3      	ldrb	r3, [r4, r3]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d192      	bne.n	800346e <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 8003548:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 800354a:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800354c:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 800354e:	f7fe ff55 	bl	80023fc <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003552:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8003554:	e78b      	b.n	800346e <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003556:	23f0      	movs	r3, #240	@ 0xf0
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	4299      	cmp	r1, r3
 800355c:	d110      	bne.n	8003580 <HAL_SPI_Init+0x140>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800355e:	2380      	movs	r3, #128	@ 0x80
 8003560:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003562:	019b      	lsls	r3, r3, #6
 8003564:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003566:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003568:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800356a:	469b      	mov	fp, r3
 800356c:	e796      	b.n	800349c <HAL_SPI_Init+0x5c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800356e:	2380      	movs	r3, #128	@ 0x80
 8003570:	015b      	lsls	r3, r3, #5
 8003572:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003574:	2300      	movs	r3, #0
 8003576:	469c      	mov	ip, r3
 8003578:	62a3      	str	r3, [r4, #40]	@ 0x28
 800357a:	e78f      	b.n	800349c <HAL_SPI_Init+0x5c>
    return HAL_ERROR;
 800357c:	2001      	movs	r0, #1
 800357e:	e7d0      	b.n	8003522 <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003580:	2300      	movs	r3, #0
 8003582:	469b      	mov	fp, r3
 8003584:	e7f6      	b.n	8003574 <HAL_SPI_Init+0x134>
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	fffff7ff 	.word	0xfffff7ff

0800358c <HAL_SPI_Transmit_DMA>:
  __HAL_LOCK(hspi);
 800358c:	235c      	movs	r3, #92	@ 0x5c
{
 800358e:	b570      	push	{r4, r5, r6, lr}
 8003590:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8003592:	5cc0      	ldrb	r0, [r0, r3]
 8003594:	2801      	cmp	r0, #1
 8003596:	d060      	beq.n	800365a <HAL_SPI_Transmit_DMA+0xce>
 8003598:	2001      	movs	r0, #1
 800359a:	54e0      	strb	r0, [r4, r3]
  if (hspi->State != HAL_SPI_STATE_READY)
 800359c:	3301      	adds	r3, #1
 800359e:	5ce5      	ldrb	r5, [r4, r3]
    errorcode = HAL_BUSY;
 80035a0:	3001      	adds	r0, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 80035a2:	2d01      	cmp	r5, #1
 80035a4:	d145      	bne.n	8003632 <HAL_SPI_Transmit_DMA+0xa6>
  if ((pData == NULL) || (Size == 0U))
 80035a6:	2900      	cmp	r1, #0
 80035a8:	d04b      	beq.n	8003642 <HAL_SPI_Transmit_DMA+0xb6>
 80035aa:	2a00      	cmp	r2, #0
 80035ac:	d049      	beq.n	8003642 <HAL_SPI_Transmit_DMA+0xb6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035ae:	3001      	adds	r0, #1
 80035b0:	54e0      	strb	r0, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035b2:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 80035b4:	87a2      	strh	r2, [r4, #60]	@ 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035b6:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80035b8:	87e2      	strh	r2, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = 0U;
 80035ba:	2244      	movs	r2, #68	@ 0x44
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035bc:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80035be:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80035c0:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035c2:	63a1      	str	r1, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80035c4:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 80035c6:	3202      	adds	r2, #2
 80035c8:	52a3      	strh	r3, [r4, r2]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ca:	2380      	movs	r3, #128	@ 0x80
 80035cc:	68a0      	ldr	r0, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80035ce:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	4298      	cmp	r0, r3
 80035d4:	d037      	beq.n	8003646 <HAL_SPI_Transmit_DMA+0xba>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80035d6:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80035d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003688 <HAL_SPI_Transmit_DMA+0xfc>)
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80035da:	4d2c      	ldr	r5, [pc, #176]	@ (800368c <HAL_SPI_Transmit_DMA+0x100>)
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80035dc:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80035de:	4b2c      	ldr	r3, [pc, #176]	@ (8003690 <HAL_SPI_Transmit_DMA+0x104>)
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80035e0:	68e6      	ldr	r6, [r4, #12]
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80035e2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80035e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003694 <HAL_SPI_Transmit_DMA+0x108>)
 80035e6:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	6383      	str	r3, [r0, #56]	@ 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80035ec:	6853      	ldr	r3, [r2, #4]
 80035ee:	402b      	ands	r3, r5
 80035f0:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80035f2:	23e0      	movs	r3, #224	@ 0xe0
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	429e      	cmp	r6, r3
 80035f8:	d804      	bhi.n	8003604 <HAL_SPI_Transmit_DMA+0x78>
 80035fa:	2380      	movs	r3, #128	@ 0x80
 80035fc:	6986      	ldr	r6, [r0, #24]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	429e      	cmp	r6, r3
 8003602:	d02c      	beq.n	800365e <HAL_SPI_Transmit_DMA+0xd2>
                                 hspi->TxXferCount))
 8003604:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003606:	320c      	adds	r2, #12
                                 hspi->TxXferCount))
 8003608:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800360a:	f7ff f8cf 	bl	80027ac <HAL_DMA_Start_IT>
 800360e:	2800      	cmp	r0, #0
 8003610:	d113      	bne.n	800363a <HAL_SPI_Transmit_DMA+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003612:	2240      	movs	r2, #64	@ 0x40
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	6819      	ldr	r1, [r3, #0]
 8003618:	420a      	tst	r2, r1
 800361a:	d102      	bne.n	8003622 <HAL_SPI_Transmit_DMA+0x96>
    __HAL_SPI_ENABLE(hspi);
 800361c:	6819      	ldr	r1, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003622:	2120      	movs	r1, #32
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	391e      	subs	r1, #30
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hspi);
 8003632:	235c      	movs	r3, #92	@ 0x5c
 8003634:	2200      	movs	r2, #0
 8003636:	54e2      	strb	r2, [r4, r3]
}
 8003638:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800363a:	2210      	movs	r2, #16
 800363c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800363e:	4313      	orrs	r3, r2
 8003640:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003642:	2001      	movs	r0, #1
 8003644:	e7f5      	b.n	8003632 <HAL_SPI_Transmit_DMA+0xa6>
    __HAL_SPI_DISABLE(hspi);
 8003646:	2040      	movs	r0, #64	@ 0x40
 8003648:	6813      	ldr	r3, [r2, #0]
 800364a:	4383      	bics	r3, r0
 800364c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800364e:	2380      	movs	r3, #128	@ 0x80
 8003650:	6810      	ldr	r0, [r2, #0]
 8003652:	01db      	lsls	r3, r3, #7
 8003654:	4303      	orrs	r3, r0
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	e7bd      	b.n	80035d6 <HAL_SPI_Transmit_DMA+0x4a>
  __HAL_LOCK(hspi);
 800365a:	2002      	movs	r0, #2
 800365c:	e7ec      	b.n	8003638 <HAL_SPI_Transmit_DMA+0xac>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800365e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003660:	07db      	lsls	r3, r3, #31
 8003662:	d406      	bmi.n	8003672 <HAL_SPI_Transmit_DMA+0xe6>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003664:	6853      	ldr	r3, [r2, #4]
 8003666:	402b      	ands	r3, r5
 8003668:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800366a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8003670:	e7c8      	b.n	8003604 <HAL_SPI_Transmit_DMA+0x78>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003672:	2380      	movs	r3, #128	@ 0x80
 8003674:	6855      	ldr	r5, [r2, #4]
 8003676:	01db      	lsls	r3, r3, #7
 8003678:	432b      	orrs	r3, r5
 800367a:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800367c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	3301      	adds	r3, #1
 8003682:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8003684:	e7be      	b.n	8003604 <HAL_SPI_Transmit_DMA+0x78>
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	080036a1 	.word	0x080036a1
 800368c:	ffffbfff 	.word	0xffffbfff
 8003690:	080036d5 	.word	0x080036d5
 8003694:	080036b1 	.word	0x080036b1

08003698 <HAL_SPI_TxCpltCallback>:
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
 8003698:	4770      	bx	lr
 800369a:	46c0      	nop			@ (mov r8, r8)

0800369c <HAL_SPI_TxHalfCpltCallback>:
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 800369c:	4770      	bx	lr
 800369e:	46c0      	nop			@ (mov r8, r8)

080036a0 <SPI_DMAHalfTransmitCplt>:
{
 80036a0:	b510      	push	{r4, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 80036a2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80036a4:	f7ff fffa 	bl	800369c <HAL_SPI_TxHalfCpltCallback>
}
 80036a8:	bd10      	pop	{r4, pc}
 80036aa:	46c0      	nop			@ (mov r8, r8)

080036ac <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 80036ac:	4770      	bx	lr
 80036ae:	46c0      	nop			@ (mov r8, r8)

080036b0 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80036b0:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80036b2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 80036b4:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80036b6:	6802      	ldr	r2, [r0, #0]
 80036b8:	6853      	ldr	r3, [r2, #4]
 80036ba:	438b      	bics	r3, r1
 80036bc:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80036be:	2210      	movs	r2, #16
 80036c0:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80036c2:	4313      	orrs	r3, r2
 80036c4:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80036c6:	235d      	movs	r3, #93	@ 0x5d
 80036c8:	3a0f      	subs	r2, #15
 80036ca:	54c2      	strb	r2, [r0, r3]
  HAL_SPI_ErrorCallback(hspi);
 80036cc:	f7ff ffee 	bl	80036ac <HAL_SPI_ErrorCallback>
}
 80036d0:	bd10      	pop	{r4, pc}
 80036d2:	46c0      	nop			@ (mov r8, r8)

080036d4 <SPI_DMATransmitCplt>:
{
 80036d4:	b530      	push	{r4, r5, lr}
 80036d6:	0005      	movs	r5, r0
 80036d8:	b083      	sub	sp, #12
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80036da:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 80036dc:	f7fe ff7a 	bl	80025d4 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80036e0:	682b      	ldr	r3, [r5, #0]
 80036e2:	2520      	movs	r5, #32
 80036e4:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 80036e6:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80036e8:	421d      	tst	r5, r3
 80036ea:	d122      	bne.n	8003732 <SPI_DMATransmitCplt+0x5e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80036ec:	2002      	movs	r0, #2
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	6859      	ldr	r1, [r3, #4]
 80036f2:	43a9      	bics	r1, r5
 80036f4:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	4381      	bics	r1, r0
 80036fa:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80036fc:	0020      	movs	r0, r4
 80036fe:	2164      	movs	r1, #100	@ 0x64
 8003700:	f7ff fe7c 	bl	80033fc <SPI_EndRxTxTransaction>
 8003704:	2800      	cmp	r0, #0
 8003706:	d002      	beq.n	800370e <SPI_DMATransmitCplt+0x3a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003708:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800370a:	432b      	orrs	r3, r5
 800370c:	6623      	str	r3, [r4, #96]	@ 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800370e:	68a3      	ldr	r3, [r4, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d106      	bne.n	8003722 <SPI_DMATransmitCplt+0x4e>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	9201      	str	r2, [sp, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8003722:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 8003724:	2201      	movs	r2, #1
    hspi->TxXferCount = 0U;
 8003726:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003728:	335d      	adds	r3, #93	@ 0x5d
 800372a:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800372c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800372e:	2b00      	cmp	r3, #0
 8003730:	d104      	bne.n	800373c <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 8003732:	0020      	movs	r0, r4
 8003734:	f7ff ffb0 	bl	8003698 <HAL_SPI_TxCpltCallback>
}
 8003738:	b003      	add	sp, #12
 800373a:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800373c:	0020      	movs	r0, r4
 800373e:	f7ff ffb5 	bl	80036ac <HAL_SPI_ErrorCallback>
      return;
 8003742:	e7f9      	b.n	8003738 <SPI_DMATransmitCplt+0x64>

08003744 <_ZN10LED_Matrix7HandlerEv>:
  ******************************************************************************
**/

#include "LED_Matrix.h"

void LED_Matrix::Handler() {
 8003744:	b5b0      	push	{r4, r5, r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
                               0, 1, 3, 2, 0};
    static int point_list2[] = {7, 6, 2, 3,
                                7, 3, 1, 5,
                                7, 5, 4, 6, 7};

    for(int i = 0; i < 12; i++){
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e03e      	b.n	80037d0 <_ZN10LED_Matrix7HandlerEv+0x8c>
        for(int j = 0; j < 8; j++){
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	e035      	b.n	80037c4 <_ZN10LED_Matrix7HandlerEv+0x80>
            //ws2812_data[i * 8 + j] = data[point_list1[i]][point_list1[i + 1]][j];
            WS2812_color_set(data[point_list1[i]][point_list1[i + 1]][j], i * 8 + j);
 8003758:	4b44      	ldr	r3, [pc, #272]	@ (800386c <_ZN10LED_Matrix7HandlerEv+0x128>)
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	0092      	lsls	r2, r2, #2
 800375e:	58d0      	ldr	r0, [r2, r3]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	4b41      	ldr	r3, [pc, #260]	@ (800386c <_ZN10LED_Matrix7HandlerEv+0x128>)
 8003766:	0092      	lsls	r2, r2, #2
 8003768:	58d4      	ldr	r4, [r2, r3]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	b2da      	uxtb	r2, r3
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	18d3      	adds	r3, r2, r3
 8003778:	b2dd      	uxtb	r5, r3
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	001a      	movs	r2, r3
 8003780:	0052      	lsls	r2, r2, #1
 8003782:	18d2      	adds	r2, r2, r3
 8003784:	0023      	movs	r3, r4
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	191b      	adds	r3, r3, r4
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	18d2      	adds	r2, r2, r3
 800378e:	0003      	movs	r3, r0
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	181b      	adds	r3, r3, r0
 8003794:	019b      	lsls	r3, r3, #6
 8003796:	18d3      	adds	r3, r2, r3
 8003798:	5c5a      	ldrb	r2, [r3, r1]
 800379a:	18c8      	adds	r0, r1, r3
 800379c:	7840      	ldrb	r0, [r0, #1]
 800379e:	0200      	lsls	r0, r0, #8
 80037a0:	4302      	orrs	r2, r0
 80037a2:	18cb      	adds	r3, r1, r3
 80037a4:	789b      	ldrb	r3, [r3, #2]
 80037a6:	041b      	lsls	r3, r3, #16
 80037a8:	431a      	orrs	r2, r3
 80037aa:	2300      	movs	r3, #0
 80037ac:	0212      	lsls	r2, r2, #8
 80037ae:	0a12      	lsrs	r2, r2, #8
 80037b0:	0e1b      	lsrs	r3, r3, #24
 80037b2:	061b      	lsls	r3, r3, #24
 80037b4:	4313      	orrs	r3, r2
 80037b6:	0029      	movs	r1, r5
 80037b8:	0018      	movs	r0, r3
 80037ba:	f000 f8bf 	bl	800393c <_Z16WS2812_color_set7Color_th>
        for(int j = 0; j < 8; j++){
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	3301      	adds	r3, #1
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	2b07      	cmp	r3, #7
 80037c8:	ddc6      	ble.n	8003758 <_ZN10LED_Matrix7HandlerEv+0x14>
    for(int i = 0; i < 12; i++){
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	3301      	adds	r3, #1
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2b0b      	cmp	r3, #11
 80037d4:	ddbd      	ble.n	8003752 <_ZN10LED_Matrix7HandlerEv+0xe>
        }
    }
    for(int i = 0; i < 12; i++){
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	e03f      	b.n	800385c <_ZN10LED_Matrix7HandlerEv+0x118>
        for(int j = 0; j < 8; j++){
 80037dc:	2300      	movs	r3, #0
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	e036      	b.n	8003850 <_ZN10LED_Matrix7HandlerEv+0x10c>
            //ws2812_data[(i + 12) * 8 + j] = data[point_list2[i]][point_list2[i + 1]][j];
            WS2812_color_set(data[point_list2[i]][point_list2[i + 1]][j], (i + 12) * 8 + j);
 80037e2:	4b23      	ldr	r3, [pc, #140]	@ (8003870 <_ZN10LED_Matrix7HandlerEv+0x12c>)
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	0092      	lsls	r2, r2, #2
 80037e8:	58d0      	ldr	r0, [r2, r3]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	4b20      	ldr	r3, [pc, #128]	@ (8003870 <_ZN10LED_Matrix7HandlerEv+0x12c>)
 80037f0:	0092      	lsls	r2, r2, #2
 80037f2:	58d4      	ldr	r4, [r2, r3]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	330c      	adds	r3, #12
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	18d3      	adds	r3, r2, r3
 8003804:	b2dd      	uxtb	r5, r3
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	001a      	movs	r2, r3
 800380c:	0052      	lsls	r2, r2, #1
 800380e:	18d2      	adds	r2, r2, r3
 8003810:	0023      	movs	r3, r4
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	191b      	adds	r3, r3, r4
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	18d2      	adds	r2, r2, r3
 800381a:	0003      	movs	r3, r0
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	181b      	adds	r3, r3, r0
 8003820:	019b      	lsls	r3, r3, #6
 8003822:	18d3      	adds	r3, r2, r3
 8003824:	5c5a      	ldrb	r2, [r3, r1]
 8003826:	18c8      	adds	r0, r1, r3
 8003828:	7840      	ldrb	r0, [r0, #1]
 800382a:	0200      	lsls	r0, r0, #8
 800382c:	4302      	orrs	r2, r0
 800382e:	18cb      	adds	r3, r1, r3
 8003830:	789b      	ldrb	r3, [r3, #2]
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	431a      	orrs	r2, r3
 8003836:	2300      	movs	r3, #0
 8003838:	0212      	lsls	r2, r2, #8
 800383a:	0a12      	lsrs	r2, r2, #8
 800383c:	0e1b      	lsrs	r3, r3, #24
 800383e:	061b      	lsls	r3, r3, #24
 8003840:	4313      	orrs	r3, r2
 8003842:	0029      	movs	r1, r5
 8003844:	0018      	movs	r0, r3
 8003846:	f000 f879 	bl	800393c <_Z16WS2812_color_set7Color_th>
        for(int j = 0; j < 8; j++){
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	3301      	adds	r3, #1
 800384e:	60bb      	str	r3, [r7, #8]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b07      	cmp	r3, #7
 8003854:	ddc5      	ble.n	80037e2 <_ZN10LED_Matrix7HandlerEv+0x9e>
    for(int i = 0; i < 12; i++){
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3301      	adds	r3, #1
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b0b      	cmp	r3, #11
 8003860:	ddbc      	ble.n	80037dc <_ZN10LED_Matrix7HandlerEv+0x98>
        }
    }
}
 8003862:	46c0      	nop			@ (mov r8, r8)
 8003864:	46c0      	nop			@ (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	b006      	add	sp, #24
 800386a:	bdb0      	pop	{r4, r5, r7, pc}
 800386c:	2000000c 	.word	0x2000000c
 8003870:	20000040 	.word	0x20000040

08003874 <_ZN10LED_Matrix14set_edge_pointEii7Color_t>:

void LED_Matrix::set_edge_point(int edge_index, int point_index, Color_t color) {
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	003a      	movs	r2, r7
 8003882:	6013      	str	r3, [r2, #0]
    data[edge[edge_index][0]][edge[edge_index][1]][point_index] = color;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	32c0      	adds	r2, #192	@ 0xc0
 800388a:	00d2      	lsls	r2, r2, #3
 800388c:	58d1      	ldr	r1, [r2, r3]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4821      	ldr	r0, [pc, #132]	@ (8003918 <_ZN10LED_Matrix14set_edge_pointEii7Color_t+0xa4>)
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	18d3      	adds	r3, r2, r3
 8003898:	181b      	adds	r3, r3, r0
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	68fc      	ldr	r4, [r7, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	001a      	movs	r2, r3
 80038a2:	0052      	lsls	r2, r2, #1
 80038a4:	18d2      	adds	r2, r2, r3
 80038a6:	0003      	movs	r3, r0
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	181b      	adds	r3, r3, r0
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	18d2      	adds	r2, r2, r3
 80038b0:	000b      	movs	r3, r1
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	185b      	adds	r3, r3, r1
 80038b6:	019b      	lsls	r3, r3, #6
 80038b8:	18d3      	adds	r3, r2, r3
 80038ba:	003a      	movs	r2, r7
 80038bc:	18e3      	adds	r3, r4, r3
 80038be:	0011      	movs	r1, r2
 80038c0:	2203      	movs	r2, #3
 80038c2:	0018      	movs	r0, r3
 80038c4:	f000 fc8c 	bl	80041e0 <memcpy>
    data[edge[edge_index][1]][edge[edge_index][0]][7 - point_index] = color;
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4912      	ldr	r1, [pc, #72]	@ (8003918 <_ZN10LED_Matrix14set_edge_pointEii7Color_t+0xa4>)
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	18d3      	adds	r3, r2, r3
 80038d2:	185b      	adds	r3, r3, r1
 80038d4:	6819      	ldr	r1, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	32c0      	adds	r2, #192	@ 0xc0
 80038dc:	00d2      	lsls	r2, r2, #3
 80038de:	58d0      	ldr	r0, [r2, r3]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2207      	movs	r2, #7
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	68fc      	ldr	r4, [r7, #12]
 80038e8:	001a      	movs	r2, r3
 80038ea:	0052      	lsls	r2, r2, #1
 80038ec:	18d2      	adds	r2, r2, r3
 80038ee:	0003      	movs	r3, r0
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	181b      	adds	r3, r3, r0
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	18d2      	adds	r2, r2, r3
 80038f8:	000b      	movs	r3, r1
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	185b      	adds	r3, r3, r1
 80038fe:	019b      	lsls	r3, r3, #6
 8003900:	18d3      	adds	r3, r2, r3
 8003902:	003a      	movs	r2, r7
 8003904:	18e3      	adds	r3, r4, r3
 8003906:	0011      	movs	r1, r2
 8003908:	2203      	movs	r2, #3
 800390a:	0018      	movs	r0, r3
 800390c:	f000 fc68 	bl	80041e0 <memcpy>
}
 8003910:	46c0      	nop			@ (mov r8, r8)
 8003912:	46bd      	mov	sp, r7
 8003914:	b005      	add	sp, #20
 8003916:	bd90      	pop	{r4, r7, pc}
 8003918:	00000604 	.word	0x00000604

0800391c <_Z18WS2812_Handler_DMAv>:
    HAL_SPI_Transmit(&hspi1, buffer, 12, 10);
}


void WS2812_Handler_DMA()
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
	HAL_SPI_Transmit_DMA(&hspi1, ws2812_data_DMA, WS2812_LEN*3*4);
 8003920:	2390      	movs	r3, #144	@ 0x90
 8003922:	011a      	lsls	r2, r3, #4
 8003924:	4903      	ldr	r1, [pc, #12]	@ (8003934 <_Z18WS2812_Handler_DMAv+0x18>)
 8003926:	4b04      	ldr	r3, [pc, #16]	@ (8003938 <_Z18WS2812_Handler_DMAv+0x1c>)
 8003928:	0018      	movs	r0, r3
 800392a:	f7ff fe2f 	bl	800358c <HAL_SPI_Transmit_DMA>
}
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	2000015c 	.word	0x2000015c
 8003938:	200000f4 	.word	0x200000f4

0800393c <_Z16WS2812_color_set7Color_th>:

void WS2812_color_set(Color_t color, uint8_t num)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	1d3b      	adds	r3, r7, #4
 8003944:	6018      	str	r0, [r3, #0]
 8003946:	000a      	movs	r2, r1
 8003948:	1cfb      	adds	r3, r7, #3
 800394a:	701a      	strb	r2, [r3, #0]
	int i;
	i = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	60bb      	str	r3, [r7, #8]
	for(int j = 0; j != 4; ++j)
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	e048      	b.n	80039e8 <_Z16WS2812_color_set7Color_th+0xac>
	{
		ws2812_data_DMA[12*num+4*i+j] = (color.g & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 8003956:	1d3b      	adds	r3, r7, #4
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	0019      	movs	r1, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	2207      	movs	r2, #7
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	4119      	asrs	r1, r3
 8003966:	000b      	movs	r3, r1
 8003968:	2201      	movs	r2, #1
 800396a:	4013      	ands	r3, r2
 800396c:	d001      	beq.n	8003972 <_Z16WS2812_color_set7Color_th+0x36>
 800396e:	21c0      	movs	r1, #192	@ 0xc0
 8003970:	e000      	b.n	8003974 <_Z16WS2812_color_set7Color_th+0x38>
 8003972:	2180      	movs	r1, #128	@ 0x80
 8003974:	1cfb      	adds	r3, r7, #3
 8003976:	781a      	ldrb	r2, [r3, #0]
 8003978:	0013      	movs	r3, r2
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	189a      	adds	r2, r3, r2
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	18d3      	adds	r3, r2, r3
 8003982:	009a      	lsls	r2, r3, #2
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	18d3      	adds	r3, r2, r3
 8003988:	4a6c      	ldr	r2, [pc, #432]	@ (8003b3c <_Z16WS2812_color_set7Color_th+0x200>)
 800398a:	54d1      	strb	r1, [r2, r3]
		ws2812_data_DMA[12*num+4*i+j] |= color.g & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 800398c:	1cfb      	adds	r3, r7, #3
 800398e:	781a      	ldrb	r2, [r3, #0]
 8003990:	0013      	movs	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	189a      	adds	r2, r3, r2
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	18d3      	adds	r3, r2, r3
 800399a:	009a      	lsls	r2, r3, #2
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	18d3      	adds	r3, r2, r3
 80039a0:	4a66      	ldr	r2, [pc, #408]	@ (8003b3c <_Z16WS2812_color_set7Color_th+0x200>)
 80039a2:	5cd3      	ldrb	r3, [r2, r3]
 80039a4:	b25a      	sxtb	r2, r3
 80039a6:	1d3b      	adds	r3, r7, #4
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	0018      	movs	r0, r3
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2103      	movs	r1, #3
 80039b0:	1acb      	subs	r3, r1, r3
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4118      	asrs	r0, r3
 80039b6:	0003      	movs	r3, r0
 80039b8:	2101      	movs	r1, #1
 80039ba:	400b      	ands	r3, r1
 80039bc:	d001      	beq.n	80039c2 <_Z16WS2812_color_set7Color_th+0x86>
 80039be:	230c      	movs	r3, #12
 80039c0:	e000      	b.n	80039c4 <_Z16WS2812_color_set7Color_th+0x88>
 80039c2:	2308      	movs	r3, #8
 80039c4:	4313      	orrs	r3, r2
 80039c6:	b259      	sxtb	r1, r3
 80039c8:	1cfb      	adds	r3, r7, #3
 80039ca:	781a      	ldrb	r2, [r3, #0]
 80039cc:	0013      	movs	r3, r2
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	189a      	adds	r2, r3, r2
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	18d3      	adds	r3, r2, r3
 80039d6:	009a      	lsls	r2, r3, #2
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	18d3      	adds	r3, r2, r3
 80039dc:	b2c9      	uxtb	r1, r1
 80039de:	4a57      	ldr	r2, [pc, #348]	@ (8003b3c <_Z16WS2812_color_set7Color_th+0x200>)
 80039e0:	54d1      	strb	r1, [r2, r3]
	for(int j = 0; j != 4; ++j)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	3301      	adds	r3, #1
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d1b3      	bne.n	8003956 <_Z16WS2812_color_set7Color_th+0x1a>
	}
	i = 1;
 80039ee:	2301      	movs	r3, #1
 80039f0:	60bb      	str	r3, [r7, #8]
	for(int j = 0; j != 4; ++j)
 80039f2:	2300      	movs	r3, #0
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	e048      	b.n	8003a8a <_Z16WS2812_color_set7Color_th+0x14e>
	{
		ws2812_data_DMA[12*num+4*i+j] = (color.r & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 80039f8:	1d3b      	adds	r3, r7, #4
 80039fa:	785b      	ldrb	r3, [r3, #1]
 80039fc:	0019      	movs	r1, r3
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	2207      	movs	r2, #7
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	4119      	asrs	r1, r3
 8003a08:	000b      	movs	r3, r1
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d001      	beq.n	8003a14 <_Z16WS2812_color_set7Color_th+0xd8>
 8003a10:	21c0      	movs	r1, #192	@ 0xc0
 8003a12:	e000      	b.n	8003a16 <_Z16WS2812_color_set7Color_th+0xda>
 8003a14:	2180      	movs	r1, #128	@ 0x80
 8003a16:	1cfb      	adds	r3, r7, #3
 8003a18:	781a      	ldrb	r2, [r3, #0]
 8003a1a:	0013      	movs	r3, r2
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	189a      	adds	r2, r3, r2
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	18d3      	adds	r3, r2, r3
 8003a24:	009a      	lsls	r2, r3, #2
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	18d3      	adds	r3, r2, r3
 8003a2a:	4a44      	ldr	r2, [pc, #272]	@ (8003b3c <_Z16WS2812_color_set7Color_th+0x200>)
 8003a2c:	54d1      	strb	r1, [r2, r3]
		ws2812_data_DMA[12*num+4*i+j] |= color.r & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 8003a2e:	1cfb      	adds	r3, r7, #3
 8003a30:	781a      	ldrb	r2, [r3, #0]
 8003a32:	0013      	movs	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	189a      	adds	r2, r3, r2
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	18d3      	adds	r3, r2, r3
 8003a3c:	009a      	lsls	r2, r3, #2
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	18d3      	adds	r3, r2, r3
 8003a42:	4a3e      	ldr	r2, [pc, #248]	@ (8003b3c <_Z16WS2812_color_set7Color_th+0x200>)
 8003a44:	5cd3      	ldrb	r3, [r2, r3]
 8003a46:	b25a      	sxtb	r2, r3
 8003a48:	1d3b      	adds	r3, r7, #4
 8003a4a:	785b      	ldrb	r3, [r3, #1]
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2103      	movs	r1, #3
 8003a52:	1acb      	subs	r3, r1, r3
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4118      	asrs	r0, r3
 8003a58:	0003      	movs	r3, r0
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	400b      	ands	r3, r1
 8003a5e:	d001      	beq.n	8003a64 <_Z16WS2812_color_set7Color_th+0x128>
 8003a60:	230c      	movs	r3, #12
 8003a62:	e000      	b.n	8003a66 <_Z16WS2812_color_set7Color_th+0x12a>
 8003a64:	2308      	movs	r3, #8
 8003a66:	4313      	orrs	r3, r2
 8003a68:	b259      	sxtb	r1, r3
 8003a6a:	1cfb      	adds	r3, r7, #3
 8003a6c:	781a      	ldrb	r2, [r3, #0]
 8003a6e:	0013      	movs	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	189a      	adds	r2, r3, r2
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	18d3      	adds	r3, r2, r3
 8003a78:	009a      	lsls	r2, r3, #2
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	18d3      	adds	r3, r2, r3
 8003a7e:	b2c9      	uxtb	r1, r1
 8003a80:	4a2e      	ldr	r2, [pc, #184]	@ (8003b3c <_Z16WS2812_color_set7Color_th+0x200>)
 8003a82:	54d1      	strb	r1, [r2, r3]
	for(int j = 0; j != 4; ++j)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	3301      	adds	r3, #1
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d1b3      	bne.n	80039f8 <_Z16WS2812_color_set7Color_th+0xbc>
	}
	i = 2;
 8003a90:	2302      	movs	r3, #2
 8003a92:	60bb      	str	r3, [r7, #8]
	for(int j = 0; j != 4; ++j)
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e048      	b.n	8003b2c <_Z16WS2812_color_set7Color_th+0x1f0>
	{
		ws2812_data_DMA[12*num+4*i+j] = (color.b & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 8003a9a:	1d3b      	adds	r3, r7, #4
 8003a9c:	789b      	ldrb	r3, [r3, #2]
 8003a9e:	0019      	movs	r1, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	2207      	movs	r2, #7
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	4119      	asrs	r1, r3
 8003aaa:	000b      	movs	r3, r1
 8003aac:	2201      	movs	r2, #1
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d001      	beq.n	8003ab6 <_Z16WS2812_color_set7Color_th+0x17a>
 8003ab2:	21c0      	movs	r1, #192	@ 0xc0
 8003ab4:	e000      	b.n	8003ab8 <_Z16WS2812_color_set7Color_th+0x17c>
 8003ab6:	2180      	movs	r1, #128	@ 0x80
 8003ab8:	1cfb      	adds	r3, r7, #3
 8003aba:	781a      	ldrb	r2, [r3, #0]
 8003abc:	0013      	movs	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	189a      	adds	r2, r3, r2
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	18d3      	adds	r3, r2, r3
 8003ac6:	009a      	lsls	r2, r3, #2
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	18d3      	adds	r3, r2, r3
 8003acc:	4a1b      	ldr	r2, [pc, #108]	@ (8003b3c <_Z16WS2812_color_set7Color_th+0x200>)
 8003ace:	54d1      	strb	r1, [r2, r3]
		ws2812_data_DMA[12*num+4*i+j] |= color.b & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 8003ad0:	1cfb      	adds	r3, r7, #3
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	0013      	movs	r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	189a      	adds	r2, r3, r2
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	18d3      	adds	r3, r2, r3
 8003ade:	009a      	lsls	r2, r3, #2
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	18d3      	adds	r3, r2, r3
 8003ae4:	4a15      	ldr	r2, [pc, #84]	@ (8003b3c <_Z16WS2812_color_set7Color_th+0x200>)
 8003ae6:	5cd3      	ldrb	r3, [r2, r3]
 8003ae8:	b25a      	sxtb	r2, r3
 8003aea:	1d3b      	adds	r3, r7, #4
 8003aec:	789b      	ldrb	r3, [r3, #2]
 8003aee:	0018      	movs	r0, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2103      	movs	r1, #3
 8003af4:	1acb      	subs	r3, r1, r3
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	4118      	asrs	r0, r3
 8003afa:	0003      	movs	r3, r0
 8003afc:	2101      	movs	r1, #1
 8003afe:	400b      	ands	r3, r1
 8003b00:	d001      	beq.n	8003b06 <_Z16WS2812_color_set7Color_th+0x1ca>
 8003b02:	230c      	movs	r3, #12
 8003b04:	e000      	b.n	8003b08 <_Z16WS2812_color_set7Color_th+0x1cc>
 8003b06:	2308      	movs	r3, #8
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	b259      	sxtb	r1, r3
 8003b0c:	1cfb      	adds	r3, r7, #3
 8003b0e:	781a      	ldrb	r2, [r3, #0]
 8003b10:	0013      	movs	r3, r2
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	189a      	adds	r2, r3, r2
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	18d3      	adds	r3, r2, r3
 8003b1a:	009a      	lsls	r2, r3, #2
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	18d3      	adds	r3, r2, r3
 8003b20:	b2c9      	uxtb	r1, r1
 8003b22:	4a06      	ldr	r2, [pc, #24]	@ (8003b3c <_Z16WS2812_color_set7Color_th+0x200>)
 8003b24:	54d1      	strb	r1, [r2, r3]
	for(int j = 0; j != 4; ++j)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d1b3      	bne.n	8003a9a <_Z16WS2812_color_set7Color_th+0x15e>
	}
}
 8003b32:	46c0      	nop			@ (mov r8, r8)
 8003b34:	46c0      	nop			@ (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b006      	add	sp, #24
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	2000015c 	.word	0x2000015c

08003b40 <_Z9float2RGBf>:
    WS2812_reset();
}


Color_t float2RGB(float x)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
    Color_t color;
    //x = x - (int)(x / 2) * 2;
    if(x > 1) x = 2 - x;
 8003b48:	21fe      	movs	r1, #254	@ 0xfe
 8003b4a:	0589      	lsls	r1, r1, #22
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7fc fbc7 	bl	80002e0 <__aeabi_fcmpgt>
 8003b52:	1e03      	subs	r3, r0, #0
 8003b54:	d006      	beq.n	8003b64 <_Z9float2RGBf+0x24>
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	2080      	movs	r0, #128	@ 0x80
 8003b5a:	05c0      	lsls	r0, r0, #23
 8003b5c:	f7fc fe24 	bl	80007a8 <__aeabi_fsub>
 8003b60:	1c03      	adds	r3, r0, #0
 8003b62:	607b      	str	r3, [r7, #4]
    //x = 1.0 - x;
    // x由小到大的依次为：赤、橙、黄、绿、青、蓝，注意没有紫色
    //定义红色通道
    if (x < 5.0 / 12.0)
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7fe faf1 	bl	800214c <__aeabi_f2d>
 8003b6a:	4ac0      	ldr	r2, [pc, #768]	@ (8003e6c <_Z9float2RGBf+0x32c>)
 8003b6c:	4bc0      	ldr	r3, [pc, #768]	@ (8003e70 <_Z9float2RGBf+0x330>)
 8003b6e:	f7fc fb69 	bl	8000244 <__aeabi_dcmplt>
 8003b72:	1e03      	subs	r3, r0, #0
 8003b74:	d004      	beq.n	8003b80 <_Z9float2RGBf+0x40>
    {
        color.r = 255;
 8003b76:	2308      	movs	r3, #8
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	22ff      	movs	r2, #255	@ 0xff
 8003b7c:	705a      	strb	r2, [r3, #1]
 8003b7e:	e030      	b.n	8003be2 <_Z9float2RGBf+0xa2>
    }
    else if (x >= 5.0 / 12.0 && x < 7.0 / 12.0)
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7fe fae3 	bl	800214c <__aeabi_f2d>
 8003b86:	4ab9      	ldr	r2, [pc, #740]	@ (8003e6c <_Z9float2RGBf+0x32c>)
 8003b88:	4bb9      	ldr	r3, [pc, #740]	@ (8003e70 <_Z9float2RGBf+0x330>)
 8003b8a:	f7fc fb79 	bl	8000280 <__aeabi_dcmpge>
 8003b8e:	1e03      	subs	r3, r0, #0
 8003b90:	d023      	beq.n	8003bda <_Z9float2RGBf+0x9a>
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe fada 	bl	800214c <__aeabi_f2d>
 8003b98:	4ab4      	ldr	r2, [pc, #720]	@ (8003e6c <_Z9float2RGBf+0x32c>)
 8003b9a:	4bb6      	ldr	r3, [pc, #728]	@ (8003e74 <_Z9float2RGBf+0x334>)
 8003b9c:	f7fc fb52 	bl	8000244 <__aeabi_dcmplt>
 8003ba0:	1e03      	subs	r3, r0, #0
 8003ba2:	d01a      	beq.n	8003bda <_Z9float2RGBf+0x9a>
    {
        color.r = (int)(-1530 * (x - 7.0 / 12.0));
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7fe fad1 	bl	800214c <__aeabi_f2d>
 8003baa:	4ab0      	ldr	r2, [pc, #704]	@ (8003e6c <_Z9float2RGBf+0x32c>)
 8003bac:	4bb1      	ldr	r3, [pc, #708]	@ (8003e74 <_Z9float2RGBf+0x334>)
 8003bae:	f7fd fef5 	bl	800199c <__aeabi_dsub>
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	000b      	movs	r3, r1
 8003bb6:	0010      	movs	r0, r2
 8003bb8:	0019      	movs	r1, r3
 8003bba:	2200      	movs	r2, #0
 8003bbc:	4bae      	ldr	r3, [pc, #696]	@ (8003e78 <_Z9float2RGBf+0x338>)
 8003bbe:	f7fd fc25 	bl	800140c <__aeabi_dmul>
 8003bc2:	0002      	movs	r2, r0
 8003bc4:	000b      	movs	r3, r1
 8003bc6:	0010      	movs	r0, r2
 8003bc8:	0019      	movs	r1, r3
 8003bca:	f7fe fa83 	bl	80020d4 <__aeabi_d2iz>
 8003bce:	0003      	movs	r3, r0
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	2308      	movs	r3, #8
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	705a      	strb	r2, [r3, #1]
 8003bd8:	e003      	b.n	8003be2 <_Z9float2RGBf+0xa2>
    }
    else
    {
        color.r = 0;
 8003bda:	2308      	movs	r3, #8
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	2200      	movs	r2, #0
 8003be0:	705a      	strb	r2, [r3, #1]
    }
    //定义绿色通道
    if (x < 1.0 / 12.0)
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fe fab2 	bl	800214c <__aeabi_f2d>
 8003be8:	4aa4      	ldr	r2, [pc, #656]	@ (8003e7c <_Z9float2RGBf+0x33c>)
 8003bea:	4ba5      	ldr	r3, [pc, #660]	@ (8003e80 <_Z9float2RGBf+0x340>)
 8003bec:	f7fc fb2a 	bl	8000244 <__aeabi_dcmplt>
 8003bf0:	1e03      	subs	r3, r0, #0
 8003bf2:	d004      	beq.n	8003bfe <_Z9float2RGBf+0xbe>
    {
        color.g = 0;
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	18fb      	adds	r3, r7, r3
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
 8003bfc:	e0d6      	b.n	8003dac <_Z9float2RGBf+0x26c>
    }
    else if (x >= 1.0 / 12.0 && x < 3.0 / 12.0)
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fe faa4 	bl	800214c <__aeabi_f2d>
 8003c04:	4a9d      	ldr	r2, [pc, #628]	@ (8003e7c <_Z9float2RGBf+0x33c>)
 8003c06:	4b9e      	ldr	r3, [pc, #632]	@ (8003e80 <_Z9float2RGBf+0x340>)
 8003c08:	f7fc fb3a 	bl	8000280 <__aeabi_dcmpge>
 8003c0c:	1e03      	subs	r3, r0, #0
 8003c0e:	d021      	beq.n	8003c54 <_Z9float2RGBf+0x114>
 8003c10:	21fa      	movs	r1, #250	@ 0xfa
 8003c12:	0589      	lsls	r1, r1, #22
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7fc fb4f 	bl	80002b8 <__aeabi_fcmplt>
 8003c1a:	1e03      	subs	r3, r0, #0
 8003c1c:	d01a      	beq.n	8003c54 <_Z9float2RGBf+0x114>
    {
        color.g = (int)(990 * (x - 1.0 / 12.0));
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fe fa94 	bl	800214c <__aeabi_f2d>
 8003c24:	4a95      	ldr	r2, [pc, #596]	@ (8003e7c <_Z9float2RGBf+0x33c>)
 8003c26:	4b96      	ldr	r3, [pc, #600]	@ (8003e80 <_Z9float2RGBf+0x340>)
 8003c28:	f7fd feb8 	bl	800199c <__aeabi_dsub>
 8003c2c:	0002      	movs	r2, r0
 8003c2e:	000b      	movs	r3, r1
 8003c30:	0010      	movs	r0, r2
 8003c32:	0019      	movs	r1, r3
 8003c34:	2200      	movs	r2, #0
 8003c36:	4b93      	ldr	r3, [pc, #588]	@ (8003e84 <_Z9float2RGBf+0x344>)
 8003c38:	f7fd fbe8 	bl	800140c <__aeabi_dmul>
 8003c3c:	0002      	movs	r2, r0
 8003c3e:	000b      	movs	r3, r1
 8003c40:	0010      	movs	r0, r2
 8003c42:	0019      	movs	r1, r3
 8003c44:	f7fe fa46 	bl	80020d4 <__aeabi_d2iz>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	701a      	strb	r2, [r3, #0]
 8003c52:	e0ab      	b.n	8003dac <_Z9float2RGBf+0x26c>
    }
    else if (x >= 3.0 / 12.0 && x < 5.0 / 12.0)
 8003c54:	21fa      	movs	r1, #250	@ 0xfa
 8003c56:	0589      	lsls	r1, r1, #22
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7fc fb4b 	bl	80002f4 <__aeabi_fcmpge>
 8003c5e:	1e03      	subs	r3, r0, #0
 8003c60:	d02b      	beq.n	8003cba <_Z9float2RGBf+0x17a>
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fe fa72 	bl	800214c <__aeabi_f2d>
 8003c68:	4a80      	ldr	r2, [pc, #512]	@ (8003e6c <_Z9float2RGBf+0x32c>)
 8003c6a:	4b81      	ldr	r3, [pc, #516]	@ (8003e70 <_Z9float2RGBf+0x330>)
 8003c6c:	f7fc faea 	bl	8000244 <__aeabi_dcmplt>
 8003c70:	1e03      	subs	r3, r0, #0
 8003c72:	d022      	beq.n	8003cba <_Z9float2RGBf+0x17a>
    {
        color.g = (int)(540 * (x - 5.0 / 12.0) + 255);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7fe fa69 	bl	800214c <__aeabi_f2d>
 8003c7a:	4a7c      	ldr	r2, [pc, #496]	@ (8003e6c <_Z9float2RGBf+0x32c>)
 8003c7c:	4b7c      	ldr	r3, [pc, #496]	@ (8003e70 <_Z9float2RGBf+0x330>)
 8003c7e:	f7fd fe8d 	bl	800199c <__aeabi_dsub>
 8003c82:	0002      	movs	r2, r0
 8003c84:	000b      	movs	r3, r1
 8003c86:	0010      	movs	r0, r2
 8003c88:	0019      	movs	r1, r3
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	4b7e      	ldr	r3, [pc, #504]	@ (8003e88 <_Z9float2RGBf+0x348>)
 8003c8e:	f7fd fbbd 	bl	800140c <__aeabi_dmul>
 8003c92:	0002      	movs	r2, r0
 8003c94:	000b      	movs	r3, r1
 8003c96:	0010      	movs	r0, r2
 8003c98:	0019      	movs	r1, r3
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	4b7b      	ldr	r3, [pc, #492]	@ (8003e8c <_Z9float2RGBf+0x34c>)
 8003c9e:	f7fc ff27 	bl	8000af0 <__aeabi_dadd>
 8003ca2:	0002      	movs	r2, r0
 8003ca4:	000b      	movs	r3, r1
 8003ca6:	0010      	movs	r0, r2
 8003ca8:	0019      	movs	r1, r3
 8003caa:	f7fe fa13 	bl	80020d4 <__aeabi_d2iz>
 8003cae:	0003      	movs	r3, r0
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	e078      	b.n	8003dac <_Z9float2RGBf+0x26c>
    }
    else if (x >= 5.0 / 12.0 && x < 7.0 / 12.0)
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fe fa46 	bl	800214c <__aeabi_f2d>
 8003cc0:	4a6a      	ldr	r2, [pc, #424]	@ (8003e6c <_Z9float2RGBf+0x32c>)
 8003cc2:	4b6b      	ldr	r3, [pc, #428]	@ (8003e70 <_Z9float2RGBf+0x330>)
 8003cc4:	f7fc fadc 	bl	8000280 <__aeabi_dcmpge>
 8003cc8:	1e03      	subs	r3, r0, #0
 8003cca:	d00d      	beq.n	8003ce8 <_Z9float2RGBf+0x1a8>
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7fe fa3d 	bl	800214c <__aeabi_f2d>
 8003cd2:	4a66      	ldr	r2, [pc, #408]	@ (8003e6c <_Z9float2RGBf+0x32c>)
 8003cd4:	4b67      	ldr	r3, [pc, #412]	@ (8003e74 <_Z9float2RGBf+0x334>)
 8003cd6:	f7fc fab5 	bl	8000244 <__aeabi_dcmplt>
 8003cda:	1e03      	subs	r3, r0, #0
 8003cdc:	d004      	beq.n	8003ce8 <_Z9float2RGBf+0x1a8>
    {
        color.g = 255;
 8003cde:	2308      	movs	r3, #8
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	22ff      	movs	r2, #255	@ 0xff
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	e061      	b.n	8003dac <_Z9float2RGBf+0x26c>
    }
    else if (x >= 7.0 / 12.0 && x < 9.0 / 12.0)
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7fe fa2f 	bl	800214c <__aeabi_f2d>
 8003cee:	4a5f      	ldr	r2, [pc, #380]	@ (8003e6c <_Z9float2RGBf+0x32c>)
 8003cf0:	4b60      	ldr	r3, [pc, #384]	@ (8003e74 <_Z9float2RGBf+0x334>)
 8003cf2:	f7fc fac5 	bl	8000280 <__aeabi_dcmpge>
 8003cf6:	1e03      	subs	r3, r0, #0
 8003cf8:	d029      	beq.n	8003d4e <_Z9float2RGBf+0x20e>
 8003cfa:	21fd      	movs	r1, #253	@ 0xfd
 8003cfc:	0589      	lsls	r1, r1, #22
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fc fada 	bl	80002b8 <__aeabi_fcmplt>
 8003d04:	1e03      	subs	r3, r0, #0
 8003d06:	d022      	beq.n	8003d4e <_Z9float2RGBf+0x20e>
    {
        color.g = (int)(-768 * (x - 7.0 / 12.0) + 255);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7fe fa1f 	bl	800214c <__aeabi_f2d>
 8003d0e:	4a57      	ldr	r2, [pc, #348]	@ (8003e6c <_Z9float2RGBf+0x32c>)
 8003d10:	4b58      	ldr	r3, [pc, #352]	@ (8003e74 <_Z9float2RGBf+0x334>)
 8003d12:	f7fd fe43 	bl	800199c <__aeabi_dsub>
 8003d16:	0002      	movs	r2, r0
 8003d18:	000b      	movs	r3, r1
 8003d1a:	0010      	movs	r0, r2
 8003d1c:	0019      	movs	r1, r3
 8003d1e:	2200      	movs	r2, #0
 8003d20:	4b5b      	ldr	r3, [pc, #364]	@ (8003e90 <_Z9float2RGBf+0x350>)
 8003d22:	f7fd fb73 	bl	800140c <__aeabi_dmul>
 8003d26:	0002      	movs	r2, r0
 8003d28:	000b      	movs	r3, r1
 8003d2a:	0010      	movs	r0, r2
 8003d2c:	0019      	movs	r1, r3
 8003d2e:	2200      	movs	r2, #0
 8003d30:	4b56      	ldr	r3, [pc, #344]	@ (8003e8c <_Z9float2RGBf+0x34c>)
 8003d32:	f7fc fedd 	bl	8000af0 <__aeabi_dadd>
 8003d36:	0002      	movs	r2, r0
 8003d38:	000b      	movs	r3, r1
 8003d3a:	0010      	movs	r0, r2
 8003d3c:	0019      	movs	r1, r3
 8003d3e:	f7fe f9c9 	bl	80020d4 <__aeabi_d2iz>
 8003d42:	0003      	movs	r3, r0
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	2308      	movs	r3, #8
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	e02e      	b.n	8003dac <_Z9float2RGBf+0x26c>
    }
    else if (x >= 9.0 / 12.0 && x < 11.0 / 12.0)
 8003d4e:	21fd      	movs	r1, #253	@ 0xfd
 8003d50:	0589      	lsls	r1, r1, #22
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fc face 	bl	80002f4 <__aeabi_fcmpge>
 8003d58:	1e03      	subs	r3, r0, #0
 8003d5a:	d023      	beq.n	8003da4 <_Z9float2RGBf+0x264>
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7fe f9f5 	bl	800214c <__aeabi_f2d>
 8003d62:	4a46      	ldr	r2, [pc, #280]	@ (8003e7c <_Z9float2RGBf+0x33c>)
 8003d64:	4b4b      	ldr	r3, [pc, #300]	@ (8003e94 <_Z9float2RGBf+0x354>)
 8003d66:	f7fc fa6d 	bl	8000244 <__aeabi_dcmplt>
 8003d6a:	1e03      	subs	r3, r0, #0
 8003d6c:	d01a      	beq.n	8003da4 <_Z9float2RGBf+0x264>
    {
        color.g = (int)(-762 * (x - 11.0 / 12.0));
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fe f9ec 	bl	800214c <__aeabi_f2d>
 8003d74:	4a41      	ldr	r2, [pc, #260]	@ (8003e7c <_Z9float2RGBf+0x33c>)
 8003d76:	4b47      	ldr	r3, [pc, #284]	@ (8003e94 <_Z9float2RGBf+0x354>)
 8003d78:	f7fd fe10 	bl	800199c <__aeabi_dsub>
 8003d7c:	0002      	movs	r2, r0
 8003d7e:	000b      	movs	r3, r1
 8003d80:	0010      	movs	r0, r2
 8003d82:	0019      	movs	r1, r3
 8003d84:	2200      	movs	r2, #0
 8003d86:	4b44      	ldr	r3, [pc, #272]	@ (8003e98 <_Z9float2RGBf+0x358>)
 8003d88:	f7fd fb40 	bl	800140c <__aeabi_dmul>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	000b      	movs	r3, r1
 8003d90:	0010      	movs	r0, r2
 8003d92:	0019      	movs	r1, r3
 8003d94:	f7fe f99e 	bl	80020d4 <__aeabi_d2iz>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	701a      	strb	r2, [r3, #0]
 8003da2:	e003      	b.n	8003dac <_Z9float2RGBf+0x26c>
    }
    else
    {
        color.g = 0;
 8003da4:	2308      	movs	r3, #8
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	2200      	movs	r2, #0
 8003daa:	701a      	strb	r2, [r3, #0]
    }
    //定义蓝色通道
    if (x < 7.0 / 12.0)
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7fe f9cd 	bl	800214c <__aeabi_f2d>
 8003db2:	4a2e      	ldr	r2, [pc, #184]	@ (8003e6c <_Z9float2RGBf+0x32c>)
 8003db4:	4b2f      	ldr	r3, [pc, #188]	@ (8003e74 <_Z9float2RGBf+0x334>)
 8003db6:	f7fc fa45 	bl	8000244 <__aeabi_dcmplt>
 8003dba:	1e03      	subs	r3, r0, #0
 8003dbc:	d004      	beq.n	8003dc8 <_Z9float2RGBf+0x288>
    {
        color.b = 0;
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	709a      	strb	r2, [r3, #2]
 8003dc6:	e02e      	b.n	8003e26 <_Z9float2RGBf+0x2e6>
    }
    else if (x >= 7.0 / 12.0 && x < 9.0 / 12.0)
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7fe f9bf 	bl	800214c <__aeabi_f2d>
 8003dce:	4a27      	ldr	r2, [pc, #156]	@ (8003e6c <_Z9float2RGBf+0x32c>)
 8003dd0:	4b28      	ldr	r3, [pc, #160]	@ (8003e74 <_Z9float2RGBf+0x334>)
 8003dd2:	f7fc fa55 	bl	8000280 <__aeabi_dcmpge>
 8003dd6:	1e03      	subs	r3, r0, #0
 8003dd8:	d021      	beq.n	8003e1e <_Z9float2RGBf+0x2de>
 8003dda:	21fd      	movs	r1, #253	@ 0xfd
 8003ddc:	0589      	lsls	r1, r1, #22
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fc fa6a 	bl	80002b8 <__aeabi_fcmplt>
 8003de4:	1e03      	subs	r3, r0, #0
 8003de6:	d01a      	beq.n	8003e1e <_Z9float2RGBf+0x2de>
    {
        color.b = (int)(1530 * (x - 7.0 / 12.0));
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7fe f9af 	bl	800214c <__aeabi_f2d>
 8003dee:	4a1f      	ldr	r2, [pc, #124]	@ (8003e6c <_Z9float2RGBf+0x32c>)
 8003df0:	4b20      	ldr	r3, [pc, #128]	@ (8003e74 <_Z9float2RGBf+0x334>)
 8003df2:	f7fd fdd3 	bl	800199c <__aeabi_dsub>
 8003df6:	0002      	movs	r2, r0
 8003df8:	000b      	movs	r3, r1
 8003dfa:	0010      	movs	r0, r2
 8003dfc:	0019      	movs	r1, r3
 8003dfe:	2200      	movs	r2, #0
 8003e00:	4b26      	ldr	r3, [pc, #152]	@ (8003e9c <_Z9float2RGBf+0x35c>)
 8003e02:	f7fd fb03 	bl	800140c <__aeabi_dmul>
 8003e06:	0002      	movs	r2, r0
 8003e08:	000b      	movs	r3, r1
 8003e0a:	0010      	movs	r0, r2
 8003e0c:	0019      	movs	r1, r3
 8003e0e:	f7fe f961 	bl	80020d4 <__aeabi_d2iz>
 8003e12:	0003      	movs	r3, r0
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	2308      	movs	r3, #8
 8003e18:	18fb      	adds	r3, r7, r3
 8003e1a:	709a      	strb	r2, [r3, #2]
 8003e1c:	e003      	b.n	8003e26 <_Z9float2RGBf+0x2e6>
    }
    else
    {
        color.b = 255;
 8003e1e:	2308      	movs	r3, #8
 8003e20:	18fb      	adds	r3, r7, r3
 8003e22:	22ff      	movs	r2, #255	@ 0xff
 8003e24:	709a      	strb	r2, [r3, #2]
    }

    return color;
 8003e26:	200c      	movs	r0, #12
 8003e28:	183b      	adds	r3, r7, r0
 8003e2a:	2208      	movs	r2, #8
 8003e2c:	18ba      	adds	r2, r7, r2
 8003e2e:	8811      	ldrh	r1, [r2, #0]
 8003e30:	8019      	strh	r1, [r3, #0]
 8003e32:	7892      	ldrb	r2, [r2, #2]
 8003e34:	709a      	strb	r2, [r3, #2]
 8003e36:	183a      	adds	r2, r7, r0
 8003e38:	2300      	movs	r3, #0
 8003e3a:	7811      	ldrb	r1, [r2, #0]
 8003e3c:	20ff      	movs	r0, #255	@ 0xff
 8003e3e:	4001      	ands	r1, r0
 8003e40:	20ff      	movs	r0, #255	@ 0xff
 8003e42:	4383      	bics	r3, r0
 8003e44:	430b      	orrs	r3, r1
 8003e46:	7851      	ldrb	r1, [r2, #1]
 8003e48:	20ff      	movs	r0, #255	@ 0xff
 8003e4a:	4001      	ands	r1, r0
 8003e4c:	0209      	lsls	r1, r1, #8
 8003e4e:	4814      	ldr	r0, [pc, #80]	@ (8003ea0 <_Z9float2RGBf+0x360>)
 8003e50:	4003      	ands	r3, r0
 8003e52:	430b      	orrs	r3, r1
 8003e54:	7892      	ldrb	r2, [r2, #2]
 8003e56:	21ff      	movs	r1, #255	@ 0xff
 8003e58:	400a      	ands	r2, r1
 8003e5a:	0412      	lsls	r2, r2, #16
 8003e5c:	4911      	ldr	r1, [pc, #68]	@ (8003ea4 <_Z9float2RGBf+0x364>)
 8003e5e:	400b      	ands	r3, r1
 8003e60:	4313      	orrs	r3, r2
}
 8003e62:	0018      	movs	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b004      	add	sp, #16
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	46c0      	nop			@ (mov r8, r8)
 8003e6c:	aaaaaaab 	.word	0xaaaaaaab
 8003e70:	3fdaaaaa 	.word	0x3fdaaaaa
 8003e74:	3fe2aaaa 	.word	0x3fe2aaaa
 8003e78:	c097e800 	.word	0xc097e800
 8003e7c:	55555555 	.word	0x55555555
 8003e80:	3fb55555 	.word	0x3fb55555
 8003e84:	408ef000 	.word	0x408ef000
 8003e88:	4080e000 	.word	0x4080e000
 8003e8c:	406fe000 	.word	0x406fe000
 8003e90:	c0880000 	.word	0xc0880000
 8003e94:	3fed5555 	.word	0x3fed5555
 8003e98:	c087d000 	.word	0xc087d000
 8003e9c:	4097e800 	.word	0x4097e800
 8003ea0:	ffff00ff 	.word	0xffff00ff
 8003ea4:	ff00ffff 	.word	0xff00ffff

08003ea8 <_ZN10LED_MatrixC1Ev>:
#ifndef PROJECT1_V0_LED_MATRIX_H
#define PROJECT1_V0_LED_MATRIX_H

#include "module.h"

class LED_Matrix {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	23c0      	movs	r3, #192	@ 0xc0
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4905      	ldr	r1, [pc, #20]	@ (8003ecc <_ZN10LED_MatrixC1Ev+0x24>)
 8003eb8:	18d3      	adds	r3, r2, r3
 8003eba:	2260      	movs	r2, #96	@ 0x60
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f000 f98f 	bl	80041e0 <memcpy>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b002      	add	sp, #8
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	0800420c 	.word	0x0800420c

08003ed0 <_Z15color_flow_nextv>:
#ifdef TEST6
LED_Matrix cube;

float init_phase = 0, dx = 0.1, dt = 0.002;

void color_flow_next(){
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
    Color_t c;

    float phase = init_phase;
 8003ed6:	4b71      	ldr	r3, [pc, #452]	@ (800409c <_Z15color_flow_nextv+0x1cc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	61fb      	str	r3, [r7, #28]
    for(int i = 0; i < 8; i++){
 8003edc:	2300      	movs	r3, #0
 8003ede:	61bb      	str	r3, [r7, #24]
 8003ee0:	e037      	b.n	8003f52 <_Z15color_flow_nextv+0x82>
        c = float2RGB(phase);
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	1c18      	adds	r0, r3, #0
 8003ee6:	f7ff fe2b 	bl	8003b40 <_Z9float2RGBf>
 8003eea:	0003      	movs	r3, r0
 8003eec:	001a      	movs	r2, r3
 8003eee:	003b      	movs	r3, r7
 8003ef0:	1c11      	adds	r1, r2, #0
 8003ef2:	7019      	strb	r1, [r3, #0]
 8003ef4:	0411      	lsls	r1, r2, #16
 8003ef6:	0e09      	lsrs	r1, r1, #24
 8003ef8:	7059      	strb	r1, [r3, #1]
 8003efa:	0212      	lsls	r2, r2, #8
 8003efc:	0e12      	lsrs	r2, r2, #24
 8003efe:	709a      	strb	r2, [r3, #2]
        for(int j = 0; j < 3; j++){
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	e009      	b.n	8003f1a <_Z15color_flow_nextv+0x4a>
            cube.set_edge_point(j, i, c);
 8003f06:	003b      	movs	r3, r7
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	6979      	ldr	r1, [r7, #20]
 8003f0c:	4864      	ldr	r0, [pc, #400]	@ (80040a0 <_Z15color_flow_nextv+0x1d0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f7ff fcb0 	bl	8003874 <_ZN10LED_Matrix14set_edge_pointEii7Color_t>
        for(int j = 0; j < 3; j++){
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	3301      	adds	r3, #1
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	ddf2      	ble.n	8003f06 <_Z15color_flow_nextv+0x36>
        }
        phase += dx;
 8003f20:	4b60      	ldr	r3, [pc, #384]	@ (80040a4 <_Z15color_flow_nextv+0x1d4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	1c19      	adds	r1, r3, #0
 8003f26:	69f8      	ldr	r0, [r7, #28]
 8003f28:	f7fc f9ee 	bl	8000308 <__aeabi_fadd>
 8003f2c:	1c03      	adds	r3, r0, #0
 8003f2e:	61fb      	str	r3, [r7, #28]
        if(phase > 2) phase -= 2;
 8003f30:	2180      	movs	r1, #128	@ 0x80
 8003f32:	05c9      	lsls	r1, r1, #23
 8003f34:	69f8      	ldr	r0, [r7, #28]
 8003f36:	f7fc f9d3 	bl	80002e0 <__aeabi_fcmpgt>
 8003f3a:	1e03      	subs	r3, r0, #0
 8003f3c:	d006      	beq.n	8003f4c <_Z15color_flow_nextv+0x7c>
 8003f3e:	2180      	movs	r1, #128	@ 0x80
 8003f40:	05c9      	lsls	r1, r1, #23
 8003f42:	69f8      	ldr	r0, [r7, #28]
 8003f44:	f7fc fc30 	bl	80007a8 <__aeabi_fsub>
 8003f48:	1c03      	adds	r3, r0, #0
 8003f4a:	61fb      	str	r3, [r7, #28]
    for(int i = 0; i < 8; i++){
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	2b07      	cmp	r3, #7
 8003f56:	ddc4      	ble.n	8003ee2 <_Z15color_flow_nextv+0x12>
    }

    for(int i = 0; i < 8; i++){
 8003f58:	2300      	movs	r3, #0
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	e037      	b.n	8003fce <_Z15color_flow_nextv+0xfe>
        c = float2RGB(phase);
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	1c18      	adds	r0, r3, #0
 8003f62:	f7ff fded 	bl	8003b40 <_Z9float2RGBf>
 8003f66:	0003      	movs	r3, r0
 8003f68:	001a      	movs	r2, r3
 8003f6a:	003b      	movs	r3, r7
 8003f6c:	1c11      	adds	r1, r2, #0
 8003f6e:	7019      	strb	r1, [r3, #0]
 8003f70:	0411      	lsls	r1, r2, #16
 8003f72:	0e09      	lsrs	r1, r1, #24
 8003f74:	7059      	strb	r1, [r3, #1]
 8003f76:	0212      	lsls	r2, r2, #8
 8003f78:	0e12      	lsrs	r2, r2, #24
 8003f7a:	709a      	strb	r2, [r3, #2]
        for(int j = 3; j < 9; j++){
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	e009      	b.n	8003f96 <_Z15color_flow_nextv+0xc6>
            cube.set_edge_point(j, i, c);
 8003f82:	003b      	movs	r3, r7
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	68f9      	ldr	r1, [r7, #12]
 8003f88:	4845      	ldr	r0, [pc, #276]	@ (80040a0 <_Z15color_flow_nextv+0x1d0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f7ff fc72 	bl	8003874 <_ZN10LED_Matrix14set_edge_pointEii7Color_t>
        for(int j = 3; j < 9; j++){
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3301      	adds	r3, #1
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	ddf2      	ble.n	8003f82 <_Z15color_flow_nextv+0xb2>
        }
        phase += dx;
 8003f9c:	4b41      	ldr	r3, [pc, #260]	@ (80040a4 <_Z15color_flow_nextv+0x1d4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	1c19      	adds	r1, r3, #0
 8003fa2:	69f8      	ldr	r0, [r7, #28]
 8003fa4:	f7fc f9b0 	bl	8000308 <__aeabi_fadd>
 8003fa8:	1c03      	adds	r3, r0, #0
 8003faa:	61fb      	str	r3, [r7, #28]
        if(phase > 2) phase -= 2;
 8003fac:	2180      	movs	r1, #128	@ 0x80
 8003fae:	05c9      	lsls	r1, r1, #23
 8003fb0:	69f8      	ldr	r0, [r7, #28]
 8003fb2:	f7fc f995 	bl	80002e0 <__aeabi_fcmpgt>
 8003fb6:	1e03      	subs	r3, r0, #0
 8003fb8:	d006      	beq.n	8003fc8 <_Z15color_flow_nextv+0xf8>
 8003fba:	2180      	movs	r1, #128	@ 0x80
 8003fbc:	05c9      	lsls	r1, r1, #23
 8003fbe:	69f8      	ldr	r0, [r7, #28]
 8003fc0:	f7fc fbf2 	bl	80007a8 <__aeabi_fsub>
 8003fc4:	1c03      	adds	r3, r0, #0
 8003fc6:	61fb      	str	r3, [r7, #28]
    for(int i = 0; i < 8; i++){
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b07      	cmp	r3, #7
 8003fd2:	ddc4      	ble.n	8003f5e <_Z15color_flow_nextv+0x8e>
    }

    for(int i = 0; i < 8; i++){
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	e037      	b.n	800404a <_Z15color_flow_nextv+0x17a>
        c = float2RGB(phase);
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	1c18      	adds	r0, r3, #0
 8003fde:	f7ff fdaf 	bl	8003b40 <_Z9float2RGBf>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	001a      	movs	r2, r3
 8003fe6:	003b      	movs	r3, r7
 8003fe8:	1c11      	adds	r1, r2, #0
 8003fea:	7019      	strb	r1, [r3, #0]
 8003fec:	0411      	lsls	r1, r2, #16
 8003fee:	0e09      	lsrs	r1, r1, #24
 8003ff0:	7059      	strb	r1, [r3, #1]
 8003ff2:	0212      	lsls	r2, r2, #8
 8003ff4:	0e12      	lsrs	r2, r2, #24
 8003ff6:	709a      	strb	r2, [r3, #2]
        for(int j = 9; j < 12; j++){
 8003ff8:	2309      	movs	r3, #9
 8003ffa:	607b      	str	r3, [r7, #4]
 8003ffc:	e009      	b.n	8004012 <_Z15color_flow_nextv+0x142>
            cube.set_edge_point(j, i, c);
 8003ffe:	003b      	movs	r3, r7
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4826      	ldr	r0, [pc, #152]	@ (80040a0 <_Z15color_flow_nextv+0x1d0>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f7ff fc34 	bl	8003874 <_ZN10LED_Matrix14set_edge_pointEii7Color_t>
        for(int j = 9; j < 12; j++){
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3301      	adds	r3, #1
 8004010:	607b      	str	r3, [r7, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b0b      	cmp	r3, #11
 8004016:	ddf2      	ble.n	8003ffe <_Z15color_flow_nextv+0x12e>
        }
        phase += dx;
 8004018:	4b22      	ldr	r3, [pc, #136]	@ (80040a4 <_Z15color_flow_nextv+0x1d4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1c19      	adds	r1, r3, #0
 800401e:	69f8      	ldr	r0, [r7, #28]
 8004020:	f7fc f972 	bl	8000308 <__aeabi_fadd>
 8004024:	1c03      	adds	r3, r0, #0
 8004026:	61fb      	str	r3, [r7, #28]
        if(phase > 2) phase -= 2;
 8004028:	2180      	movs	r1, #128	@ 0x80
 800402a:	05c9      	lsls	r1, r1, #23
 800402c:	69f8      	ldr	r0, [r7, #28]
 800402e:	f7fc f957 	bl	80002e0 <__aeabi_fcmpgt>
 8004032:	1e03      	subs	r3, r0, #0
 8004034:	d006      	beq.n	8004044 <_Z15color_flow_nextv+0x174>
 8004036:	2180      	movs	r1, #128	@ 0x80
 8004038:	05c9      	lsls	r1, r1, #23
 800403a:	69f8      	ldr	r0, [r7, #28]
 800403c:	f7fc fbb4 	bl	80007a8 <__aeabi_fsub>
 8004040:	1c03      	adds	r3, r0, #0
 8004042:	61fb      	str	r3, [r7, #28]
    for(int i = 0; i < 8; i++){
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	3301      	adds	r3, #1
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b07      	cmp	r3, #7
 800404e:	ddc4      	ble.n	8003fda <_Z15color_flow_nextv+0x10a>
    }

    init_phase += dt;
 8004050:	4b12      	ldr	r3, [pc, #72]	@ (800409c <_Z15color_flow_nextv+0x1cc>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	4b14      	ldr	r3, [pc, #80]	@ (80040a8 <_Z15color_flow_nextv+0x1d8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	1c19      	adds	r1, r3, #0
 800405a:	1c10      	adds	r0, r2, #0
 800405c:	f7fc f954 	bl	8000308 <__aeabi_fadd>
 8004060:	1c03      	adds	r3, r0, #0
 8004062:	1c1a      	adds	r2, r3, #0
 8004064:	4b0d      	ldr	r3, [pc, #52]	@ (800409c <_Z15color_flow_nextv+0x1cc>)
 8004066:	601a      	str	r2, [r3, #0]
    if(init_phase > 2) init_phase -= 2;
 8004068:	4b0c      	ldr	r3, [pc, #48]	@ (800409c <_Z15color_flow_nextv+0x1cc>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2180      	movs	r1, #128	@ 0x80
 800406e:	05c9      	lsls	r1, r1, #23
 8004070:	1c18      	adds	r0, r3, #0
 8004072:	f7fc f935 	bl	80002e0 <__aeabi_fcmpgt>
 8004076:	1e03      	subs	r3, r0, #0
 8004078:	d100      	bne.n	800407c <_Z15color_flow_nextv+0x1ac>
}
 800407a:	e00a      	b.n	8004092 <_Z15color_flow_nextv+0x1c2>
    if(init_phase > 2) init_phase -= 2;
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <_Z15color_flow_nextv+0x1cc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2180      	movs	r1, #128	@ 0x80
 8004082:	05c9      	lsls	r1, r1, #23
 8004084:	1c18      	adds	r0, r3, #0
 8004086:	f7fc fb8f 	bl	80007a8 <__aeabi_fsub>
 800408a:	1c03      	adds	r3, r0, #0
 800408c:	1c1a      	adds	r2, r3, #0
 800408e:	4b03      	ldr	r3, [pc, #12]	@ (800409c <_Z15color_flow_nextv+0x1cc>)
 8004090:	601a      	str	r2, [r3, #0]
}
 8004092:	46c0      	nop			@ (mov r8, r8)
 8004094:	46bd      	mov	sp, r7
 8004096:	b008      	add	sp, #32
 8004098:	bd80      	pop	{r7, pc}
 800409a:	46c0      	nop			@ (mov r8, r8)
 800409c:	200010bc 	.word	0x200010bc
 80040a0:	20000a5c 	.word	0x20000a5c
 80040a4:	20000074 	.word	0x20000074
 80040a8:	20000078 	.word	0x20000078

080040ac <setup>:

uint32_t t0, t1;
void setup(){
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
    t0 = HAL_GetTick();
 80040b0:	f7fe fa90 	bl	80025d4 <HAL_GetTick>
 80040b4:	0002      	movs	r2, r0
 80040b6:	4b07      	ldr	r3, [pc, #28]	@ (80040d4 <setup+0x28>)
 80040b8:	601a      	str	r2, [r3, #0]
    color_flow_next();
 80040ba:	f7ff ff09 	bl	8003ed0 <_Z15color_flow_nextv>
    t1 = HAL_GetTick() - t0;
 80040be:	f7fe fa89 	bl	80025d4 <HAL_GetTick>
 80040c2:	0002      	movs	r2, r0
 80040c4:	4b03      	ldr	r3, [pc, #12]	@ (80040d4 <setup+0x28>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	1ad2      	subs	r2, r2, r3
 80040ca:	4b03      	ldr	r3, [pc, #12]	@ (80040d8 <setup+0x2c>)
 80040cc:	601a      	str	r2, [r3, #0]
}
 80040ce:	46c0      	nop			@ (mov r8, r8)
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	200010c0 	.word	0x200010c0
 80040d8:	200010c4 	.word	0x200010c4

080040dc <loop>:

void loop(){
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
    t0 = HAL_GetTick();
 80040e0:	f7fe fa78 	bl	80025d4 <HAL_GetTick>
 80040e4:	0002      	movs	r2, r0
 80040e6:	4b07      	ldr	r3, [pc, #28]	@ (8004104 <loop+0x28>)
 80040e8:	601a      	str	r2, [r3, #0]
    color_flow_next();
 80040ea:	f7ff fef1 	bl	8003ed0 <_Z15color_flow_nextv>
    t1 = HAL_GetTick() - t0;
 80040ee:	f7fe fa71 	bl	80025d4 <HAL_GetTick>
 80040f2:	0002      	movs	r2, r0
 80040f4:	4b03      	ldr	r3, [pc, #12]	@ (8004104 <loop+0x28>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	1ad2      	subs	r2, r2, r3
 80040fa:	4b03      	ldr	r3, [pc, #12]	@ (8004108 <loop+0x2c>)
 80040fc:	601a      	str	r2, [r3, #0]
}
 80040fe:	46c0      	nop			@ (mov r8, r8)
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	200010c0 	.word	0x200010c0
 8004108:	200010c4 	.word	0x200010c4

0800410c <task_handler>:


void task_handler(){ //1ms中断
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
//    	if(HAL_GetTick() % 20 == 0) cube.Handler();
//    	else WS2812_Handler_DMA();
//
//    }

	if(HAL_GetTick() % 10 == 0) cube.Handler();
 8004110:	f7fe fa60 	bl	80025d4 <HAL_GetTick>
 8004114:	0003      	movs	r3, r0
 8004116:	210a      	movs	r1, #10
 8004118:	0018      	movs	r0, r3
 800411a:	f7fc f877 	bl	800020c <__aeabi_uidivmod>
 800411e:	000b      	movs	r3, r1
 8004120:	425a      	negs	r2, r3
 8004122:	4153      	adcs	r3, r2
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <task_handler+0x26>
 800412a:	4b04      	ldr	r3, [pc, #16]	@ (800413c <task_handler+0x30>)
 800412c:	0018      	movs	r0, r3
 800412e:	f7ff fb09 	bl	8003744 <_ZN10LED_Matrix7HandlerEv>
	WS2812_Handler_DMA();
 8004132:	f7ff fbf3 	bl	800391c <_Z18WS2812_Handler_DMAv>
}
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20000a5c 	.word	0x20000a5c

08004140 <_Z41__static_initialization_and_destruction_0ii>:
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d107      	bne.n	8004160 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	4a05      	ldr	r2, [pc, #20]	@ (8004168 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d103      	bne.n	8004160 <_Z41__static_initialization_and_destruction_0ii+0x20>
LED_Matrix cube;
 8004158:	4b04      	ldr	r3, [pc, #16]	@ (800416c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800415a:	0018      	movs	r0, r3
 800415c:	f7ff fea4 	bl	8003ea8 <_ZN10LED_MatrixC1Ev>
}
 8004160:	46c0      	nop			@ (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	b002      	add	sp, #8
 8004166:	bd80      	pop	{r7, pc}
 8004168:	0000ffff 	.word	0x0000ffff
 800416c:	20000a5c 	.word	0x20000a5c

08004170 <_GLOBAL__sub_I_cube>:
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
 8004174:	4b03      	ldr	r3, [pc, #12]	@ (8004184 <_GLOBAL__sub_I_cube+0x14>)
 8004176:	0019      	movs	r1, r3
 8004178:	2001      	movs	r0, #1
 800417a:	f7ff ffe1 	bl	8004140 <_Z41__static_initialization_and_destruction_0ii>
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			@ (mov r8, r8)
 8004184:	0000ffff 	.word	0x0000ffff

08004188 <memset>:
 8004188:	0003      	movs	r3, r0
 800418a:	1882      	adds	r2, r0, r2
 800418c:	4293      	cmp	r3, r2
 800418e:	d100      	bne.n	8004192 <memset+0xa>
 8004190:	4770      	bx	lr
 8004192:	7019      	strb	r1, [r3, #0]
 8004194:	3301      	adds	r3, #1
 8004196:	e7f9      	b.n	800418c <memset+0x4>

08004198 <__libc_init_array>:
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	2600      	movs	r6, #0
 800419c:	4c0c      	ldr	r4, [pc, #48]	@ (80041d0 <__libc_init_array+0x38>)
 800419e:	4d0d      	ldr	r5, [pc, #52]	@ (80041d4 <__libc_init_array+0x3c>)
 80041a0:	1b64      	subs	r4, r4, r5
 80041a2:	10a4      	asrs	r4, r4, #2
 80041a4:	42a6      	cmp	r6, r4
 80041a6:	d109      	bne.n	80041bc <__libc_init_array+0x24>
 80041a8:	2600      	movs	r6, #0
 80041aa:	f000 f823 	bl	80041f4 <_init>
 80041ae:	4c0a      	ldr	r4, [pc, #40]	@ (80041d8 <__libc_init_array+0x40>)
 80041b0:	4d0a      	ldr	r5, [pc, #40]	@ (80041dc <__libc_init_array+0x44>)
 80041b2:	1b64      	subs	r4, r4, r5
 80041b4:	10a4      	asrs	r4, r4, #2
 80041b6:	42a6      	cmp	r6, r4
 80041b8:	d105      	bne.n	80041c6 <__libc_init_array+0x2e>
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
 80041bc:	00b3      	lsls	r3, r6, #2
 80041be:	58eb      	ldr	r3, [r5, r3]
 80041c0:	4798      	blx	r3
 80041c2:	3601      	adds	r6, #1
 80041c4:	e7ee      	b.n	80041a4 <__libc_init_array+0xc>
 80041c6:	00b3      	lsls	r3, r6, #2
 80041c8:	58eb      	ldr	r3, [r5, r3]
 80041ca:	4798      	blx	r3
 80041cc:	3601      	adds	r6, #1
 80041ce:	e7f2      	b.n	80041b6 <__libc_init_array+0x1e>
 80041d0:	080042ac 	.word	0x080042ac
 80041d4:	080042ac 	.word	0x080042ac
 80041d8:	080042b4 	.word	0x080042b4
 80041dc:	080042ac 	.word	0x080042ac

080041e0 <memcpy>:
 80041e0:	2300      	movs	r3, #0
 80041e2:	b510      	push	{r4, lr}
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d100      	bne.n	80041ea <memcpy+0xa>
 80041e8:	bd10      	pop	{r4, pc}
 80041ea:	5ccc      	ldrb	r4, [r1, r3]
 80041ec:	54c4      	strb	r4, [r0, r3]
 80041ee:	3301      	adds	r3, #1
 80041f0:	e7f8      	b.n	80041e4 <memcpy+0x4>
	...

080041f4 <_init>:
 80041f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f6:	46c0      	nop			@ (mov r8, r8)
 80041f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fa:	bc08      	pop	{r3}
 80041fc:	469e      	mov	lr, r3
 80041fe:	4770      	bx	lr

08004200 <_fini>:
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	46c0      	nop			@ (mov r8, r8)
 8004204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004206:	bc08      	pop	{r3}
 8004208:	469e      	mov	lr, r3
 800420a:	4770      	bx	lr
