
project1_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015dc  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001694  08001694  00002694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016dc  080016dc  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  080016dc  080016dc  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016dc  080016dc  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016dc  080016dc  000026dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080016e0  080016e0  000026e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080016e4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080016f0  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080016f0  00003090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006bfb  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001809  00000000  00000000  00009c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000618  00000000  00000000  0000b438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000582  00000000  00000000  0000ba50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001452f  00000000  00000000  0000bfd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000988b  00000000  00000000  00020501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078b8b  00000000  00000000  00029d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a2917  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ee0  00000000  00000000  000a295c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000025aa  00000000  00000000  000a383c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  000a5de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800167c 	.word	0x0800167c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	0800167c 	.word	0x0800167c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <_Z11ws2812_sendPh>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void ws2812_send(uint8_t grb[3])
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[12];
	for(int i = 0; i!= 3; ++i)
 8000220:	2300      	movs	r3, #0
 8000222:	61fb      	str	r3, [r7, #28]
 8000224:	e045      	b.n	80002b2 <_Z11ws2812_sendPh+0x9a>
	{
		for(int j = 0; j!= 4; ++j)
 8000226:	2300      	movs	r3, #0
 8000228:	61bb      	str	r3, [r7, #24]
 800022a:	e03c      	b.n	80002a6 <_Z11ws2812_sendPh+0x8e>
		{
			buffer[4*i+j] = (grb[i] & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 800022c:	69fb      	ldr	r3, [r7, #28]
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	18d3      	adds	r3, r2, r3
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	0019      	movs	r1, r3
 8000236:	69bb      	ldr	r3, [r7, #24]
 8000238:	005b      	lsls	r3, r3, #1
 800023a:	2207      	movs	r2, #7
 800023c:	1ad3      	subs	r3, r2, r3
 800023e:	4119      	asrs	r1, r3
 8000240:	000b      	movs	r3, r1
 8000242:	2201      	movs	r2, #1
 8000244:	4013      	ands	r3, r2
 8000246:	d001      	beq.n	800024c <_Z11ws2812_sendPh+0x34>
 8000248:	21c0      	movs	r1, #192	@ 0xc0
 800024a:	e000      	b.n	800024e <_Z11ws2812_sendPh+0x36>
 800024c:	2180      	movs	r1, #128	@ 0x80
 800024e:	69fb      	ldr	r3, [r7, #28]
 8000250:	009a      	lsls	r2, r3, #2
 8000252:	69bb      	ldr	r3, [r7, #24]
 8000254:	18d3      	adds	r3, r2, r3
 8000256:	200c      	movs	r0, #12
 8000258:	183a      	adds	r2, r7, r0
 800025a:	54d1      	strb	r1, [r2, r3]
			buffer[4*i+j] |= grb[i] & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 800025c:	69fb      	ldr	r3, [r7, #28]
 800025e:	009a      	lsls	r2, r3, #2
 8000260:	69bb      	ldr	r3, [r7, #24]
 8000262:	18d3      	adds	r3, r2, r3
 8000264:	183a      	adds	r2, r7, r0
 8000266:	5cd3      	ldrb	r3, [r2, r3]
 8000268:	b25a      	sxtb	r2, r3
 800026a:	69fb      	ldr	r3, [r7, #28]
 800026c:	6879      	ldr	r1, [r7, #4]
 800026e:	18cb      	adds	r3, r1, r3
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	0018      	movs	r0, r3
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	2103      	movs	r1, #3
 8000278:	1acb      	subs	r3, r1, r3
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	4118      	asrs	r0, r3
 800027e:	0003      	movs	r3, r0
 8000280:	2101      	movs	r1, #1
 8000282:	400b      	ands	r3, r1
 8000284:	d001      	beq.n	800028a <_Z11ws2812_sendPh+0x72>
 8000286:	230c      	movs	r3, #12
 8000288:	e000      	b.n	800028c <_Z11ws2812_sendPh+0x74>
 800028a:	2308      	movs	r3, #8
 800028c:	4313      	orrs	r3, r2
 800028e:	b259      	sxtb	r1, r3
 8000290:	69fb      	ldr	r3, [r7, #28]
 8000292:	009a      	lsls	r2, r3, #2
 8000294:	69bb      	ldr	r3, [r7, #24]
 8000296:	18d3      	adds	r3, r2, r3
 8000298:	b2c9      	uxtb	r1, r1
 800029a:	220c      	movs	r2, #12
 800029c:	18ba      	adds	r2, r7, r2
 800029e:	54d1      	strb	r1, [r2, r3]
		for(int j = 0; j!= 4; ++j)
 80002a0:	69bb      	ldr	r3, [r7, #24]
 80002a2:	3301      	adds	r3, #1
 80002a4:	61bb      	str	r3, [r7, #24]
 80002a6:	69bb      	ldr	r3, [r7, #24]
 80002a8:	2b04      	cmp	r3, #4
 80002aa:	d1bf      	bne.n	800022c <_Z11ws2812_sendPh+0x14>
	for(int i = 0; i!= 3; ++i)
 80002ac:	69fb      	ldr	r3, [r7, #28]
 80002ae:	3301      	adds	r3, #1
 80002b0:	61fb      	str	r3, [r7, #28]
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	2b03      	cmp	r3, #3
 80002b6:	d1b6      	bne.n	8000226 <_Z11ws2812_sendPh+0xe>
		}
	}
	HAL_SPI_Transmit(&hspi1, buffer, 12, 10);
 80002b8:	230c      	movs	r3, #12
 80002ba:	18f9      	adds	r1, r7, r3
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <_Z11ws2812_sendPh+0xb8>)
 80002be:	230a      	movs	r3, #10
 80002c0:	220c      	movs	r2, #12
 80002c2:	f001 f8d9 	bl	8001478 <HAL_SPI_Transmit>
}
 80002c6:	46c0      	nop			@ (mov r8, r8)
 80002c8:	46bd      	mov	sp, r7
 80002ca:	b008      	add	sp, #32
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)
 80002d0:	20000028 	.word	0x20000028

080002d4 <_Z12ws2812_resetv>:

void ws2812_reset()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b0b2      	sub	sp, #200	@ 0xc8
 80002d8:	af00      	add	r7, sp, #0
	uint8_t buffer[200] = {0};
 80002da:	003b      	movs	r3, r7
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	3304      	adds	r3, #4
 80002e2:	22c4      	movs	r2, #196	@ 0xc4
 80002e4:	2100      	movs	r1, #0
 80002e6:	0018      	movs	r0, r3
 80002e8:	f001 f99c 	bl	8001624 <memset>
	HAL_SPI_Transmit(&hspi1, buffer, 200, 10);
 80002ec:	0039      	movs	r1, r7
 80002ee:	4804      	ldr	r0, [pc, #16]	@ (8000300 <_Z12ws2812_resetv+0x2c>)
 80002f0:	230a      	movs	r3, #10
 80002f2:	22c8      	movs	r2, #200	@ 0xc8
 80002f4:	f001 f8c0 	bl	8001478 <HAL_SPI_Transmit>
}
 80002f8:	46c0      	nop			@ (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	b032      	add	sp, #200	@ 0xc8
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000028 	.word	0x20000028

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b590      	push	{r4, r7, lr}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030a:	f000 f9ed 	bl	80006e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030e:	f000 f849 	bl	80003a4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000312:	f000 f8eb 	bl	80004ec <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8000316:	f000 f8a7 	bl	8000468 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */
  uint8_t zero[] = {0,0,0};
 800031a:	2308      	movs	r3, #8
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	4a1f      	ldr	r2, [pc, #124]	@ (800039c <main+0x98>)
 8000320:	8811      	ldrh	r1, [r2, #0]
 8000322:	8019      	strh	r1, [r3, #0]
 8000324:	7892      	ldrb	r2, [r2, #2]
 8000326:	709a      	strb	r2, [r3, #2]
  uint8_t violet[] = {238,20,255};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	4a1d      	ldr	r2, [pc, #116]	@ (80003a0 <main+0x9c>)
 800032c:	8811      	ldrh	r1, [r2, #0]
 800032e:	8019      	strh	r1, [r3, #0]
 8000330:	7892      	ldrb	r2, [r2, #2]
 8000332:	709a      	strb	r2, [r3, #2]
  uint8_t j = 1;
 8000334:	230f      	movs	r3, #15
 8000336:	18fb      	adds	r3, r7, r3
 8000338:	2201      	movs	r2, #1
 800033a:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */



 	 for(uint8_t i = 0;i < j - 1; i++)
 800033c:	230e      	movs	r3, #14
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	2200      	movs	r2, #0
 8000342:	701a      	strb	r2, [r3, #0]
 8000344:	e00a      	b.n	800035c <main+0x58>
 	  {
 		 ws2812_send(zero);
 8000346:	2308      	movs	r3, #8
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	0018      	movs	r0, r3
 800034c:	f7ff ff64 	bl	8000218 <_Z11ws2812_sendPh>
 	 for(uint8_t i = 0;i < j - 1; i++)
 8000350:	210e      	movs	r1, #14
 8000352:	187b      	adds	r3, r7, r1
 8000354:	781a      	ldrb	r2, [r3, #0]
 8000356:	187b      	adds	r3, r7, r1
 8000358:	3201      	adds	r2, #1
 800035a:	701a      	strb	r2, [r3, #0]
 800035c:	230e      	movs	r3, #14
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	781a      	ldrb	r2, [r3, #0]
 8000362:	240f      	movs	r4, #15
 8000364:	193b      	adds	r3, r7, r4
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	3b01      	subs	r3, #1
 800036a:	429a      	cmp	r2, r3
 800036c:	dbeb      	blt.n	8000346 <main+0x42>
 	  }
 	  ws2812_send(violet);
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	0018      	movs	r0, r3
 8000372:	f7ff ff51 	bl	8000218 <_Z11ws2812_sendPh>
 	  ws2812_reset();
 8000376:	f7ff ffad 	bl	80002d4 <_Z12ws2812_resetv>
 	  j++;
 800037a:	193b      	adds	r3, r7, r4
 800037c:	781a      	ldrb	r2, [r3, #0]
 800037e:	193b      	adds	r3, r7, r4
 8000380:	3201      	adds	r2, #1
 8000382:	701a      	strb	r2, [r3, #0]
 	  if(j == 194)j = 1;
 8000384:	193b      	adds	r3, r7, r4
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2bc2      	cmp	r3, #194	@ 0xc2
 800038a:	d102      	bne.n	8000392 <main+0x8e>
 800038c:	193b      	adds	r3, r7, r4
 800038e:	2201      	movs	r2, #1
 8000390:	701a      	strb	r2, [r3, #0]
 	  HAL_Delay(50);
 8000392:	2032      	movs	r0, #50	@ 0x32
 8000394:	f000 f9ce 	bl	8000734 <HAL_Delay>

  }
 8000398:	e7d0      	b.n	800033c <main+0x38>
 800039a:	46c0      	nop			@ (mov r8, r8)
 800039c:	08001694 	.word	0x08001694
 80003a0:	08001698 	.word	0x08001698

080003a4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b093      	sub	sp, #76	@ 0x4c
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	2414      	movs	r4, #20
 80003ac:	193b      	adds	r3, r7, r4
 80003ae:	0018      	movs	r0, r3
 80003b0:	2334      	movs	r3, #52	@ 0x34
 80003b2:	001a      	movs	r2, r3
 80003b4:	2100      	movs	r1, #0
 80003b6:	f001 f935 	bl	8001624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	0018      	movs	r0, r3
 80003be:	2310      	movs	r3, #16
 80003c0:	001a      	movs	r2, r3
 80003c2:	2100      	movs	r1, #0
 80003c4:	f001 f92e 	bl	8001624 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003c8:	2380      	movs	r3, #128	@ 0x80
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	0018      	movs	r0, r3
 80003ce:	f000 faff 	bl	80009d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d2:	193b      	adds	r3, r7, r4
 80003d4:	2202      	movs	r2, #2
 80003d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	2280      	movs	r2, #128	@ 0x80
 80003dc:	0052      	lsls	r2, r2, #1
 80003de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003e0:	0021      	movs	r1, r4
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2240      	movs	r2, #64	@ 0x40
 80003ec:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	2202      	movs	r2, #2
 80003f2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2202      	movs	r2, #2
 80003f8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2210      	movs	r2, #16
 80003fe:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2219      	movs	r2, #25
 8000404:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2280      	movs	r2, #128	@ 0x80
 800040a:	0292      	lsls	r2, r2, #10
 800040c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800040e:	187b      	adds	r3, r7, r1
 8000410:	22c0      	movs	r2, #192	@ 0xc0
 8000412:	05d2      	lsls	r2, r2, #23
 8000414:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000416:	187b      	adds	r3, r7, r1
 8000418:	0018      	movs	r0, r3
 800041a:	f000 fb09 	bl	8000a30 <HAL_RCC_OscConfig>
 800041e:	0003      	movs	r3, r0
 8000420:	1e5a      	subs	r2, r3, #1
 8000422:	4193      	sbcs	r3, r2
 8000424:	b2db      	uxtb	r3, r3
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 800042a:	f000 f8b3 	bl	8000594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2207      	movs	r2, #7
 8000432:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2202      	movs	r2, #2
 8000438:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2102      	movs	r1, #2
 800044a:	0018      	movs	r0, r3
 800044c:	f000 fd9c 	bl	8000f88 <HAL_RCC_ClockConfig>
 8000450:	0003      	movs	r3, r0
 8000452:	1e5a      	subs	r2, r3, #1
 8000454:	4193      	sbcs	r3, r2
 8000456:	b2db      	uxtb	r3, r3
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 800045c:	f000 f89a 	bl	8000594 <Error_Handler>
  }
}
 8000460:	46c0      	nop			@ (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	b013      	add	sp, #76	@ 0x4c
 8000466:	bd90      	pop	{r4, r7, pc}

08000468 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800046c:	4b1d      	ldr	r3, [pc, #116]	@ (80004e4 <_ZL12MX_SPI1_Initv+0x7c>)
 800046e:	4a1e      	ldr	r2, [pc, #120]	@ (80004e8 <_ZL12MX_SPI1_Initv+0x80>)
 8000470:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000472:	4b1c      	ldr	r3, [pc, #112]	@ (80004e4 <_ZL12MX_SPI1_Initv+0x7c>)
 8000474:	2282      	movs	r2, #130	@ 0x82
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800047a:	4b1a      	ldr	r3, [pc, #104]	@ (80004e4 <_ZL12MX_SPI1_Initv+0x7c>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000480:	4b18      	ldr	r3, [pc, #96]	@ (80004e4 <_ZL12MX_SPI1_Initv+0x7c>)
 8000482:	22e0      	movs	r2, #224	@ 0xe0
 8000484:	00d2      	lsls	r2, r2, #3
 8000486:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <_ZL12MX_SPI1_Initv+0x7c>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800048e:	4b15      	ldr	r3, [pc, #84]	@ (80004e4 <_ZL12MX_SPI1_Initv+0x7c>)
 8000490:	2201      	movs	r2, #1
 8000492:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000494:	4b13      	ldr	r3, [pc, #76]	@ (80004e4 <_ZL12MX_SPI1_Initv+0x7c>)
 8000496:	2280      	movs	r2, #128	@ 0x80
 8000498:	0092      	lsls	r2, r2, #2
 800049a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800049c:	4b11      	ldr	r3, [pc, #68]	@ (80004e4 <_ZL12MX_SPI1_Initv+0x7c>)
 800049e:	2218      	movs	r2, #24
 80004a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004a2:	4b10      	ldr	r3, [pc, #64]	@ (80004e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004a8:	4b0e      	ldr	r3, [pc, #56]	@ (80004e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004ae:	4b0d      	ldr	r3, [pc, #52]	@ (80004e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004b4:	4b0b      	ldr	r3, [pc, #44]	@ (80004e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80004b6:	2207      	movs	r2, #7
 80004b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ba:	4b0a      	ldr	r3, [pc, #40]	@ (80004e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80004c0:	4b08      	ldr	r3, [pc, #32]	@ (80004e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004c6:	4b07      	ldr	r3, [pc, #28]	@ (80004e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 ff2f 	bl	800132c <HAL_SPI_Init>
 80004ce:	0003      	movs	r3, r0
 80004d0:	1e5a      	subs	r2, r3, #1
 80004d2:	4193      	sbcs	r3, r2
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 80004da:	f000 f85b 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000028 	.word	0x20000028
 80004e8:	40013000 	.word	0x40013000

080004ec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b089      	sub	sp, #36	@ 0x24
 80004f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f2:	240c      	movs	r4, #12
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	0018      	movs	r0, r3
 80004f8:	2314      	movs	r3, #20
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f001 f891 	bl	8001624 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	4b22      	ldr	r3, [pc, #136]	@ (800058c <_ZL12MX_GPIO_Initv+0xa0>)
 8000504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000506:	4b21      	ldr	r3, [pc, #132]	@ (800058c <_ZL12MX_GPIO_Initv+0xa0>)
 8000508:	2101      	movs	r1, #1
 800050a:	430a      	orrs	r2, r1
 800050c:	635a      	str	r2, [r3, #52]	@ 0x34
 800050e:	4b1f      	ldr	r3, [pc, #124]	@ (800058c <_ZL12MX_GPIO_Initv+0xa0>)
 8000510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000512:	2201      	movs	r2, #1
 8000514:	4013      	ands	r3, r2
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051a:	4b1c      	ldr	r3, [pc, #112]	@ (800058c <_ZL12MX_GPIO_Initv+0xa0>)
 800051c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800051e:	4b1b      	ldr	r3, [pc, #108]	@ (800058c <_ZL12MX_GPIO_Initv+0xa0>)
 8000520:	2102      	movs	r1, #2
 8000522:	430a      	orrs	r2, r1
 8000524:	635a      	str	r2, [r3, #52]	@ 0x34
 8000526:	4b19      	ldr	r3, [pc, #100]	@ (800058c <_ZL12MX_GPIO_Initv+0xa0>)
 8000528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800052a:	2202      	movs	r2, #2
 800052c:	4013      	ands	r3, r2
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000532:	23a0      	movs	r3, #160	@ 0xa0
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	2200      	movs	r2, #0
 8000538:	2170      	movs	r1, #112	@ 0x70
 800053a:	0018      	movs	r0, r3
 800053c:	f000 fa42 	bl	80009c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = CS_Pin|LED1_Pin|LED2_Pin;
 8000540:	193b      	adds	r3, r7, r4
 8000542:	2270      	movs	r2, #112	@ 0x70
 8000544:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	193b      	adds	r3, r7, r4
 8000548:	2201      	movs	r2, #1
 800054a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	193b      	adds	r3, r7, r4
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	193b      	adds	r3, r7, r4
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	193a      	adds	r2, r7, r4
 800055a:	23a0      	movs	r3, #160	@ 0xa0
 800055c:	05db      	lsls	r3, r3, #23
 800055e:	0011      	movs	r1, r2
 8000560:	0018      	movs	r0, r3
 8000562:	f000 f93d 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2203      	movs	r2, #3
 800056a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2200      	movs	r2, #0
 8000570:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2201      	movs	r2, #1
 8000576:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000578:	193b      	adds	r3, r7, r4
 800057a:	4a05      	ldr	r2, [pc, #20]	@ (8000590 <_ZL12MX_GPIO_Initv+0xa4>)
 800057c:	0019      	movs	r1, r3
 800057e:	0010      	movs	r0, r2
 8000580:	f000 f92e 	bl	80007e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000584:	46c0      	nop			@ (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b009      	add	sp, #36	@ 0x24
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	50000400 	.word	0x50000400

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	46c0      	nop			@ (mov r8, r8)
 800059e:	e7fd      	b.n	800059c <Error_Handler+0x8>

080005a0 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a0:	2201      	movs	r2, #1
 80005a2:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <HAL_MspInit+0x2c>)
{
 80005a4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80005a8:	4311      	orrs	r1, r2
 80005aa:	6419      	str	r1, [r3, #64]	@ 0x40
 80005ac:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80005ae:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b2:	9200      	str	r2, [sp, #0]
 80005b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005b8:	0549      	lsls	r1, r1, #21
 80005ba:	430a      	orrs	r2, r1
 80005bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80005c0:	400b      	ands	r3, r1
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c6:	b002      	add	sp, #8
 80005c8:	4770      	bx	lr
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005d0:	b510      	push	{r4, lr}
 80005d2:	0004      	movs	r4, r0
 80005d4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	2214      	movs	r2, #20
 80005d8:	2100      	movs	r1, #0
 80005da:	a802      	add	r0, sp, #8
 80005dc:	f001 f822 	bl	8001624 <memset>
  if(hspi->Instance==SPI1)
 80005e0:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <HAL_SPI_MspInit+0x54>)
 80005e2:	6822      	ldr	r2, [r4, #0]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d001      	beq.n	80005ec <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80005e8:	b008      	add	sp, #32
 80005ea:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005ec:	2180      	movs	r1, #128	@ 0x80
 80005ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <HAL_SPI_MspInit+0x58>)
 80005f0:	0149      	lsls	r1, r1, #5
 80005f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005f6:	430a      	orrs	r2, r1
 80005f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80005fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005fe:	400a      	ands	r2, r1
 8000600:	9200      	str	r2, [sp, #0]
 8000602:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	2201      	movs	r2, #1
 8000606:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000608:	4311      	orrs	r1, r2
 800060a:	6359      	str	r1, [r3, #52]	@ 0x34
 800060c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000610:	401a      	ands	r2, r3
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SCK_Pin|DIN_Pin;
 8000616:	2282      	movs	r2, #130	@ 0x82
 8000618:	2302      	movs	r3, #2
 800061a:	9202      	str	r2, [sp, #8]
 800061c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	f000 f8df 	bl	80007e0 <HAL_GPIO_Init>
}
 8000622:	e7e1      	b.n	80005e8 <HAL_SPI_MspInit+0x18>
 8000624:	40013000 	.word	0x40013000
 8000628:	40021000 	.word	0x40021000

0800062c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800062c:	e7fe      	b.n	800062c <NMI_Handler>
 800062e:	46c0      	nop			@ (mov r8, r8)

08000630 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000630:	e7fe      	b.n	8000630 <HardFault_Handler>
 8000632:	46c0      	nop			@ (mov r8, r8)

08000634 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000634:	4770      	bx	lr
 8000636:	46c0      	nop			@ (mov r8, r8)

08000638 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000638:	4770      	bx	lr
 800063a:	46c0      	nop			@ (mov r8, r8)

0800063c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063e:	f000 f867 	bl	8000710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000642:	bd10      	pop	{r4, pc}

08000644 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000644:	4770      	bx	lr
 8000646:	46c0      	nop			@ (mov r8, r8)

08000648 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000648:	480d      	ldr	r0, [pc, #52]	@ (8000680 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800064c:	f7ff fffa 	bl	8000644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <LoopForever+0x6>)
  ldr r1, =_edata
 8000652:	490d      	ldr	r1, [pc, #52]	@ (8000688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000654:	4a0d      	ldr	r2, [pc, #52]	@ (800068c <LoopForever+0xe>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a0a      	ldr	r2, [pc, #40]	@ (8000690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000668:	4c0a      	ldr	r4, [pc, #40]	@ (8000694 <LoopForever+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000676:	f000 ffdd 	bl	8001634 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800067a:	f7ff fe43 	bl	8000304 <main>

0800067e <LoopForever>:

LoopForever:
  b LoopForever
 800067e:	e7fe      	b.n	800067e <LoopForever>
  ldr   r0, =_estack
 8000680:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800068c:	080016e4 	.word	0x080016e4
  ldr r2, =_sbss
 8000690:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000694:	20000090 	.word	0x20000090

08000698 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC1_IRQHandler>
	...

0800069c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800069c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <HAL_InitTick+0x40>)
{
 80006a0:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 80006a2:	7819      	ldrb	r1, [r3, #0]
 80006a4:	2900      	cmp	r1, #0
 80006a6:	d101      	bne.n	80006ac <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80006a8:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80006ac:	20fa      	movs	r0, #250	@ 0xfa
 80006ae:	0080      	lsls	r0, r0, #2
 80006b0:	f7ff fd26 	bl	8000100 <__udivsi3>
 80006b4:	4d0a      	ldr	r5, [pc, #40]	@ (80006e0 <HAL_InitTick+0x44>)
 80006b6:	0001      	movs	r1, r0
 80006b8:	6828      	ldr	r0, [r5, #0]
 80006ba:	f7ff fd21 	bl	8000100 <__udivsi3>
 80006be:	f000 f875 	bl	80007ac <HAL_SYSTICK_Config>
 80006c2:	2800      	cmp	r0, #0
 80006c4:	d1f0      	bne.n	80006a8 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c6:	2c03      	cmp	r4, #3
 80006c8:	d8ee      	bhi.n	80006a8 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ca:	3801      	subs	r0, #1
 80006cc:	2200      	movs	r2, #0
 80006ce:	0021      	movs	r1, r4
 80006d0:	f000 f842 	bl	8000758 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006d4:	4b03      	ldr	r3, [pc, #12]	@ (80006e4 <HAL_InitTick+0x48>)
 80006d6:	2000      	movs	r0, #0
 80006d8:	601c      	str	r4, [r3, #0]
  return status;
 80006da:	e7e6      	b.n	80006aa <HAL_InitTick+0xe>
 80006dc:	20000004 	.word	0x20000004
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000008 	.word	0x20000008

080006e8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e8:	2380      	movs	r3, #128	@ 0x80
 80006ea:	4a08      	ldr	r2, [pc, #32]	@ (800070c <HAL_Init+0x24>)
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	6811      	ldr	r1, [r2, #0]
{
 80006f0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f2:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006f4:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f6:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006f8:	f7ff ffd0 	bl	800069c <HAL_InitTick>
 80006fc:	1e04      	subs	r4, r0, #0
 80006fe:	d002      	beq.n	8000706 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8000700:	2401      	movs	r4, #1
}
 8000702:	0020      	movs	r0, r4
 8000704:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8000706:	f7ff ff4b 	bl	80005a0 <HAL_MspInit>
 800070a:	e7fa      	b.n	8000702 <HAL_Init+0x1a>
 800070c:	40022000 	.word	0x40022000

08000710 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000710:	4a03      	ldr	r2, [pc, #12]	@ (8000720 <HAL_IncTick+0x10>)
 8000712:	4b04      	ldr	r3, [pc, #16]	@ (8000724 <HAL_IncTick+0x14>)
 8000714:	6811      	ldr	r1, [r2, #0]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	185b      	adds	r3, r3, r1
 800071a:	6013      	str	r3, [r2, #0]
}
 800071c:	4770      	bx	lr
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	2000008c 	.word	0x2000008c
 8000724:	20000004 	.word	0x20000004

08000728 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000728:	4b01      	ldr	r3, [pc, #4]	@ (8000730 <HAL_GetTick+0x8>)
 800072a:	6818      	ldr	r0, [r3, #0]
}
 800072c:	4770      	bx	lr
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	2000008c 	.word	0x2000008c

08000734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000738:	f7ff fff6 	bl	8000728 <HAL_GetTick>
 800073c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800073e:	1c63      	adds	r3, r4, #1
 8000740:	d002      	beq.n	8000748 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000742:	4b04      	ldr	r3, [pc, #16]	@ (8000754 <HAL_Delay+0x20>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000748:	f7ff ffee 	bl	8000728 <HAL_GetTick>
 800074c:	1b40      	subs	r0, r0, r5
 800074e:	42a0      	cmp	r0, r4
 8000750:	d3fa      	bcc.n	8000748 <HAL_Delay+0x14>
  {
  }
}
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	20000004 	.word	0x20000004

08000758 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000758:	22ff      	movs	r2, #255	@ 0xff
 800075a:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075c:	b510      	push	{r4, lr}
 800075e:	0014      	movs	r4, r2
 8000760:	4003      	ands	r3, r0
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000766:	0189      	lsls	r1, r1, #6
 8000768:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800076a:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800076c:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 800076e:	2800      	cmp	r0, #0
 8000770:	db0b      	blt.n	800078a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <HAL_NVIC_SetPriority+0x4c>)
 8000774:	21c0      	movs	r1, #192	@ 0xc0
 8000776:	469c      	mov	ip, r3
 8000778:	0880      	lsrs	r0, r0, #2
 800077a:	0080      	lsls	r0, r0, #2
 800077c:	4460      	add	r0, ip
 800077e:	0089      	lsls	r1, r1, #2
 8000780:	5843      	ldr	r3, [r0, r1]
 8000782:	4023      	ands	r3, r4
 8000784:	4313      	orrs	r3, r2
 8000786:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000788:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800078a:	230f      	movs	r3, #15
 800078c:	4906      	ldr	r1, [pc, #24]	@ (80007a8 <HAL_NVIC_SetPriority+0x50>)
 800078e:	4003      	ands	r3, r0
 8000790:	468c      	mov	ip, r1
 8000792:	3b08      	subs	r3, #8
 8000794:	089b      	lsrs	r3, r3, #2
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4463      	add	r3, ip
 800079a:	69d9      	ldr	r1, [r3, #28]
 800079c:	400c      	ands	r4, r1
 800079e:	4314      	orrs	r4, r2
 80007a0:	61dc      	str	r4, [r3, #28]
 80007a2:	e7f1      	b.n	8000788 <HAL_NVIC_SetPriority+0x30>
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ac:	2280      	movs	r2, #128	@ 0x80
 80007ae:	1e43      	subs	r3, r0, #1
 80007b0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d20e      	bcs.n	80007d6 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b8:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ba:	4a07      	ldr	r2, [pc, #28]	@ (80007d8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007bc:	4807      	ldr	r0, [pc, #28]	@ (80007dc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007be:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c0:	6a03      	ldr	r3, [r0, #32]
 80007c2:	0609      	lsls	r1, r1, #24
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	0a1b      	lsrs	r3, r3, #8
 80007c8:	430b      	orrs	r3, r1
 80007ca:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007cc:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ce:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d2:	3307      	adds	r3, #7
 80007d4:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80007d6:	4770      	bx	lr
 80007d8:	e000e010 	.word	0xe000e010
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e2:	46de      	mov	lr, fp
 80007e4:	4657      	mov	r7, sl
 80007e6:	464e      	mov	r6, r9
 80007e8:	4645      	mov	r5, r8
 80007ea:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ec:	680c      	ldr	r4, [r1, #0]
{
 80007ee:	468b      	mov	fp, r1
  uint32_t position = 0x00u;
 80007f0:	2300      	movs	r3, #0
{
 80007f2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007f4:	2c00      	cmp	r4, #0
 80007f6:	d068      	beq.n	80008ca <HAL_GPIO_Init+0xea>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007f8:	2201      	movs	r2, #1
 80007fa:	409a      	lsls	r2, r3
 80007fc:	4694      	mov	ip, r2
 80007fe:	4022      	ands	r2, r4
 8000800:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 8000802:	4662      	mov	r2, ip
 8000804:	4214      	tst	r4, r2
 8000806:	d05c      	beq.n	80008c2 <HAL_GPIO_Init+0xe2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000808:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800080a:	465a      	mov	r2, fp
 800080c:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800080e:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000810:	6855      	ldr	r5, [r2, #4]
 8000812:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000814:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000816:	402a      	ands	r2, r5
 8000818:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800081a:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800081c:	2e01      	cmp	r6, #1
 800081e:	d95b      	bls.n	80008d8 <HAL_GPIO_Init+0xf8>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000820:	2a03      	cmp	r2, #3
 8000822:	d000      	beq.n	8000826 <HAL_GPIO_Init+0x46>
 8000824:	e0ad      	b.n	8000982 <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000826:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000828:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800082a:	9900      	ldr	r1, [sp, #0]
 800082c:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800082e:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8000830:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000832:	22c0      	movs	r2, #192	@ 0xc0
 8000834:	0292      	lsls	r2, r2, #10
 8000836:	4215      	tst	r5, r2
 8000838:	d043      	beq.n	80008c2 <HAL_GPIO_Init+0xe2>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800083a:	2703      	movs	r7, #3
 800083c:	260f      	movs	r6, #15
 800083e:	495d      	ldr	r1, [pc, #372]	@ (80009b4 <HAL_GPIO_Init+0x1d4>)
 8000840:	401f      	ands	r7, r3
 8000842:	468c      	mov	ip, r1
 8000844:	00ff      	lsls	r7, r7, #3
 8000846:	40be      	lsls	r6, r7
        temp = EXTI->EXTICR[position >> 2u];
 8000848:	089a      	lsrs	r2, r3, #2
 800084a:	0092      	lsls	r2, r2, #2
 800084c:	4462      	add	r2, ip
 800084e:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000850:	43b1      	bics	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000852:	26a0      	movs	r6, #160	@ 0xa0
 8000854:	05f6      	lsls	r6, r6, #23
 8000856:	42b0      	cmp	r0, r6
 8000858:	d00e      	beq.n	8000878 <HAL_GPIO_Init+0x98>
 800085a:	4e57      	ldr	r6, [pc, #348]	@ (80009b8 <HAL_GPIO_Init+0x1d8>)
 800085c:	42b0      	cmp	r0, r6
 800085e:	d100      	bne.n	8000862 <HAL_GPIO_Init+0x82>
 8000860:	e0a0      	b.n	80009a4 <HAL_GPIO_Init+0x1c4>
 8000862:	4e56      	ldr	r6, [pc, #344]	@ (80009bc <HAL_GPIO_Init+0x1dc>)
 8000864:	42b0      	cmp	r0, r6
 8000866:	d100      	bne.n	800086a <HAL_GPIO_Init+0x8a>
 8000868:	e0a0      	b.n	80009ac <HAL_GPIO_Init+0x1cc>
 800086a:	4e55      	ldr	r6, [pc, #340]	@ (80009c0 <HAL_GPIO_Init+0x1e0>)
 800086c:	42b0      	cmp	r0, r6
 800086e:	d100      	bne.n	8000872 <HAL_GPIO_Init+0x92>
 8000870:	e094      	b.n	800099c <HAL_GPIO_Init+0x1bc>
 8000872:	2605      	movs	r6, #5
 8000874:	40be      	lsls	r6, r7
 8000876:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000878:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 800087a:	6611      	str	r1, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 800087c:	4651      	mov	r1, sl
        temp = EXTI->RTSR1;
 800087e:	4a4d      	ldr	r2, [pc, #308]	@ (80009b4 <HAL_GPIO_Init+0x1d4>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000880:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 8000882:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR1;
 8000884:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000886:	4235      	tst	r5, r6
 8000888:	d000      	beq.n	800088c <HAL_GPIO_Init+0xac>
 800088a:	e077      	b.n	800097c <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 800088c:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800088e:	4e49      	ldr	r6, [pc, #292]	@ (80009b4 <HAL_GPIO_Init+0x1d4>)
 8000890:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 8000892:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000894:	2680      	movs	r6, #128	@ 0x80
 8000896:	03b6      	lsls	r6, r6, #14
 8000898:	4235      	tst	r5, r6
 800089a:	d16c      	bne.n	8000976 <HAL_GPIO_Init+0x196>
        temp &= ~(iocurrent);
 800089c:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800089e:	4e45      	ldr	r6, [pc, #276]	@ (80009b4 <HAL_GPIO_Init+0x1d4>)
 80008a0:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80008a2:	2284      	movs	r2, #132	@ 0x84
 80008a4:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80008a6:	03af      	lsls	r7, r5, #14
 80008a8:	d462      	bmi.n	8000970 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 80008aa:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80008ac:	2784      	movs	r7, #132	@ 0x84
 80008ae:	4e41      	ldr	r6, [pc, #260]	@ (80009b4 <HAL_GPIO_Init+0x1d4>)
 80008b0:	51f2      	str	r2, [r6, r7]

        temp = EXTI->IMR1;
 80008b2:	2280      	movs	r2, #128	@ 0x80
 80008b4:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80008b6:	03ed      	lsls	r5, r5, #15
 80008b8:	d456      	bmi.n	8000968 <HAL_GPIO_Init+0x188>
        temp &= ~(iocurrent);
 80008ba:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80008bc:	2180      	movs	r1, #128	@ 0x80
 80008be:	4d3d      	ldr	r5, [pc, #244]	@ (80009b4 <HAL_GPIO_Init+0x1d4>)
 80008c0:	506a      	str	r2, [r5, r1]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008c2:	0022      	movs	r2, r4
      }
    }

    position++;
 80008c4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008c6:	40da      	lsrs	r2, r3
 80008c8:	d196      	bne.n	80007f8 <HAL_GPIO_Init+0x18>
  }
}
 80008ca:	b003      	add	sp, #12
 80008cc:	bcf0      	pop	{r4, r5, r6, r7}
 80008ce:	46bb      	mov	fp, r7
 80008d0:	46b2      	mov	sl, r6
 80008d2:	46a9      	mov	r9, r5
 80008d4:	46a0      	mov	r8, r4
 80008d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80008d8:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008da:	000e      	movs	r6, r1
 80008dc:	9900      	ldr	r1, [sp, #0]
 80008de:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008e0:	4659      	mov	r1, fp
 80008e2:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008e4:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008e6:	000e      	movs	r6, r1
 80008e8:	40be      	lsls	r6, r7
 80008ea:	46b0      	mov	r8, r6
 80008ec:	464e      	mov	r6, r9
 80008ee:	4641      	mov	r1, r8
 80008f0:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 80008f2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80008f4:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008f6:	000e      	movs	r6, r1
 80008f8:	4661      	mov	r1, ip
 80008fa:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008fc:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008fe:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000900:	000e      	movs	r6, r1
 8000902:	2101      	movs	r1, #1
 8000904:	400e      	ands	r6, r1
 8000906:	409e      	lsls	r6, r3
 8000908:	46b4      	mov	ip, r6
 800090a:	4646      	mov	r6, r8
 800090c:	4661      	mov	r1, ip
 800090e:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 8000910:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8000912:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000914:	000e      	movs	r6, r1
 8000916:	9900      	ldr	r1, [sp, #0]
 8000918:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800091a:	4659      	mov	r1, fp
 800091c:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800091e:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000920:	000e      	movs	r6, r1
 8000922:	40be      	lsls	r6, r7
 8000924:	46b4      	mov	ip, r6
 8000926:	4646      	mov	r6, r8
 8000928:	4661      	mov	r1, ip
 800092a:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 800092c:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800092e:	2a02      	cmp	r2, #2
 8000930:	d000      	beq.n	8000934 <HAL_GPIO_Init+0x154>
 8000932:	e778      	b.n	8000826 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 8000934:	08d9      	lsrs	r1, r3, #3
 8000936:	0089      	lsls	r1, r1, #2
 8000938:	468c      	mov	ip, r1
 800093a:	4484      	add	ip, r0
 800093c:	4661      	mov	r1, ip
 800093e:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000940:	2107      	movs	r1, #7
 8000942:	4019      	ands	r1, r3
 8000944:	0089      	lsls	r1, r1, #2
 8000946:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 8000948:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800094a:	210f      	movs	r1, #15
 800094c:	4646      	mov	r6, r8
 800094e:	40b1      	lsls	r1, r6
 8000950:	9e01      	ldr	r6, [sp, #4]
 8000952:	438e      	bics	r6, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000954:	4659      	mov	r1, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000956:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000958:	4646      	mov	r6, r8
 800095a:	6909      	ldr	r1, [r1, #16]
 800095c:	40b1      	lsls	r1, r6
 800095e:	9e01      	ldr	r6, [sp, #4]
 8000960:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 8000962:	4661      	mov	r1, ip
 8000964:	620e      	str	r6, [r1, #32]
 8000966:	e75e      	b.n	8000826 <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 8000968:	4651      	mov	r1, sl
 800096a:	4311      	orrs	r1, r2
 800096c:	000a      	movs	r2, r1
 800096e:	e7a5      	b.n	80008bc <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8000970:	4656      	mov	r6, sl
 8000972:	4332      	orrs	r2, r6
 8000974:	e79a      	b.n	80008ac <HAL_GPIO_Init+0xcc>
          temp |= iocurrent;
 8000976:	4656      	mov	r6, sl
 8000978:	4332      	orrs	r2, r6
 800097a:	e790      	b.n	800089e <HAL_GPIO_Init+0xbe>
          temp |= iocurrent;
 800097c:	4656      	mov	r6, sl
 800097e:	4332      	orrs	r2, r6
 8000980:	e785      	b.n	800088e <HAL_GPIO_Init+0xae>
        temp = GPIOx->PUPDR;
 8000982:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000984:	9e00      	ldr	r6, [sp, #0]
 8000986:	4031      	ands	r1, r6
 8000988:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800098a:	4659      	mov	r1, fp
 800098c:	6889      	ldr	r1, [r1, #8]
 800098e:	40b9      	lsls	r1, r7
 8000990:	468c      	mov	ip, r1
 8000992:	4641      	mov	r1, r8
 8000994:	4666      	mov	r6, ip
 8000996:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8000998:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800099a:	e744      	b.n	8000826 <HAL_GPIO_Init+0x46>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800099c:	2603      	movs	r6, #3
 800099e:	40be      	lsls	r6, r7
 80009a0:	4331      	orrs	r1, r6
 80009a2:	e769      	b.n	8000878 <HAL_GPIO_Init+0x98>
 80009a4:	2601      	movs	r6, #1
 80009a6:	40be      	lsls	r6, r7
 80009a8:	4331      	orrs	r1, r6
 80009aa:	e765      	b.n	8000878 <HAL_GPIO_Init+0x98>
 80009ac:	2602      	movs	r6, #2
 80009ae:	40be      	lsls	r6, r7
 80009b0:	4331      	orrs	r1, r6
 80009b2:	e761      	b.n	8000878 <HAL_GPIO_Init+0x98>
 80009b4:	40021800 	.word	0x40021800
 80009b8:	50000400 	.word	0x50000400
 80009bc:	50000800 	.word	0x50000800
 80009c0:	50000c00 	.word	0x50000c00

080009c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009c4:	2a00      	cmp	r2, #0
 80009c6:	d001      	beq.n	80009cc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009c8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80009ca:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009cc:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80009ce:	e7fc      	b.n	80009ca <HAL_GPIO_WritePin+0x6>

080009d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80009d0:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80009d2:	4c13      	ldr	r4, [pc, #76]	@ (8000a20 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80009d4:	4a13      	ldr	r2, [pc, #76]	@ (8000a24 <HAL_PWREx_ControlVoltageScaling+0x54>)
 80009d6:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80009d8:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80009da:	4013      	ands	r3, r2
 80009dc:	4303      	orrs	r3, r0
 80009de:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80009e0:	2380      	movs	r3, #128	@ 0x80
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4298      	cmp	r0, r3
 80009e6:	d001      	beq.n	80009ec <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 80009e8:	0028      	movs	r0, r5
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <HAL_PWREx_ControlVoltageScaling+0x58>)
 80009ee:	490f      	ldr	r1, [pc, #60]	@ (8000a2c <HAL_PWREx_ControlVoltageScaling+0x5c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	0058      	lsls	r0, r3, #1
 80009f4:	18c0      	adds	r0, r0, r3
 80009f6:	0040      	lsls	r0, r0, #1
 80009f8:	f7ff fb82 	bl	8000100 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009fc:	2280      	movs	r2, #128	@ 0x80
 80009fe:	6963      	ldr	r3, [r4, #20]
 8000a00:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000a02:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000a04:	4213      	tst	r3, r2
 8000a06:	d102      	bne.n	8000a0e <HAL_PWREx_ControlVoltageScaling+0x3e>
 8000a08:	e7ee      	b.n	80009e8 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	d005      	beq.n	8000a1a <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000a0e:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8000a10:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000a12:	4213      	tst	r3, r2
 8000a14:	d1f9      	bne.n	8000a0a <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8000a16:	2500      	movs	r5, #0
 8000a18:	e7e6      	b.n	80009e8 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8000a1a:	2503      	movs	r5, #3
 8000a1c:	e7e4      	b.n	80009e8 <HAL_PWREx_ControlVoltageScaling+0x18>
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	40007000 	.word	0x40007000
 8000a24:	fffff9ff 	.word	0xfffff9ff
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	000f4240 	.word	0x000f4240

08000a30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a32:	46ce      	mov	lr, r9
 8000a34:	4647      	mov	r7, r8
 8000a36:	b580      	push	{r7, lr}
 8000a38:	0004      	movs	r4, r0
 8000a3a:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	d027      	beq.n	8000a90 <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a40:	6803      	ldr	r3, [r0, #0]
 8000a42:	07da      	lsls	r2, r3, #31
 8000a44:	d511      	bpl.n	8000a6a <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a46:	2238      	movs	r2, #56	@ 0x38
 8000a48:	49c0      	ldr	r1, [pc, #768]	@ (8000d4c <HAL_RCC_OscConfig+0x31c>)
 8000a4a:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a4c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a4e:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000a50:	2a10      	cmp	r2, #16
 8000a52:	d100      	bne.n	8000a56 <HAL_RCC_OscConfig+0x26>
 8000a54:	e0cc      	b.n	8000bf0 <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000a56:	2a08      	cmp	r2, #8
 8000a58:	d000      	beq.n	8000a5c <HAL_RCC_OscConfig+0x2c>
 8000a5a:	e0cd      	b.n	8000bf8 <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a5c:	4abb      	ldr	r2, [pc, #748]	@ (8000d4c <HAL_RCC_OscConfig+0x31c>)
 8000a5e:	6812      	ldr	r2, [r2, #0]
 8000a60:	0392      	lsls	r2, r2, #14
 8000a62:	d502      	bpl.n	8000a6a <HAL_RCC_OscConfig+0x3a>
 8000a64:	6862      	ldr	r2, [r4, #4]
 8000a66:	2a00      	cmp	r2, #0
 8000a68:	d012      	beq.n	8000a90 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a6a:	079a      	lsls	r2, r3, #30
 8000a6c:	d532      	bpl.n	8000ad4 <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a6e:	2338      	movs	r3, #56	@ 0x38
 8000a70:	4ab6      	ldr	r2, [pc, #728]	@ (8000d4c <HAL_RCC_OscConfig+0x31c>)
 8000a72:	6891      	ldr	r1, [r2, #8]
 8000a74:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a76:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000a78:	2b10      	cmp	r3, #16
 8000a7a:	d100      	bne.n	8000a7e <HAL_RCC_OscConfig+0x4e>
 8000a7c:	e10b      	b.n	8000c96 <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d000      	beq.n	8000a84 <HAL_RCC_OscConfig+0x54>
 8000a82:	e10d      	b.n	8000ca0 <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000a84:	6813      	ldr	r3, [r2, #0]
 8000a86:	055b      	lsls	r3, r3, #21
 8000a88:	d508      	bpl.n	8000a9c <HAL_RCC_OscConfig+0x6c>
 8000a8a:	68e3      	ldr	r3, [r4, #12]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d105      	bne.n	8000a9c <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8000a90:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8000a92:	b003      	add	sp, #12
 8000a94:	bcc0      	pop	{r6, r7}
 8000a96:	46b9      	mov	r9, r7
 8000a98:	46b0      	mov	r8, r6
 8000a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a9c:	6851      	ldr	r1, [r2, #4]
 8000a9e:	6963      	ldr	r3, [r4, #20]
 8000aa0:	48ab      	ldr	r0, [pc, #684]	@ (8000d50 <HAL_RCC_OscConfig+0x320>)
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	4001      	ands	r1, r0
 8000aa6:	430b      	orrs	r3, r1
 8000aa8:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000aaa:	4aa8      	ldr	r2, [pc, #672]	@ (8000d4c <HAL_RCC_OscConfig+0x31c>)
 8000aac:	49a9      	ldr	r1, [pc, #676]	@ (8000d54 <HAL_RCC_OscConfig+0x324>)
 8000aae:	6813      	ldr	r3, [r2, #0]
 8000ab0:	400b      	ands	r3, r1
 8000ab2:	6921      	ldr	r1, [r4, #16]
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000ab8:	6813      	ldr	r3, [r2, #0]
 8000aba:	4aa7      	ldr	r2, [pc, #668]	@ (8000d58 <HAL_RCC_OscConfig+0x328>)
 8000abc:	049b      	lsls	r3, r3, #18
 8000abe:	0f5b      	lsrs	r3, r3, #29
 8000ac0:	40da      	lsrs	r2, r3
 8000ac2:	49a6      	ldr	r1, [pc, #664]	@ (8000d5c <HAL_RCC_OscConfig+0x32c>)
 8000ac4:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000ac6:	4ba6      	ldr	r3, [pc, #664]	@ (8000d60 <HAL_RCC_OscConfig+0x330>)
 8000ac8:	6818      	ldr	r0, [r3, #0]
 8000aca:	f7ff fde7 	bl	800069c <HAL_InitTick>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	d1de      	bne.n	8000a90 <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ad2:	6823      	ldr	r3, [r4, #0]
 8000ad4:	071a      	lsls	r2, r3, #28
 8000ad6:	d46d      	bmi.n	8000bb4 <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	d545      	bpl.n	8000b68 <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000adc:	2338      	movs	r3, #56	@ 0x38
 8000ade:	4a9b      	ldr	r2, [pc, #620]	@ (8000d4c <HAL_RCC_OscConfig+0x31c>)
 8000ae0:	6891      	ldr	r1, [r2, #8]
 8000ae2:	400b      	ands	r3, r1
 8000ae4:	2b20      	cmp	r3, #32
 8000ae6:	d100      	bne.n	8000aea <HAL_RCC_OscConfig+0xba>
 8000ae8:	e0cc      	b.n	8000c84 <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000aea:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000aec:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000aee:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000af0:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8000af2:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000af4:	4219      	tst	r1, r3
 8000af6:	d108      	bne.n	8000b0a <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 8000af8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000afa:	4319      	orrs	r1, r3
 8000afc:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8000afe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8000b00:	4013      	ands	r3, r2
 8000b02:	9301      	str	r3, [sp, #4]
 8000b04:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8000b06:	2301      	movs	r3, #1
 8000b08:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b0a:	2780      	movs	r7, #128	@ 0x80
 8000b0c:	4e95      	ldr	r6, [pc, #596]	@ (8000d64 <HAL_RCC_OscConfig+0x334>)
 8000b0e:	007f      	lsls	r7, r7, #1
 8000b10:	6833      	ldr	r3, [r6, #0]
 8000b12:	423b      	tst	r3, r7
 8000b14:	d100      	bne.n	8000b18 <HAL_RCC_OscConfig+0xe8>
 8000b16:	e0ff      	b.n	8000d18 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b18:	68a3      	ldr	r3, [r4, #8]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d100      	bne.n	8000b20 <HAL_RCC_OscConfig+0xf0>
 8000b1e:	e0e5      	b.n	8000cec <HAL_RCC_OscConfig+0x2bc>
 8000b20:	2b05      	cmp	r3, #5
 8000b22:	d100      	bne.n	8000b26 <HAL_RCC_OscConfig+0xf6>
 8000b24:	e1c8      	b.n	8000eb8 <HAL_RCC_OscConfig+0x488>
 8000b26:	2101      	movs	r1, #1
 8000b28:	4e88      	ldr	r6, [pc, #544]	@ (8000d4c <HAL_RCC_OscConfig+0x31c>)
 8000b2a:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8000b2c:	438a      	bics	r2, r1
 8000b2e:	65f2      	str	r2, [r6, #92]	@ 0x5c
 8000b30:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8000b32:	3103      	adds	r1, #3
 8000b34:	438a      	bics	r2, r1
 8000b36:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d000      	beq.n	8000b3e <HAL_RCC_OscConfig+0x10e>
 8000b3c:	e0da      	b.n	8000cf4 <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 8000b3e:	f7ff fdf3 	bl	8000728 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000b42:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8000b44:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000b46:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b48:	4d87      	ldr	r5, [pc, #540]	@ (8000d68 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000b4a:	e005      	b.n	8000b58 <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b4c:	f7ff fdec 	bl	8000728 <HAL_GetTick>
 8000b50:	1bc0      	subs	r0, r0, r7
 8000b52:	42a8      	cmp	r0, r5
 8000b54:	d900      	bls.n	8000b58 <HAL_RCC_OscConfig+0x128>
 8000b56:	e0ee      	b.n	8000d36 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000b58:	4642      	mov	r2, r8
 8000b5a:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8000b5c:	421a      	tst	r2, r3
 8000b5e:	d1f5      	bne.n	8000b4c <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 8000b60:	464b      	mov	r3, r9
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d100      	bne.n	8000b68 <HAL_RCC_OscConfig+0x138>
 8000b66:	e163      	b.n	8000e30 <HAL_RCC_OscConfig+0x400>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000b68:	69e3      	ldr	r3, [r4, #28]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d020      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b6e:	2238      	movs	r2, #56	@ 0x38
 8000b70:	4d76      	ldr	r5, [pc, #472]	@ (8000d4c <HAL_RCC_OscConfig+0x31c>)
 8000b72:	68a9      	ldr	r1, [r5, #8]
 8000b74:	400a      	ands	r2, r1
 8000b76:	2a10      	cmp	r2, #16
 8000b78:	d100      	bne.n	8000b7c <HAL_RCC_OscConfig+0x14c>
 8000b7a:	e11d      	b.n	8000db8 <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d100      	bne.n	8000b82 <HAL_RCC_OscConfig+0x152>
 8000b80:	e15c      	b.n	8000e3c <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_PLL_DISABLE();
 8000b82:	682b      	ldr	r3, [r5, #0]
 8000b84:	4a79      	ldr	r2, [pc, #484]	@ (8000d6c <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000b86:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8000b88:	4013      	ands	r3, r2
 8000b8a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b8c:	f7ff fdcc 	bl	8000728 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000b90:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8000b92:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000b94:	e005      	b.n	8000ba2 <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b96:	f7ff fdc7 	bl	8000728 <HAL_GetTick>
 8000b9a:	1b00      	subs	r0, r0, r4
 8000b9c:	2802      	cmp	r0, #2
 8000b9e:	d900      	bls.n	8000ba2 <HAL_RCC_OscConfig+0x172>
 8000ba0:	e0c9      	b.n	8000d36 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000ba2:	682b      	ldr	r3, [r5, #0]
 8000ba4:	4233      	tst	r3, r6
 8000ba6:	d1f6      	bne.n	8000b96 <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8000ba8:	68eb      	ldr	r3, [r5, #12]
 8000baa:	4a71      	ldr	r2, [pc, #452]	@ (8000d70 <HAL_RCC_OscConfig+0x340>)
 8000bac:	4013      	ands	r3, r2
 8000bae:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	e76e      	b.n	8000a92 <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000bb4:	2238      	movs	r2, #56	@ 0x38
 8000bb6:	4d65      	ldr	r5, [pc, #404]	@ (8000d4c <HAL_RCC_OscConfig+0x31c>)
 8000bb8:	68a9      	ldr	r1, [r5, #8]
 8000bba:	400a      	ands	r2, r1
 8000bbc:	2a18      	cmp	r2, #24
 8000bbe:	d043      	beq.n	8000c48 <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bc0:	69a3      	ldr	r3, [r4, #24]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d100      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x198>
 8000bc6:	e0b8      	b.n	8000d3a <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 8000bc8:	2201      	movs	r2, #1
 8000bca:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000bcc:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000bd2:	f7ff fda9 	bl	8000728 <HAL_GetTick>
 8000bd6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000bd8:	e005      	b.n	8000be6 <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bda:	f7ff fda5 	bl	8000728 <HAL_GetTick>
 8000bde:	1b80      	subs	r0, r0, r6
 8000be0:	2802      	cmp	r0, #2
 8000be2:	d900      	bls.n	8000be6 <HAL_RCC_OscConfig+0x1b6>
 8000be4:	e0a7      	b.n	8000d36 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000be6:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8000be8:	421f      	tst	r7, r3
 8000bea:	d0f6      	beq.n	8000bda <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bec:	6823      	ldr	r3, [r4, #0]
 8000bee:	e773      	b.n	8000ad8 <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000bf0:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000bf2:	0789      	lsls	r1, r1, #30
 8000bf4:	d100      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x1c8>
 8000bf6:	e731      	b.n	8000a5c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf8:	2280      	movs	r2, #128	@ 0x80
 8000bfa:	6863      	ldr	r3, [r4, #4]
 8000bfc:	0252      	lsls	r2, r2, #9
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d02b      	beq.n	8000c5a <HAL_RCC_OscConfig+0x22a>
 8000c02:	21a0      	movs	r1, #160	@ 0xa0
 8000c04:	02c9      	lsls	r1, r1, #11
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d100      	bne.n	8000c0c <HAL_RCC_OscConfig+0x1dc>
 8000c0a:	e0fc      	b.n	8000e06 <HAL_RCC_OscConfig+0x3d6>
 8000c0c:	4d4f      	ldr	r5, [pc, #316]	@ (8000d4c <HAL_RCC_OscConfig+0x31c>)
 8000c0e:	4959      	ldr	r1, [pc, #356]	@ (8000d74 <HAL_RCC_OscConfig+0x344>)
 8000c10:	682a      	ldr	r2, [r5, #0]
 8000c12:	400a      	ands	r2, r1
 8000c14:	602a      	str	r2, [r5, #0]
 8000c16:	682a      	ldr	r2, [r5, #0]
 8000c18:	4957      	ldr	r1, [pc, #348]	@ (8000d78 <HAL_RCC_OscConfig+0x348>)
 8000c1a:	400a      	ands	r2, r1
 8000c1c:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d11f      	bne.n	8000c62 <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 8000c22:	f7ff fd81 	bl	8000728 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c26:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000c28:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c2a:	02bf      	lsls	r7, r7, #10
 8000c2c:	e004      	b.n	8000c38 <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c2e:	f7ff fd7b 	bl	8000728 <HAL_GetTick>
 8000c32:	1b80      	subs	r0, r0, r6
 8000c34:	2864      	cmp	r0, #100	@ 0x64
 8000c36:	d87e      	bhi.n	8000d36 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c38:	682b      	ldr	r3, [r5, #0]
 8000c3a:	423b      	tst	r3, r7
 8000c3c:	d1f7      	bne.n	8000c2e <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c3e:	6823      	ldr	r3, [r4, #0]
 8000c40:	079a      	lsls	r2, r3, #30
 8000c42:	d400      	bmi.n	8000c46 <HAL_RCC_OscConfig+0x216>
 8000c44:	e746      	b.n	8000ad4 <HAL_RCC_OscConfig+0xa4>
 8000c46:	e712      	b.n	8000a6e <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000c48:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8000c4a:	0792      	lsls	r2, r2, #30
 8000c4c:	d400      	bmi.n	8000c50 <HAL_RCC_OscConfig+0x220>
 8000c4e:	e743      	b.n	8000ad8 <HAL_RCC_OscConfig+0xa8>
 8000c50:	69a2      	ldr	r2, [r4, #24]
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	d000      	beq.n	8000c58 <HAL_RCC_OscConfig+0x228>
 8000c56:	e73f      	b.n	8000ad8 <HAL_RCC_OscConfig+0xa8>
 8000c58:	e71a      	b.n	8000a90 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c5a:	4a3c      	ldr	r2, [pc, #240]	@ (8000d4c <HAL_RCC_OscConfig+0x31c>)
 8000c5c:	6811      	ldr	r1, [r2, #0]
 8000c5e:	430b      	orrs	r3, r1
 8000c60:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000c62:	f7ff fd61 	bl	8000728 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c66:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000c68:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c6a:	4f38      	ldr	r7, [pc, #224]	@ (8000d4c <HAL_RCC_OscConfig+0x31c>)
 8000c6c:	02b6      	lsls	r6, r6, #10
 8000c6e:	e004      	b.n	8000c7a <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c70:	f7ff fd5a 	bl	8000728 <HAL_GetTick>
 8000c74:	1b40      	subs	r0, r0, r5
 8000c76:	2864      	cmp	r0, #100	@ 0x64
 8000c78:	d85d      	bhi.n	8000d36 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	4233      	tst	r3, r6
 8000c7e:	d0f7      	beq.n	8000c70 <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c80:	6823      	ldr	r3, [r4, #0]
 8000c82:	e7dd      	b.n	8000c40 <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000c84:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8000c86:	079b      	lsls	r3, r3, #30
 8000c88:	d400      	bmi.n	8000c8c <HAL_RCC_OscConfig+0x25c>
 8000c8a:	e76d      	b.n	8000b68 <HAL_RCC_OscConfig+0x138>
 8000c8c:	68a3      	ldr	r3, [r4, #8]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d000      	beq.n	8000c94 <HAL_RCC_OscConfig+0x264>
 8000c92:	e769      	b.n	8000b68 <HAL_RCC_OscConfig+0x138>
 8000c94:	e6fc      	b.n	8000a90 <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c96:	3b0d      	subs	r3, #13
 8000c98:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d100      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x270>
 8000c9e:	e0bc      	b.n	8000e1a <HAL_RCC_OscConfig+0x3ea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ca0:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ca2:	4d2a      	ldr	r5, [pc, #168]	@ (8000d4c <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d073      	beq.n	8000d90 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ca8:	682b      	ldr	r3, [r5, #0]
 8000caa:	4a2a      	ldr	r2, [pc, #168]	@ (8000d54 <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cac:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000cae:	4013      	ands	r3, r2
 8000cb0:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cb2:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8000cb8:	2380      	movs	r3, #128	@ 0x80
 8000cba:	682a      	ldr	r2, [r5, #0]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cc2:	f7ff fd31 	bl	8000728 <HAL_GetTick>
 8000cc6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cc8:	e004      	b.n	8000cd4 <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cca:	f7ff fd2d 	bl	8000728 <HAL_GetTick>
 8000cce:	1b80      	subs	r0, r0, r6
 8000cd0:	2802      	cmp	r0, #2
 8000cd2:	d830      	bhi.n	8000d36 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cd4:	682b      	ldr	r3, [r5, #0]
 8000cd6:	423b      	tst	r3, r7
 8000cd8:	d0f7      	beq.n	8000cca <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cda:	686a      	ldr	r2, [r5, #4]
 8000cdc:	6963      	ldr	r3, [r4, #20]
 8000cde:	491c      	ldr	r1, [pc, #112]	@ (8000d50 <HAL_RCC_OscConfig+0x320>)
 8000ce0:	021b      	lsls	r3, r3, #8
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ce8:	6823      	ldr	r3, [r4, #0]
 8000cea:	e6f3      	b.n	8000ad4 <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cec:	4917      	ldr	r1, [pc, #92]	@ (8000d4c <HAL_RCC_OscConfig+0x31c>)
 8000cee:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fd18 	bl	8000728 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8000cfa:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000cfc:	4698      	mov	r8, r3
 8000cfe:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d00:	4d19      	ldr	r5, [pc, #100]	@ (8000d68 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000d02:	e004      	b.n	8000d0e <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d04:	f7ff fd10 	bl	8000728 <HAL_GetTick>
 8000d08:	1b80      	subs	r0, r0, r6
 8000d0a:	42a8      	cmp	r0, r5
 8000d0c:	d813      	bhi.n	8000d36 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000d0e:	4643      	mov	r3, r8
 8000d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d12:	421f      	tst	r7, r3
 8000d14:	d0f6      	beq.n	8000d04 <HAL_RCC_OscConfig+0x2d4>
 8000d16:	e723      	b.n	8000b60 <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d18:	6833      	ldr	r3, [r6, #0]
 8000d1a:	433b      	orrs	r3, r7
 8000d1c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000d1e:	f7ff fd03 	bl	8000728 <HAL_GetTick>
 8000d22:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d24:	6833      	ldr	r3, [r6, #0]
 8000d26:	423b      	tst	r3, r7
 8000d28:	d000      	beq.n	8000d2c <HAL_RCC_OscConfig+0x2fc>
 8000d2a:	e6f5      	b.n	8000b18 <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d2c:	f7ff fcfc 	bl	8000728 <HAL_GetTick>
 8000d30:	1b40      	subs	r0, r0, r5
 8000d32:	2802      	cmp	r0, #2
 8000d34:	d9f6      	bls.n	8000d24 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 8000d36:	2003      	movs	r0, #3
 8000d38:	e6ab      	b.n	8000a92 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d3e:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8000d40:	4393      	bics	r3, r2
 8000d42:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000d44:	f7ff fcf0 	bl	8000728 <HAL_GetTick>
 8000d48:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d4a:	e01c      	b.n	8000d86 <HAL_RCC_OscConfig+0x356>
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	ffff80ff 	.word	0xffff80ff
 8000d54:	ffffc7ff 	.word	0xffffc7ff
 8000d58:	00f42400 	.word	0x00f42400
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000008 	.word	0x20000008
 8000d64:	40007000 	.word	0x40007000
 8000d68:	00001388 	.word	0x00001388
 8000d6c:	feffffff 	.word	0xfeffffff
 8000d70:	effefffc 	.word	0xeffefffc
 8000d74:	fffeffff 	.word	0xfffeffff
 8000d78:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fcd4 	bl	8000728 <HAL_GetTick>
 8000d80:	1b80      	subs	r0, r0, r6
 8000d82:	2802      	cmp	r0, #2
 8000d84:	d8d7      	bhi.n	8000d36 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d86:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8000d88:	421f      	tst	r7, r3
 8000d8a:	d1f7      	bne.n	8000d7c <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d8c:	6823      	ldr	r3, [r4, #0]
 8000d8e:	e6a3      	b.n	8000ad8 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 8000d90:	682b      	ldr	r3, [r5, #0]
 8000d92:	4a50      	ldr	r2, [pc, #320]	@ (8000ed4 <HAL_RCC_OscConfig+0x4a4>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d94:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8000d96:	4013      	ands	r3, r2
 8000d98:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d9a:	f7ff fcc5 	bl	8000728 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d9e:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8000da0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000da2:	e004      	b.n	8000dae <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da4:	f7ff fcc0 	bl	8000728 <HAL_GetTick>
 8000da8:	1b80      	subs	r0, r0, r6
 8000daa:	2802      	cmp	r0, #2
 8000dac:	d8c3      	bhi.n	8000d36 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000dae:	682b      	ldr	r3, [r5, #0]
 8000db0:	423b      	tst	r3, r7
 8000db2:	d1f7      	bne.n	8000da4 <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	e68d      	b.n	8000ad4 <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d100      	bne.n	8000dbe <HAL_RCC_OscConfig+0x38e>
 8000dbc:	e668      	b.n	8000a90 <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dbe:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8000dc0:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dc2:	6a21      	ldr	r1, [r4, #32]
 8000dc4:	4002      	ands	r2, r0
 8000dc6:	428a      	cmp	r2, r1
 8000dc8:	d000      	beq.n	8000dcc <HAL_RCC_OscConfig+0x39c>
 8000dca:	e661      	b.n	8000a90 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000dcc:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dce:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000dd0:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	d000      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x3a8>
 8000dd6:	e65b      	b.n	8000a90 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000dd8:	21fe      	movs	r1, #254	@ 0xfe
 8000dda:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000ddc:	01c9      	lsls	r1, r1, #7
 8000dde:	4001      	ands	r1, r0
 8000de0:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000de2:	4291      	cmp	r1, r2
 8000de4:	d000      	beq.n	8000de8 <HAL_RCC_OscConfig+0x3b8>
 8000de6:	e653      	b.n	8000a90 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000de8:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000dea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000dec:	0392      	lsls	r2, r2, #14
 8000dee:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000df0:	428a      	cmp	r2, r1
 8000df2:	d000      	beq.n	8000df6 <HAL_RCC_OscConfig+0x3c6>
 8000df4:	e64c      	b.n	8000a90 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000df6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8000df8:	0f40      	lsrs	r0, r0, #29
 8000dfa:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000dfc:	1ac0      	subs	r0, r0, r3
 8000dfe:	1e43      	subs	r3, r0, #1
 8000e00:	4198      	sbcs	r0, r3
 8000e02:	b2c0      	uxtb	r0, r0
 8000e04:	e645      	b.n	8000a92 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e06:	2180      	movs	r1, #128	@ 0x80
 8000e08:	4b33      	ldr	r3, [pc, #204]	@ (8000ed8 <HAL_RCC_OscConfig+0x4a8>)
 8000e0a:	02c9      	lsls	r1, r1, #11
 8000e0c:	6818      	ldr	r0, [r3, #0]
 8000e0e:	4301      	orrs	r1, r0
 8000e10:	6019      	str	r1, [r3, #0]
 8000e12:	6819      	ldr	r1, [r3, #0]
 8000e14:	430a      	orrs	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e18:	e723      	b.n	8000c62 <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e1a:	6813      	ldr	r3, [r2, #0]
 8000e1c:	055b      	lsls	r3, r3, #21
 8000e1e:	d455      	bmi.n	8000ecc <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e20:	6851      	ldr	r1, [r2, #4]
 8000e22:	6963      	ldr	r3, [r4, #20]
 8000e24:	482d      	ldr	r0, [pc, #180]	@ (8000edc <HAL_RCC_OscConfig+0x4ac>)
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	4001      	ands	r1, r0
 8000e2a:	430b      	orrs	r3, r1
 8000e2c:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e2e:	e64a      	b.n	8000ac6 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 8000e30:	4a29      	ldr	r2, [pc, #164]	@ (8000ed8 <HAL_RCC_OscConfig+0x4a8>)
 8000e32:	492b      	ldr	r1, [pc, #172]	@ (8000ee0 <HAL_RCC_OscConfig+0x4b0>)
 8000e34:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8000e36:	400b      	ands	r3, r1
 8000e38:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e3a:	e695      	b.n	8000b68 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 8000e3c:	682b      	ldr	r3, [r5, #0]
 8000e3e:	4a29      	ldr	r2, [pc, #164]	@ (8000ee4 <HAL_RCC_OscConfig+0x4b4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e40:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8000e42:	4013      	ands	r3, r2
 8000e44:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e46:	f7ff fc6f 	bl	8000728 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e4a:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8000e4c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e4e:	e005      	b.n	8000e5c <HAL_RCC_OscConfig+0x42c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e50:	f7ff fc6a 	bl	8000728 <HAL_GetTick>
 8000e54:	1b80      	subs	r0, r0, r6
 8000e56:	2802      	cmp	r0, #2
 8000e58:	d900      	bls.n	8000e5c <HAL_RCC_OscConfig+0x42c>
 8000e5a:	e76c      	b.n	8000d36 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e5c:	682b      	ldr	r3, [r5, #0]
 8000e5e:	423b      	tst	r3, r7
 8000e60:	d1f6      	bne.n	8000e50 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e62:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000e64:	6a23      	ldr	r3, [r4, #32]
 8000e66:	68ea      	ldr	r2, [r5, #12]
 8000e68:	430b      	orrs	r3, r1
 8000e6a:	491f      	ldr	r1, [pc, #124]	@ (8000ee8 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e6c:	4e1a      	ldr	r6, [pc, #104]	@ (8000ed8 <HAL_RCC_OscConfig+0x4a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e6e:	400a      	ands	r2, r1
 8000e70:	4313      	orrs	r3, r2
 8000e72:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000e74:	4313      	orrs	r3, r2
 8000e76:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000e7c:	0212      	lsls	r2, r2, #8
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8000e82:	2380      	movs	r3, #128	@ 0x80
 8000e84:	682a      	ldr	r2, [r5, #0]
 8000e86:	045b      	lsls	r3, r3, #17
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8000e8c:	2380      	movs	r3, #128	@ 0x80
 8000e8e:	68ea      	ldr	r2, [r5, #12]
 8000e90:	055b      	lsls	r3, r3, #21
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8000e96:	f7ff fc47 	bl	8000728 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e9a:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000e9c:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e9e:	04ad      	lsls	r5, r5, #18
 8000ea0:	e005      	b.n	8000eae <HAL_RCC_OscConfig+0x47e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ea2:	f7ff fc41 	bl	8000728 <HAL_GetTick>
 8000ea6:	1b00      	subs	r0, r0, r4
 8000ea8:	2802      	cmp	r0, #2
 8000eaa:	d900      	bls.n	8000eae <HAL_RCC_OscConfig+0x47e>
 8000eac:	e743      	b.n	8000d36 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000eae:	6833      	ldr	r3, [r6, #0]
 8000eb0:	422b      	tst	r3, r5
 8000eb2:	d0f6      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	e5ec      	b.n	8000a92 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb8:	2104      	movs	r1, #4
 8000eba:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <HAL_RCC_OscConfig+0x4a8>)
 8000ebc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000ec2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000ec4:	3903      	subs	r1, #3
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000eca:	e713      	b.n	8000cf4 <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ecc:	68e3      	ldr	r3, [r4, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1a6      	bne.n	8000e20 <HAL_RCC_OscConfig+0x3f0>
 8000ed2:	e5dd      	b.n	8000a90 <HAL_RCC_OscConfig+0x60>
 8000ed4:	fffffeff 	.word	0xfffffeff
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	ffff80ff 	.word	0xffff80ff
 8000ee0:	efffffff 	.word	0xefffffff
 8000ee4:	feffffff 	.word	0xfeffffff
 8000ee8:	1fc1808c 	.word	0x1fc1808c

08000eec <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eec:	2338      	movs	r3, #56	@ 0x38
 8000eee:	4a22      	ldr	r2, [pc, #136]	@ (8000f78 <HAL_RCC_GetSysClockFreq+0x8c>)
{
 8000ef0:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ef2:	6891      	ldr	r1, [r2, #8]
 8000ef4:	420b      	tst	r3, r1
 8000ef6:	d105      	bne.n	8000f04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8000ef8:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8000efa:	4820      	ldr	r0, [pc, #128]	@ (8000f7c <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8000efc:	049b      	lsls	r3, r3, #18
 8000efe:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8000f00:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8000f02:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f04:	6891      	ldr	r1, [r2, #8]
 8000f06:	4019      	ands	r1, r3
 8000f08:	2908      	cmp	r1, #8
 8000f0a:	d014      	beq.n	8000f36 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f0c:	6891      	ldr	r1, [r2, #8]
 8000f0e:	4019      	ands	r1, r3
 8000f10:	2910      	cmp	r1, #16
 8000f12:	d012      	beq.n	8000f3a <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000f14:	6891      	ldr	r1, [r2, #8]
 8000f16:	4019      	ands	r1, r3
 8000f18:	2920      	cmp	r1, #32
 8000f1a:	d024      	beq.n	8000f66 <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000f1c:	6890      	ldr	r0, [r2, #8]
 8000f1e:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8000f20:	3818      	subs	r0, #24
 8000f22:	1e43      	subs	r3, r0, #1
 8000f24:	4198      	sbcs	r0, r3
 8000f26:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <HAL_RCC_GetSysClockFreq+0x94>)
 8000f28:	4240      	negs	r0, r0
 8000f2a:	4018      	ands	r0, r3
 8000f2c:	23fa      	movs	r3, #250	@ 0xfa
 8000f2e:	01db      	lsls	r3, r3, #7
 8000f30:	469c      	mov	ip, r3
 8000f32:	4460      	add	r0, ip
 8000f34:	e7e5      	b.n	8000f02 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8000f36:	4813      	ldr	r0, [pc, #76]	@ (8000f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8000f38:	e7e3      	b.n	8000f02 <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000f3a:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f3c:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000f3e:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000f40:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f42:	0649      	lsls	r1, r1, #25
 8000f44:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000f46:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f48:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000f4a:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 8000f4c:	079b      	lsls	r3, r3, #30
 8000f4e:	d00d      	beq.n	8000f6c <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000f50:	480a      	ldr	r0, [pc, #40]	@ (8000f7c <HAL_RCC_GetSysClockFreq+0x90>)
 8000f52:	f7ff f8d5 	bl	8000100 <__udivsi3>
 8000f56:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8000f58:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000f5a:	68d9      	ldr	r1, [r3, #12]
 8000f5c:	0f49      	lsrs	r1, r1, #29
 8000f5e:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8000f60:	f7ff f8ce 	bl	8000100 <__udivsi3>
 8000f64:	e7cd      	b.n	8000f02 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8000f66:	2080      	movs	r0, #128	@ 0x80
 8000f68:	0200      	lsls	r0, r0, #8
 8000f6a:	e7ca      	b.n	8000f02 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f6c:	4805      	ldr	r0, [pc, #20]	@ (8000f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8000f6e:	f7ff f8c7 	bl	8000100 <__udivsi3>
 8000f72:	4360      	muls	r0, r4
        break;
 8000f74:	e7f0      	b.n	8000f58 <HAL_RCC_GetSysClockFreq+0x6c>
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	00f42400 	.word	0x00f42400
 8000f80:	ffff8300 	.word	0xffff8300
 8000f84:	007a1200 	.word	0x007a1200

08000f88 <HAL_RCC_ClockConfig>:
{
 8000f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f8a:	46ce      	mov	lr, r9
 8000f8c:	4647      	mov	r7, r8
 8000f8e:	0005      	movs	r5, r0
 8000f90:	000c      	movs	r4, r1
 8000f92:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8000f94:	2800      	cmp	r0, #0
 8000f96:	d026      	beq.n	8000fe6 <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f98:	2207      	movs	r2, #7
 8000f9a:	4e57      	ldr	r6, [pc, #348]	@ (80010f8 <HAL_RCC_ClockConfig+0x170>)
 8000f9c:	6833      	ldr	r3, [r6, #0]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	d35e      	bcc.n	8001062 <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fa4:	682b      	ldr	r3, [r5, #0]
 8000fa6:	079a      	lsls	r2, r3, #30
 8000fa8:	d50e      	bpl.n	8000fc8 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000faa:	075a      	lsls	r2, r3, #29
 8000fac:	d505      	bpl.n	8000fba <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000fae:	22e0      	movs	r2, #224	@ 0xe0
 8000fb0:	4952      	ldr	r1, [pc, #328]	@ (80010fc <HAL_RCC_ClockConfig+0x174>)
 8000fb2:	01d2      	lsls	r2, r2, #7
 8000fb4:	6888      	ldr	r0, [r1, #8]
 8000fb6:	4302      	orrs	r2, r0
 8000fb8:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fba:	4950      	ldr	r1, [pc, #320]	@ (80010fc <HAL_RCC_ClockConfig+0x174>)
 8000fbc:	4850      	ldr	r0, [pc, #320]	@ (8001100 <HAL_RCC_ClockConfig+0x178>)
 8000fbe:	688a      	ldr	r2, [r1, #8]
 8000fc0:	4002      	ands	r2, r0
 8000fc2:	68a8      	ldr	r0, [r5, #8]
 8000fc4:	4302      	orrs	r2, r0
 8000fc6:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fc8:	07db      	lsls	r3, r3, #31
 8000fca:	d52b      	bpl.n	8001024 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fcc:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fce:	4a4b      	ldr	r2, [pc, #300]	@ (80010fc <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d100      	bne.n	8000fd6 <HAL_RCC_ClockConfig+0x4e>
 8000fd4:	e07c      	b.n	80010d0 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d007      	beq.n	8000fea <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d000      	beq.n	8000fe0 <HAL_RCC_ClockConfig+0x58>
 8000fde:	e07d      	b.n	80010dc <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	0552      	lsls	r2, r2, #21
 8000fe4:	d404      	bmi.n	8000ff0 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	e037      	b.n	800105a <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fea:	6812      	ldr	r2, [r2, #0]
 8000fec:	0192      	lsls	r2, r2, #6
 8000fee:	d5fa      	bpl.n	8000fe6 <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000ff0:	2107      	movs	r1, #7
 8000ff2:	4e42      	ldr	r6, [pc, #264]	@ (80010fc <HAL_RCC_ClockConfig+0x174>)
 8000ff4:	68b2      	ldr	r2, [r6, #8]
 8000ff6:	438a      	bics	r2, r1
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000ffc:	f7ff fb94 	bl	8000728 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001000:	2338      	movs	r3, #56	@ 0x38
 8001002:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001004:	4b3f      	ldr	r3, [pc, #252]	@ (8001104 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8001006:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001008:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800100a:	e004      	b.n	8001016 <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800100c:	f7ff fb8c 	bl	8000728 <HAL_GetTick>
 8001010:	1bc0      	subs	r0, r0, r7
 8001012:	4548      	cmp	r0, r9
 8001014:	d83b      	bhi.n	800108e <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001016:	4643      	mov	r3, r8
 8001018:	68b2      	ldr	r2, [r6, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	686b      	ldr	r3, [r5, #4]
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	429a      	cmp	r2, r3
 8001022:	d1f3      	bne.n	800100c <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001024:	2207      	movs	r2, #7
 8001026:	4e34      	ldr	r6, [pc, #208]	@ (80010f8 <HAL_RCC_ClockConfig+0x170>)
 8001028:	6833      	ldr	r3, [r6, #0]
 800102a:	4013      	ands	r3, r2
 800102c:	42a3      	cmp	r3, r4
 800102e:	d838      	bhi.n	80010a2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	075b      	lsls	r3, r3, #29
 8001034:	d42d      	bmi.n	8001092 <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001036:	f7ff ff59 	bl	8000eec <HAL_RCC_GetSysClockFreq>
 800103a:	4b30      	ldr	r3, [pc, #192]	@ (80010fc <HAL_RCC_ClockConfig+0x174>)
 800103c:	4a32      	ldr	r2, [pc, #200]	@ (8001108 <HAL_RCC_ClockConfig+0x180>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	4932      	ldr	r1, [pc, #200]	@ (800110c <HAL_RCC_ClockConfig+0x184>)
 8001042:	051b      	lsls	r3, r3, #20
 8001044:	0f1b      	lsrs	r3, r3, #28
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	589b      	ldr	r3, [r3, r2]
 800104a:	221f      	movs	r2, #31
 800104c:	4013      	ands	r3, r2
 800104e:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 8001050:	4b2f      	ldr	r3, [pc, #188]	@ (8001110 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001052:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	f7ff fb21 	bl	800069c <HAL_InitTick>
}
 800105a:	bcc0      	pop	{r6, r7}
 800105c:	46b9      	mov	r9, r7
 800105e:	46b0      	mov	r8, r6
 8001060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001062:	6833      	ldr	r3, [r6, #0]
 8001064:	4393      	bics	r3, r2
 8001066:	430b      	orrs	r3, r1
 8001068:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800106a:	f7ff fb5d 	bl	8000728 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800106e:	2307      	movs	r3, #7
 8001070:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001072:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8001074:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001076:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001078:	4642      	mov	r2, r8
 800107a:	6833      	ldr	r3, [r6, #0]
 800107c:	4013      	ands	r3, r2
 800107e:	42a3      	cmp	r3, r4
 8001080:	d100      	bne.n	8001084 <HAL_RCC_ClockConfig+0xfc>
 8001082:	e78f      	b.n	8000fa4 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001084:	f7ff fb50 	bl	8000728 <HAL_GetTick>
 8001088:	1bc0      	subs	r0, r0, r7
 800108a:	4548      	cmp	r0, r9
 800108c:	d9f4      	bls.n	8001078 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 800108e:	2003      	movs	r0, #3
 8001090:	e7e3      	b.n	800105a <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001092:	4a1a      	ldr	r2, [pc, #104]	@ (80010fc <HAL_RCC_ClockConfig+0x174>)
 8001094:	491f      	ldr	r1, [pc, #124]	@ (8001114 <HAL_RCC_ClockConfig+0x18c>)
 8001096:	6893      	ldr	r3, [r2, #8]
 8001098:	400b      	ands	r3, r1
 800109a:	68e9      	ldr	r1, [r5, #12]
 800109c:	430b      	orrs	r3, r1
 800109e:	6093      	str	r3, [r2, #8]
 80010a0:	e7c9      	b.n	8001036 <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a2:	6833      	ldr	r3, [r6, #0]
 80010a4:	4393      	bics	r3, r2
 80010a6:	4323      	orrs	r3, r4
 80010a8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80010aa:	f7ff fb3d 	bl	8000728 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010ae:	2307      	movs	r3, #7
 80010b0:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80010b4:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b6:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010b8:	4642      	mov	r2, r8
 80010ba:	6833      	ldr	r3, [r6, #0]
 80010bc:	4013      	ands	r3, r2
 80010be:	42a3      	cmp	r3, r4
 80010c0:	d0b6      	beq.n	8001030 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c2:	f7ff fb31 	bl	8000728 <HAL_GetTick>
 80010c6:	1bc0      	subs	r0, r0, r7
 80010c8:	4548      	cmp	r0, r9
 80010ca:	d9f5      	bls.n	80010b8 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 80010cc:	2003      	movs	r0, #3
 80010ce:	e7c4      	b.n	800105a <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010d0:	6812      	ldr	r2, [r2, #0]
 80010d2:	0392      	lsls	r2, r2, #14
 80010d4:	d500      	bpl.n	80010d8 <HAL_RCC_ClockConfig+0x150>
 80010d6:	e78b      	b.n	8000ff0 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80010d8:	2001      	movs	r0, #1
 80010da:	e7be      	b.n	800105a <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d005      	beq.n	80010ec <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010e0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80010e2:	0792      	lsls	r2, r2, #30
 80010e4:	d500      	bpl.n	80010e8 <HAL_RCC_ClockConfig+0x160>
 80010e6:	e783      	b.n	8000ff0 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80010e8:	2001      	movs	r0, #1
 80010ea:	e7b6      	b.n	800105a <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010ec:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80010ee:	0792      	lsls	r2, r2, #30
 80010f0:	d500      	bpl.n	80010f4 <HAL_RCC_ClockConfig+0x16c>
 80010f2:	e77d      	b.n	8000ff0 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80010f4:	2001      	movs	r0, #1
 80010f6:	e7b0      	b.n	800105a <HAL_RCC_ClockConfig+0xd2>
 80010f8:	40022000 	.word	0x40022000
 80010fc:	40021000 	.word	0x40021000
 8001100:	fffff0ff 	.word	0xfffff0ff
 8001104:	00001388 	.word	0x00001388
 8001108:	0800169c 	.word	0x0800169c
 800110c:	20000000 	.word	0x20000000
 8001110:	20000008 	.word	0x20000008
 8001114:	ffff8fff 	.word	0xffff8fff

08001118 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111a:	46c6      	mov	lr, r8
 800111c:	b500      	push	{lr}
 800111e:	000c      	movs	r4, r1
 8001120:	0016      	movs	r6, r2
 8001122:	b082      	sub	sp, #8
 8001124:	0007      	movs	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001126:	f7ff faff 	bl	8000728 <HAL_GetTick>
 800112a:	1936      	adds	r6, r6, r4
 800112c:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 800112e:	f7ff fafb 	bl	8000728 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001132:	2580      	movs	r5, #128	@ 0x80
  tmp_tickstart = HAL_GetTick();
 8001134:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001136:	4b26      	ldr	r3, [pc, #152]	@ (80011d0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	015b      	lsls	r3, r3, #5
 800113c:	0d1b      	lsrs	r3, r3, #20
 800113e:	4373      	muls	r3, r6
 8001140:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	e001      	b.n	800114a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001146:	1c63      	adds	r3, r4, #1
 8001148:	d107      	bne.n	800115a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800114a:	6893      	ldr	r3, [r2, #8]
 800114c:	421d      	tst	r5, r3
 800114e:	d1fa      	bne.n	8001146 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
      }
      count--;
    }
  }

  return HAL_OK;
 8001150:	2000      	movs	r0, #0
}
 8001152:	b002      	add	sp, #8
 8001154:	bc80      	pop	{r7}
 8001156:	46b8      	mov	r8, r7
 8001158:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800115a:	f7ff fae5 	bl	8000728 <HAL_GetTick>
 800115e:	4643      	mov	r3, r8
 8001160:	1ac0      	subs	r0, r0, r3
 8001162:	42b0      	cmp	r0, r6
 8001164:	d208      	bcs.n	8001178 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
      if (count == 0U)
 8001166:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001168:	1e5a      	subs	r2, r3, #1
 800116a:	4193      	sbcs	r3, r2
 800116c:	425b      	negs	r3, r3
 800116e:	401e      	ands	r6, r3
      count--;
 8001170:	9b01      	ldr	r3, [sp, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	e7e4      	b.n	8001142 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001178:	21e0      	movs	r1, #224	@ 0xe0
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	438a      	bics	r2, r1
 8001180:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001182:	2282      	movs	r2, #130	@ 0x82
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	0052      	lsls	r2, r2, #1
 8001188:	4291      	cmp	r1, r2
 800118a:	d013      	beq.n	80011b4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800118c:	2180      	movs	r1, #128	@ 0x80
 800118e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001190:	0189      	lsls	r1, r1, #6
 8001192:	428a      	cmp	r2, r1
 8001194:	d106      	bne.n	80011a4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
          SPI_RESET_CRC(hspi);
 8001196:	6819      	ldr	r1, [r3, #0]
 8001198:	480e      	ldr	r0, [pc, #56]	@ (80011d4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 800119a:	4001      	ands	r1, r0
 800119c:	6019      	str	r1, [r3, #0]
 800119e:	6819      	ldr	r1, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80011a4:	235d      	movs	r3, #93	@ 0x5d
 80011a6:	2201      	movs	r2, #1
 80011a8:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 80011aa:	2200      	movs	r2, #0
 80011ac:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 80011ae:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80011b0:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 80011b2:	e7ce      	b.n	8001152 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80011b4:	2180      	movs	r1, #128	@ 0x80
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	0209      	lsls	r1, r1, #8
 80011ba:	428a      	cmp	r2, r1
 80011bc:	d003      	beq.n	80011c6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80011be:	2180      	movs	r1, #128	@ 0x80
 80011c0:	00c9      	lsls	r1, r1, #3
 80011c2:	428a      	cmp	r2, r1
 80011c4:	d1e2      	bne.n	800118c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
          __HAL_SPI_DISABLE(hspi);
 80011c6:	2140      	movs	r1, #64	@ 0x40
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	438a      	bics	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e7dd      	b.n	800118c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
 80011d0:	20000000 	.word	0x20000000
 80011d4:	ffffdfff 	.word	0xffffdfff

080011d8 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80011d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011da:	46de      	mov	lr, fp
 80011dc:	4657      	mov	r7, sl
 80011de:	464e      	mov	r6, r9
 80011e0:	4645      	mov	r5, r8
 80011e2:	b5e0      	push	{r5, r6, r7, lr}
 80011e4:	b083      	sub	sp, #12
 80011e6:	001e      	movs	r6, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80011e8:	466b      	mov	r3, sp
 80011ea:	1cdf      	adds	r7, r3, #3
 80011ec:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80011ee:	0015      	movs	r5, r2
 80011f0:	4681      	mov	r9, r0
 80011f2:	000c      	movs	r4, r1
  __IO uint8_t  tmpreg8 = 0;
 80011f4:	703b      	strb	r3, [r7, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80011f6:	f7ff fa97 	bl	8000728 <HAL_GetTick>
 80011fa:	1976      	adds	r6, r6, r5
 80011fc:	1a33      	subs	r3, r6, r0
 80011fe:	4698      	mov	r8, r3
  tmp_tickstart = HAL_GetTick();
 8001200:	f7ff fa92 	bl	8000728 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001204:	464b      	mov	r3, r9
 8001206:	681b      	ldr	r3, [r3, #0]
  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);

  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001208:	26c0      	movs	r6, #192	@ 0xc0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800120a:	469a      	mov	sl, r3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800120c:	4b34      	ldr	r3, [pc, #208]	@ (80012e0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
  tmp_tickstart = HAL_GetTick();
 800120e:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001210:	681b      	ldr	r3, [r3, #0]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001212:	00f6      	lsls	r6, r6, #3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001214:	009a      	lsls	r2, r3, #2
 8001216:	18d2      	adds	r2, r2, r3
 8001218:	00d3      	lsls	r3, r2, #3
 800121a:	1a9b      	subs	r3, r3, r2
 800121c:	4642      	mov	r2, r8
 800121e:	0d1b      	lsrs	r3, r3, #20
 8001220:	4353      	muls	r3, r2
  while ((hspi->Instance->SR & Fifo) != State)
 8001222:	4652      	mov	r2, sl
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001224:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8001226:	e001      	b.n	800122c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8001228:	1c6b      	adds	r3, r5, #1
 800122a:	d10b      	bne.n	8001244 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 800122c:	6893      	ldr	r3, [r2, #8]
 800122e:	4223      	tst	r3, r4
 8001230:	d01d      	beq.n	800126e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x96>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001232:	42b4      	cmp	r4, r6
 8001234:	d1f8      	bne.n	8001228 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x50>
      tmpreg8 = *ptmpreg8;
 8001236:	4653      	mov	r3, sl
 8001238:	7b1b      	ldrb	r3, [r3, #12]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	703b      	strb	r3, [r7, #0]
      UNUSED(tmpreg8);
 800123e:	783b      	ldrb	r3, [r7, #0]
    if (Timeout != HAL_MAX_DELAY)
 8001240:	1c6b      	adds	r3, r5, #1
 8001242:	d0f3      	beq.n	800122c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001244:	f7ff fa70 	bl	8000728 <HAL_GetTick>
 8001248:	465b      	mov	r3, fp
 800124a:	1ac0      	subs	r0, r0, r3
 800124c:	4540      	cmp	r0, r8
 800124e:	d216      	bcs.n	800127e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001250:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8001252:	1e5a      	subs	r2, r3, #1
 8001254:	4193      	sbcs	r3, r2
 8001256:	4642      	mov	r2, r8
 8001258:	425b      	negs	r3, r3
 800125a:	401a      	ands	r2, r3
      }
      count--;
 800125c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800125e:	4690      	mov	r8, r2
      count--;
 8001260:	3b01      	subs	r3, #1
 8001262:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001264:	464b      	mov	r3, r9
 8001266:	681a      	ldr	r2, [r3, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8001268:	6893      	ldr	r3, [r2, #8]
 800126a:	4223      	tst	r3, r4
 800126c:	d1e1      	bne.n	8001232 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
    }
  }

  return HAL_OK;
 800126e:	2000      	movs	r0, #0
}
 8001270:	b003      	add	sp, #12
 8001272:	bcf0      	pop	{r4, r5, r6, r7}
 8001274:	46bb      	mov	fp, r7
 8001276:	46b2      	mov	sl, r6
 8001278:	46a9      	mov	r9, r5
 800127a:	46a0      	mov	r8, r4
 800127c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800127e:	464b      	mov	r3, r9
 8001280:	21e0      	movs	r1, #224	@ 0xe0
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001288:	4649      	mov	r1, r9
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800128a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800128c:	2282      	movs	r2, #130	@ 0x82
 800128e:	6849      	ldr	r1, [r1, #4]
 8001290:	0052      	lsls	r2, r2, #1
 8001292:	4291      	cmp	r1, r2
 8001294:	d015      	beq.n	80012c2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001296:	464a      	mov	r2, r9
 8001298:	2180      	movs	r1, #128	@ 0x80
 800129a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800129c:	0189      	lsls	r1, r1, #6
 800129e:	428a      	cmp	r2, r1
 80012a0:	d106      	bne.n	80012b0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
          SPI_RESET_CRC(hspi);
 80012a2:	6819      	ldr	r1, [r3, #0]
 80012a4:	480f      	ldr	r0, [pc, #60]	@ (80012e4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x10c>)
 80012a6:	4001      	ands	r1, r0
 80012a8:	6019      	str	r1, [r3, #0]
 80012aa:	6819      	ldr	r1, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80012b0:	235d      	movs	r3, #93	@ 0x5d
 80012b2:	2201      	movs	r2, #1
 80012b4:	4649      	mov	r1, r9
 80012b6:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 80012b8:	2200      	movs	r2, #0
 80012ba:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 80012bc:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80012be:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 80012c0:	e7d6      	b.n	8001270 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012c2:	464a      	mov	r2, r9
 80012c4:	2180      	movs	r1, #128	@ 0x80
 80012c6:	6892      	ldr	r2, [r2, #8]
 80012c8:	0209      	lsls	r1, r1, #8
 80012ca:	428a      	cmp	r2, r1
 80012cc:	d003      	beq.n	80012d6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80012ce:	2180      	movs	r1, #128	@ 0x80
 80012d0:	00c9      	lsls	r1, r1, #3
 80012d2:	428a      	cmp	r2, r1
 80012d4:	d1df      	bne.n	8001296 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          __HAL_SPI_DISABLE(hspi);
 80012d6:	2140      	movs	r1, #64	@ 0x40
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	438a      	bics	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	e7da      	b.n	8001296 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
 80012e0:	20000000 	.word	0x20000000
 80012e4:	ffffdfff 	.word	0xffffdfff

080012e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80012e8:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80012ea:	0013      	movs	r3, r2
{
 80012ec:	000d      	movs	r5, r1
 80012ee:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80012f0:	000a      	movs	r2, r1
 80012f2:	21c0      	movs	r1, #192	@ 0xc0
 80012f4:	0149      	lsls	r1, r1, #5
{
 80012f6:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80012f8:	f7ff ff6e 	bl	80011d8 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80012fc:	2800      	cmp	r0, #0
 80012fe:	d10f      	bne.n	8001320 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001300:	0032      	movs	r2, r6
 8001302:	0029      	movs	r1, r5
 8001304:	0020      	movs	r0, r4
 8001306:	f7ff ff07 	bl	8001118 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800130a:	2800      	cmp	r0, #0
 800130c:	d108      	bne.n	8001320 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800130e:	21c0      	movs	r1, #192	@ 0xc0
 8001310:	0033      	movs	r3, r6
 8001312:	002a      	movs	r2, r5
 8001314:	0020      	movs	r0, r4
 8001316:	00c9      	lsls	r1, r1, #3
 8001318:	f7ff ff5e 	bl	80011d8 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800131c:	2800      	cmp	r0, #0
 800131e:	d004      	beq.n	800132a <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001320:	2220      	movs	r2, #32
    return HAL_TIMEOUT;
 8001322:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001324:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001326:	4313      	orrs	r3, r2
 8001328:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800132a:	bd70      	pop	{r4, r5, r6, pc}

0800132c <HAL_SPI_Init>:
{
 800132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132e:	46de      	mov	lr, fp
 8001330:	4657      	mov	r7, sl
 8001332:	464e      	mov	r6, r9
 8001334:	4645      	mov	r5, r8
 8001336:	0004      	movs	r4, r0
 8001338:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 800133a:	2800      	cmp	r0, #0
 800133c:	d100      	bne.n	8001340 <HAL_SPI_Init+0x14>
 800133e:	e093      	b.n	8001468 <HAL_SPI_Init+0x13c>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001340:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8001342:	2d00      	cmp	r5, #0
 8001344:	d069      	beq.n	800141a <HAL_SPI_Init+0xee>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800134a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001350:	335d      	adds	r3, #93	@ 0x5d
 8001352:	5ce3      	ldrb	r3, [r4, r3]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d06c      	beq.n	8001434 <HAL_SPI_Init+0x108>
  hspi->State = HAL_SPI_STATE_BUSY;
 800135a:	235d      	movs	r3, #93	@ 0x5d
 800135c:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 800135e:	2140      	movs	r1, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8001360:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8001362:	6822      	ldr	r2, [r4, #0]
 8001364:	6813      	ldr	r3, [r2, #0]
 8001366:	438b      	bics	r3, r1
 8001368:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800136a:	23e0      	movs	r3, #224	@ 0xe0
 800136c:	68e1      	ldr	r1, [r4, #12]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4299      	cmp	r1, r3
 8001372:	d866      	bhi.n	8001442 <HAL_SPI_Init+0x116>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001374:	d000      	beq.n	8001378 <HAL_SPI_Init+0x4c>
 8001376:	e070      	b.n	800145a <HAL_SPI_Init+0x12e>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001378:	2380      	movs	r3, #128	@ 0x80
 800137a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800137c:	019b      	lsls	r3, r3, #6
 800137e:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001380:	2380      	movs	r3, #128	@ 0x80
 8001382:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001384:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001386:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001388:	2682      	movs	r6, #130	@ 0x82
 800138a:	2784      	movs	r7, #132	@ 0x84
 800138c:	6863      	ldr	r3, [r4, #4]
 800138e:	0076      	lsls	r6, r6, #1
 8001390:	4033      	ands	r3, r6
 8001392:	68a6      	ldr	r6, [r4, #8]
 8001394:	023f      	lsls	r7, r7, #8
 8001396:	403e      	ands	r6, r7
 8001398:	2702      	movs	r7, #2
 800139a:	4333      	orrs	r3, r6
 800139c:	6926      	ldr	r6, [r4, #16]
 800139e:	69a0      	ldr	r0, [r4, #24]
 80013a0:	403e      	ands	r6, r7
 80013a2:	4333      	orrs	r3, r6
 80013a4:	2601      	movs	r6, #1
 80013a6:	6967      	ldr	r7, [r4, #20]
 80013a8:	46b2      	mov	sl, r6
 80013aa:	4037      	ands	r7, r6
 80013ac:	433b      	orrs	r3, r7
 80013ae:	2780      	movs	r7, #128	@ 0x80
 80013b0:	00bf      	lsls	r7, r7, #2
 80013b2:	4007      	ands	r7, r0
 80013b4:	433b      	orrs	r3, r7
 80013b6:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80013b8:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80013ba:	46b8      	mov	r8, r7
 80013bc:	2738      	movs	r7, #56	@ 0x38
 80013be:	46b9      	mov	r9, r7
 80013c0:	4647      	mov	r7, r8
 80013c2:	464e      	mov	r6, r9
 80013c4:	4037      	ands	r7, r6
 80013c6:	6a26      	ldr	r6, [r4, #32]
 80013c8:	433b      	orrs	r3, r7
 80013ca:	46b0      	mov	r8, r6
 80013cc:	2680      	movs	r6, #128	@ 0x80
 80013ce:	4647      	mov	r7, r8
 80013d0:	4037      	ands	r7, r6
 80013d2:	4666      	mov	r6, ip
 80013d4:	433b      	orrs	r3, r7
 80013d6:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80013d8:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80013da:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80013dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80013de:	4033      	ands	r3, r6
 80013e0:	26f0      	movs	r6, #240	@ 0xf0
 80013e2:	0136      	lsls	r6, r6, #4
 80013e4:	4031      	ands	r1, r6
 80013e6:	4319      	orrs	r1, r3
 80013e8:	2304      	movs	r3, #4
 80013ea:	4003      	ands	r3, r0
 80013ec:	4319      	orrs	r1, r3
 80013ee:	2310      	movs	r3, #16
 80013f0:	402b      	ands	r3, r5
 80013f2:	4319      	orrs	r1, r3
 80013f4:	465b      	mov	r3, fp
 80013f6:	4319      	orrs	r1, r3
 80013f8:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80013fa:	69d3      	ldr	r3, [r2, #28]
 80013fc:	491d      	ldr	r1, [pc, #116]	@ (8001474 <HAL_SPI_Init+0x148>)
  return HAL_OK;
 80013fe:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001400:	400b      	ands	r3, r1
 8001402:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001404:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001406:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001408:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800140a:	335d      	adds	r3, #93	@ 0x5d
 800140c:	54e2      	strb	r2, [r4, r3]
}
 800140e:	bcf0      	pop	{r4, r5, r6, r7}
 8001410:	46bb      	mov	fp, r7
 8001412:	46b2      	mov	sl, r6
 8001414:	46a9      	mov	r9, r5
 8001416:	46a0      	mov	r8, r4
 8001418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800141a:	2382      	movs	r3, #130	@ 0x82
 800141c:	6842      	ldr	r2, [r0, #4]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	429a      	cmp	r2, r3
 8001422:	d093      	beq.n	800134c <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001424:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001426:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001428:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800142a:	335d      	adds	r3, #93	@ 0x5d
 800142c:	5ce3      	ldrb	r3, [r4, r3]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d192      	bne.n	800135a <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 8001434:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8001436:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8001438:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 800143a:	f7ff f8c9 	bl	80005d0 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800143e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8001440:	e78b      	b.n	800135a <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001442:	23f0      	movs	r3, #240	@ 0xf0
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	4299      	cmp	r1, r3
 8001448:	d110      	bne.n	800146c <HAL_SPI_Init+0x140>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800144a:	2380      	movs	r3, #128	@ 0x80
 800144c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800144e:	019b      	lsls	r3, r3, #6
 8001450:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001452:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001454:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001456:	469b      	mov	fp, r3
 8001458:	e796      	b.n	8001388 <HAL_SPI_Init+0x5c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800145a:	2380      	movs	r3, #128	@ 0x80
 800145c:	015b      	lsls	r3, r3, #5
 800145e:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	469c      	mov	ip, r3
 8001464:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001466:	e78f      	b.n	8001388 <HAL_SPI_Init+0x5c>
    return HAL_ERROR;
 8001468:	2001      	movs	r0, #1
 800146a:	e7d0      	b.n	800140e <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800146c:	2300      	movs	r3, #0
 800146e:	469b      	mov	fp, r3
 8001470:	e7f6      	b.n	8001460 <HAL_SPI_Init+0x134>
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	fffff7ff 	.word	0xfffff7ff

08001478 <HAL_SPI_Transmit>:
{
 8001478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147a:	46ce      	mov	lr, r9
 800147c:	4647      	mov	r7, r8
 800147e:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8001480:	235c      	movs	r3, #92	@ 0x5c
{
 8001482:	b580      	push	{r7, lr}
 8001484:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8001486:	5cc2      	ldrb	r2, [r0, r3]
{
 8001488:	0004      	movs	r4, r0
 800148a:	4688      	mov	r8, r1
 800148c:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 800148e:	2a01      	cmp	r2, #1
 8001490:	d064      	beq.n	800155c <HAL_SPI_Transmit+0xe4>
 8001492:	2201      	movs	r2, #1
 8001494:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001496:	f7ff f947 	bl	8000728 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800149a:	225d      	movs	r2, #93	@ 0x5d
 800149c:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 800149e:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80014a0:	b2df      	uxtb	r7, r3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d009      	beq.n	80014ba <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 80014a6:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 80014a8:	235c      	movs	r3, #92	@ 0x5c
 80014aa:	2200      	movs	r2, #0
 80014ac:	54e2      	strb	r2, [r4, r3]
}
 80014ae:	0038      	movs	r0, r7
 80014b0:	b003      	add	sp, #12
 80014b2:	bcc0      	pop	{r6, r7}
 80014b4:	46b9      	mov	r9, r7
 80014b6:	46b0      	mov	r8, r6
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 80014ba:	4643      	mov	r3, r8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f3      	beq.n	80014a8 <HAL_SPI_Transmit+0x30>
 80014c0:	464b      	mov	r3, r9
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_SPI_Transmit+0x30>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80014c6:	2303      	movs	r3, #3
 80014c8:	54a3      	strb	r3, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80014ca:	4642      	mov	r2, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014cc:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80014ce:	63a2      	str	r2, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80014d0:	464a      	mov	r2, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014d2:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->TxXferSize  = Size;
 80014d4:	87a2      	strh	r2, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80014d6:	87e2      	strh	r2, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = 0U;
 80014d8:	2244      	movs	r2, #68	@ 0x44
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80014da:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80014dc:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 80014de:	3202      	adds	r2, #2
 80014e0:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 80014e2:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80014e4:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80014e6:	2380      	movs	r3, #128	@ 0x80
 80014e8:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80014ea:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d05b      	beq.n	80015aa <HAL_SPI_Transmit+0x132>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80014f2:	2340      	movs	r3, #64	@ 0x40
 80014f4:	6802      	ldr	r2, [r0, #0]
 80014f6:	4213      	tst	r3, r2
 80014f8:	d102      	bne.n	8001500 <HAL_SPI_Transmit+0x88>
    __HAL_SPI_ENABLE(hspi);
 80014fa:	6802      	ldr	r2, [r0, #0]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001500:	23e0      	movs	r3, #224	@ 0xe0
 8001502:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001504:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	429a      	cmp	r2, r3
 800150a:	d929      	bls.n	8001560 <HAL_SPI_Transmit+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800150c:	2900      	cmp	r1, #0
 800150e:	d061      	beq.n	80015d4 <HAL_SPI_Transmit+0x15c>
 8001510:	464b      	mov	r3, r9
 8001512:	2b01      	cmp	r3, #1
 8001514:	d05e      	beq.n	80015d4 <HAL_SPI_Transmit+0x15c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001516:	2202      	movs	r2, #2
    while (hspi->TxXferCount > 0U)
 8001518:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800151a:	4690      	mov	r8, r2
    while (hspi->TxXferCount > 0U)
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10d      	bne.n	800153c <HAL_SPI_Transmit+0xc4>
 8001520:	e063      	b.n	80015ea <HAL_SPI_Transmit+0x172>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001522:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001524:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001526:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001528:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 800152a:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800152c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800152e:	3901      	subs	r1, #1
 8001530:	b289      	uxth	r1, r1
 8001532:	87e1      	strh	r1, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8001534:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001536:	2b00      	cmp	r3, #0
 8001538:	d057      	beq.n	80015ea <HAL_SPI_Transmit+0x172>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800153a:	6820      	ldr	r0, [r4, #0]
 800153c:	4642      	mov	r2, r8
 800153e:	6883      	ldr	r3, [r0, #8]
 8001540:	421a      	tst	r2, r3
 8001542:	d1ee      	bne.n	8001522 <HAL_SPI_Transmit+0xaa>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001544:	f7ff f8f0 	bl	8000728 <HAL_GetTick>
 8001548:	1b80      	subs	r0, r0, r6
 800154a:	42a8      	cmp	r0, r5
 800154c:	d3f2      	bcc.n	8001534 <HAL_SPI_Transmit+0xbc>
 800154e:	1c6b      	adds	r3, r5, #1
 8001550:	d0f0      	beq.n	8001534 <HAL_SPI_Transmit+0xbc>
          hspi->State = HAL_SPI_STATE_READY;
 8001552:	235d      	movs	r3, #93	@ 0x5d
 8001554:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 8001556:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 8001558:	54e2      	strb	r2, [r4, r3]
          goto error;
 800155a:	e7a5      	b.n	80014a8 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 800155c:	2702      	movs	r7, #2
 800155e:	e7a6      	b.n	80014ae <HAL_SPI_Transmit+0x36>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001560:	2900      	cmp	r1, #0
 8001562:	d02c      	beq.n	80015be <HAL_SPI_Transmit+0x146>
 8001564:	464b      	mov	r3, r9
 8001566:	2b01      	cmp	r3, #1
 8001568:	d029      	beq.n	80015be <HAL_SPI_Transmit+0x146>
    while (hspi->TxXferCount > 0U)
 800156a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800156c:	2b00      	cmp	r3, #0
 800156e:	d03c      	beq.n	80015ea <HAL_SPI_Transmit+0x172>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001570:	2302      	movs	r3, #2
 8001572:	4698      	mov	r8, r3
 8001574:	e00c      	b.n	8001590 <HAL_SPI_Transmit+0x118>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001576:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800157c:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800157e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001580:	3901      	subs	r1, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001582:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 8001584:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001586:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001588:	87e1      	strh	r1, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800158a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800158c:	2b00      	cmp	r3, #0
 800158e:	d02c      	beq.n	80015ea <HAL_SPI_Transmit+0x172>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001590:	4641      	mov	r1, r8
 8001592:	6823      	ldr	r3, [r4, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	4211      	tst	r1, r2
 8001598:	d1ed      	bne.n	8001576 <HAL_SPI_Transmit+0xfe>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800159a:	f7ff f8c5 	bl	8000728 <HAL_GetTick>
 800159e:	1b80      	subs	r0, r0, r6
 80015a0:	42a8      	cmp	r0, r5
 80015a2:	d3f2      	bcc.n	800158a <HAL_SPI_Transmit+0x112>
 80015a4:	1c6b      	adds	r3, r5, #1
 80015a6:	d0f0      	beq.n	800158a <HAL_SPI_Transmit+0x112>
 80015a8:	e7d3      	b.n	8001552 <HAL_SPI_Transmit+0xda>
    __HAL_SPI_DISABLE(hspi);
 80015aa:	2240      	movs	r2, #64	@ 0x40
 80015ac:	6803      	ldr	r3, [r0, #0]
 80015ae:	4393      	bics	r3, r2
 80015b0:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 80015b2:	2380      	movs	r3, #128	@ 0x80
 80015b4:	6802      	ldr	r2, [r0, #0]
 80015b6:	01db      	lsls	r3, r3, #7
 80015b8:	4313      	orrs	r3, r2
 80015ba:	6003      	str	r3, [r0, #0]
 80015bc:	e799      	b.n	80014f2 <HAL_SPI_Transmit+0x7a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80015be:	4643      	mov	r3, r8
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	7303      	strb	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80015c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80015c6:	3301      	adds	r3, #1
 80015c8:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80015ca:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80015cc:	3b01      	subs	r3, #1
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80015d2:	e7ca      	b.n	800156a <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015d4:	4643      	mov	r3, r8
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80015da:	4643      	mov	r3, r8
 80015dc:	3302      	adds	r3, #2
 80015de:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80015e0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80015e2:	3b01      	subs	r3, #1
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80015e8:	e795      	b.n	8001516 <HAL_SPI_Transmit+0x9e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80015ea:	0032      	movs	r2, r6
 80015ec:	0029      	movs	r1, r5
 80015ee:	0020      	movs	r0, r4
 80015f0:	f7ff fe7a 	bl	80012e8 <SPI_EndRxTxTransaction>
 80015f4:	2800      	cmp	r0, #0
 80015f6:	d001      	beq.n	80015fc <HAL_SPI_Transmit+0x184>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80015f8:	2320      	movs	r3, #32
 80015fa:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80015fc:	68a3      	ldr	r3, [r4, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d106      	bne.n	8001610 <HAL_SPI_Transmit+0x198>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	9201      	str	r2, [sp, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001610:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001612:	2b00      	cmp	r3, #0
 8001614:	d000      	beq.n	8001618 <HAL_SPI_Transmit+0x1a0>
 8001616:	e747      	b.n	80014a8 <HAL_SPI_Transmit+0x30>
    hspi->State = HAL_SPI_STATE_READY;
 8001618:	2201      	movs	r2, #1
 800161a:	335d      	adds	r3, #93	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 800161c:	2700      	movs	r7, #0
    hspi->State = HAL_SPI_STATE_READY;
 800161e:	54e2      	strb	r2, [r4, r3]
 8001620:	e742      	b.n	80014a8 <HAL_SPI_Transmit+0x30>
 8001622:	46c0      	nop			@ (mov r8, r8)

08001624 <memset>:
 8001624:	0003      	movs	r3, r0
 8001626:	1882      	adds	r2, r0, r2
 8001628:	4293      	cmp	r3, r2
 800162a:	d100      	bne.n	800162e <memset+0xa>
 800162c:	4770      	bx	lr
 800162e:	7019      	strb	r1, [r3, #0]
 8001630:	3301      	adds	r3, #1
 8001632:	e7f9      	b.n	8001628 <memset+0x4>

08001634 <__libc_init_array>:
 8001634:	b570      	push	{r4, r5, r6, lr}
 8001636:	2600      	movs	r6, #0
 8001638:	4c0c      	ldr	r4, [pc, #48]	@ (800166c <__libc_init_array+0x38>)
 800163a:	4d0d      	ldr	r5, [pc, #52]	@ (8001670 <__libc_init_array+0x3c>)
 800163c:	1b64      	subs	r4, r4, r5
 800163e:	10a4      	asrs	r4, r4, #2
 8001640:	42a6      	cmp	r6, r4
 8001642:	d109      	bne.n	8001658 <__libc_init_array+0x24>
 8001644:	2600      	movs	r6, #0
 8001646:	f000 f819 	bl	800167c <_init>
 800164a:	4c0a      	ldr	r4, [pc, #40]	@ (8001674 <__libc_init_array+0x40>)
 800164c:	4d0a      	ldr	r5, [pc, #40]	@ (8001678 <__libc_init_array+0x44>)
 800164e:	1b64      	subs	r4, r4, r5
 8001650:	10a4      	asrs	r4, r4, #2
 8001652:	42a6      	cmp	r6, r4
 8001654:	d105      	bne.n	8001662 <__libc_init_array+0x2e>
 8001656:	bd70      	pop	{r4, r5, r6, pc}
 8001658:	00b3      	lsls	r3, r6, #2
 800165a:	58eb      	ldr	r3, [r5, r3]
 800165c:	4798      	blx	r3
 800165e:	3601      	adds	r6, #1
 8001660:	e7ee      	b.n	8001640 <__libc_init_array+0xc>
 8001662:	00b3      	lsls	r3, r6, #2
 8001664:	58eb      	ldr	r3, [r5, r3]
 8001666:	4798      	blx	r3
 8001668:	3601      	adds	r6, #1
 800166a:	e7f2      	b.n	8001652 <__libc_init_array+0x1e>
 800166c:	080016dc 	.word	0x080016dc
 8001670:	080016dc 	.word	0x080016dc
 8001674:	080016e0 	.word	0x080016e0
 8001678:	080016dc 	.word	0x080016dc

0800167c <_init>:
 800167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001682:	bc08      	pop	{r3}
 8001684:	469e      	mov	lr, r3
 8001686:	4770      	bx	lr

08001688 <_fini>:
 8001688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800168a:	46c0      	nop			@ (mov r8, r8)
 800168c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800168e:	bc08      	pop	{r3}
 8001690:	469e      	mov	lr, r3
 8001692:	4770      	bx	lr
