
project1_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002414  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080024cc  080024cc  000034cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800250c  0800250c  00004014  2**0
                  CONTENTS
  4 .ARM          00000000  0800250c  0800250c  00004014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800250c  0800250c  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800250c  0800250c  0000350c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002510  08002510  00003510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002514  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000014  08002528  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08002528  000043a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007479  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dbc  00000000  00000000  0000b4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  0000d278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fd  00000000  00000000  0000d920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014d65  00000000  00000000  0000df1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b947  00000000  00000000  00022c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078ce9  00000000  00000000  0002e5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a72b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000113c  00000000  00000000  000a72f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000025aa  00000000  00000000  000a8434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  000aa9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000014 	.word	0x20000014
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080024b4 	.word	0x080024b4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000018 	.word	0x20000018
 80000fc:	080024b4 	.word	0x080024b4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <__aeabi_fmul>:
 8000218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021a:	464f      	mov	r7, r9
 800021c:	4646      	mov	r6, r8
 800021e:	46d6      	mov	lr, sl
 8000220:	0243      	lsls	r3, r0, #9
 8000222:	0a5b      	lsrs	r3, r3, #9
 8000224:	0045      	lsls	r5, r0, #1
 8000226:	b5c0      	push	{r6, r7, lr}
 8000228:	4699      	mov	r9, r3
 800022a:	1c0f      	adds	r7, r1, #0
 800022c:	0e2d      	lsrs	r5, r5, #24
 800022e:	0fc6      	lsrs	r6, r0, #31
 8000230:	2d00      	cmp	r5, #0
 8000232:	d100      	bne.n	8000236 <__aeabi_fmul+0x1e>
 8000234:	e088      	b.n	8000348 <__aeabi_fmul+0x130>
 8000236:	2dff      	cmp	r5, #255	@ 0xff
 8000238:	d100      	bne.n	800023c <__aeabi_fmul+0x24>
 800023a:	e08d      	b.n	8000358 <__aeabi_fmul+0x140>
 800023c:	2280      	movs	r2, #128	@ 0x80
 800023e:	00db      	lsls	r3, r3, #3
 8000240:	04d2      	lsls	r2, r2, #19
 8000242:	431a      	orrs	r2, r3
 8000244:	2300      	movs	r3, #0
 8000246:	4691      	mov	r9, r2
 8000248:	4698      	mov	r8, r3
 800024a:	469a      	mov	sl, r3
 800024c:	3d7f      	subs	r5, #127	@ 0x7f
 800024e:	027c      	lsls	r4, r7, #9
 8000250:	007b      	lsls	r3, r7, #1
 8000252:	0a64      	lsrs	r4, r4, #9
 8000254:	0e1b      	lsrs	r3, r3, #24
 8000256:	0fff      	lsrs	r7, r7, #31
 8000258:	2b00      	cmp	r3, #0
 800025a:	d068      	beq.n	800032e <__aeabi_fmul+0x116>
 800025c:	2bff      	cmp	r3, #255	@ 0xff
 800025e:	d021      	beq.n	80002a4 <__aeabi_fmul+0x8c>
 8000260:	2280      	movs	r2, #128	@ 0x80
 8000262:	00e4      	lsls	r4, r4, #3
 8000264:	04d2      	lsls	r2, r2, #19
 8000266:	4314      	orrs	r4, r2
 8000268:	4642      	mov	r2, r8
 800026a:	3b7f      	subs	r3, #127	@ 0x7f
 800026c:	195b      	adds	r3, r3, r5
 800026e:	2100      	movs	r1, #0
 8000270:	1c5d      	adds	r5, r3, #1
 8000272:	2a0a      	cmp	r2, #10
 8000274:	dc2e      	bgt.n	80002d4 <__aeabi_fmul+0xbc>
 8000276:	407e      	eors	r6, r7
 8000278:	4642      	mov	r2, r8
 800027a:	2a02      	cmp	r2, #2
 800027c:	dc23      	bgt.n	80002c6 <__aeabi_fmul+0xae>
 800027e:	3a01      	subs	r2, #1
 8000280:	2a01      	cmp	r2, #1
 8000282:	d900      	bls.n	8000286 <__aeabi_fmul+0x6e>
 8000284:	e0bd      	b.n	8000402 <__aeabi_fmul+0x1ea>
 8000286:	2902      	cmp	r1, #2
 8000288:	d06e      	beq.n	8000368 <__aeabi_fmul+0x150>
 800028a:	2901      	cmp	r1, #1
 800028c:	d12c      	bne.n	80002e8 <__aeabi_fmul+0xd0>
 800028e:	2000      	movs	r0, #0
 8000290:	2200      	movs	r2, #0
 8000292:	05c0      	lsls	r0, r0, #23
 8000294:	07f6      	lsls	r6, r6, #31
 8000296:	4310      	orrs	r0, r2
 8000298:	4330      	orrs	r0, r6
 800029a:	bce0      	pop	{r5, r6, r7}
 800029c:	46ba      	mov	sl, r7
 800029e:	46b1      	mov	r9, r6
 80002a0:	46a8      	mov	r8, r5
 80002a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002a4:	002b      	movs	r3, r5
 80002a6:	33ff      	adds	r3, #255	@ 0xff
 80002a8:	2c00      	cmp	r4, #0
 80002aa:	d065      	beq.n	8000378 <__aeabi_fmul+0x160>
 80002ac:	2203      	movs	r2, #3
 80002ae:	4641      	mov	r1, r8
 80002b0:	4311      	orrs	r1, r2
 80002b2:	0032      	movs	r2, r6
 80002b4:	3501      	adds	r5, #1
 80002b6:	4688      	mov	r8, r1
 80002b8:	407a      	eors	r2, r7
 80002ba:	35ff      	adds	r5, #255	@ 0xff
 80002bc:	290a      	cmp	r1, #10
 80002be:	dd00      	ble.n	80002c2 <__aeabi_fmul+0xaa>
 80002c0:	e0d8      	b.n	8000474 <__aeabi_fmul+0x25c>
 80002c2:	0016      	movs	r6, r2
 80002c4:	2103      	movs	r1, #3
 80002c6:	4640      	mov	r0, r8
 80002c8:	2201      	movs	r2, #1
 80002ca:	4082      	lsls	r2, r0
 80002cc:	20a6      	movs	r0, #166	@ 0xa6
 80002ce:	00c0      	lsls	r0, r0, #3
 80002d0:	4202      	tst	r2, r0
 80002d2:	d020      	beq.n	8000316 <__aeabi_fmul+0xfe>
 80002d4:	4653      	mov	r3, sl
 80002d6:	2b02      	cmp	r3, #2
 80002d8:	d046      	beq.n	8000368 <__aeabi_fmul+0x150>
 80002da:	2b03      	cmp	r3, #3
 80002dc:	d100      	bne.n	80002e0 <__aeabi_fmul+0xc8>
 80002de:	e0bb      	b.n	8000458 <__aeabi_fmul+0x240>
 80002e0:	4651      	mov	r1, sl
 80002e2:	464c      	mov	r4, r9
 80002e4:	2901      	cmp	r1, #1
 80002e6:	d0d2      	beq.n	800028e <__aeabi_fmul+0x76>
 80002e8:	002b      	movs	r3, r5
 80002ea:	337f      	adds	r3, #127	@ 0x7f
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	dd70      	ble.n	80003d2 <__aeabi_fmul+0x1ba>
 80002f0:	0762      	lsls	r2, r4, #29
 80002f2:	d004      	beq.n	80002fe <__aeabi_fmul+0xe6>
 80002f4:	220f      	movs	r2, #15
 80002f6:	4022      	ands	r2, r4
 80002f8:	2a04      	cmp	r2, #4
 80002fa:	d000      	beq.n	80002fe <__aeabi_fmul+0xe6>
 80002fc:	3404      	adds	r4, #4
 80002fe:	0122      	lsls	r2, r4, #4
 8000300:	d503      	bpl.n	800030a <__aeabi_fmul+0xf2>
 8000302:	4b63      	ldr	r3, [pc, #396]	@ (8000490 <__aeabi_fmul+0x278>)
 8000304:	401c      	ands	r4, r3
 8000306:	002b      	movs	r3, r5
 8000308:	3380      	adds	r3, #128	@ 0x80
 800030a:	2bfe      	cmp	r3, #254	@ 0xfe
 800030c:	dc2c      	bgt.n	8000368 <__aeabi_fmul+0x150>
 800030e:	01a2      	lsls	r2, r4, #6
 8000310:	0a52      	lsrs	r2, r2, #9
 8000312:	b2d8      	uxtb	r0, r3
 8000314:	e7bd      	b.n	8000292 <__aeabi_fmul+0x7a>
 8000316:	2090      	movs	r0, #144	@ 0x90
 8000318:	0080      	lsls	r0, r0, #2
 800031a:	4202      	tst	r2, r0
 800031c:	d127      	bne.n	800036e <__aeabi_fmul+0x156>
 800031e:	38b9      	subs	r0, #185	@ 0xb9
 8000320:	38ff      	subs	r0, #255	@ 0xff
 8000322:	4210      	tst	r0, r2
 8000324:	d06d      	beq.n	8000402 <__aeabi_fmul+0x1ea>
 8000326:	003e      	movs	r6, r7
 8000328:	46a1      	mov	r9, r4
 800032a:	468a      	mov	sl, r1
 800032c:	e7d2      	b.n	80002d4 <__aeabi_fmul+0xbc>
 800032e:	2c00      	cmp	r4, #0
 8000330:	d141      	bne.n	80003b6 <__aeabi_fmul+0x19e>
 8000332:	2301      	movs	r3, #1
 8000334:	4642      	mov	r2, r8
 8000336:	431a      	orrs	r2, r3
 8000338:	4690      	mov	r8, r2
 800033a:	002b      	movs	r3, r5
 800033c:	4642      	mov	r2, r8
 800033e:	2101      	movs	r1, #1
 8000340:	1c5d      	adds	r5, r3, #1
 8000342:	2a0a      	cmp	r2, #10
 8000344:	dd97      	ble.n	8000276 <__aeabi_fmul+0x5e>
 8000346:	e7c5      	b.n	80002d4 <__aeabi_fmul+0xbc>
 8000348:	2b00      	cmp	r3, #0
 800034a:	d126      	bne.n	800039a <__aeabi_fmul+0x182>
 800034c:	2304      	movs	r3, #4
 800034e:	4698      	mov	r8, r3
 8000350:	3b03      	subs	r3, #3
 8000352:	2500      	movs	r5, #0
 8000354:	469a      	mov	sl, r3
 8000356:	e77a      	b.n	800024e <__aeabi_fmul+0x36>
 8000358:	2b00      	cmp	r3, #0
 800035a:	d118      	bne.n	800038e <__aeabi_fmul+0x176>
 800035c:	2308      	movs	r3, #8
 800035e:	4698      	mov	r8, r3
 8000360:	3b06      	subs	r3, #6
 8000362:	25ff      	movs	r5, #255	@ 0xff
 8000364:	469a      	mov	sl, r3
 8000366:	e772      	b.n	800024e <__aeabi_fmul+0x36>
 8000368:	20ff      	movs	r0, #255	@ 0xff
 800036a:	2200      	movs	r2, #0
 800036c:	e791      	b.n	8000292 <__aeabi_fmul+0x7a>
 800036e:	2280      	movs	r2, #128	@ 0x80
 8000370:	2600      	movs	r6, #0
 8000372:	20ff      	movs	r0, #255	@ 0xff
 8000374:	03d2      	lsls	r2, r2, #15
 8000376:	e78c      	b.n	8000292 <__aeabi_fmul+0x7a>
 8000378:	4641      	mov	r1, r8
 800037a:	2202      	movs	r2, #2
 800037c:	3501      	adds	r5, #1
 800037e:	4311      	orrs	r1, r2
 8000380:	4688      	mov	r8, r1
 8000382:	35ff      	adds	r5, #255	@ 0xff
 8000384:	290a      	cmp	r1, #10
 8000386:	dca5      	bgt.n	80002d4 <__aeabi_fmul+0xbc>
 8000388:	2102      	movs	r1, #2
 800038a:	407e      	eors	r6, r7
 800038c:	e774      	b.n	8000278 <__aeabi_fmul+0x60>
 800038e:	230c      	movs	r3, #12
 8000390:	4698      	mov	r8, r3
 8000392:	3b09      	subs	r3, #9
 8000394:	25ff      	movs	r5, #255	@ 0xff
 8000396:	469a      	mov	sl, r3
 8000398:	e759      	b.n	800024e <__aeabi_fmul+0x36>
 800039a:	0018      	movs	r0, r3
 800039c:	f000 fcbc 	bl	8000d18 <__clzsi2>
 80003a0:	464a      	mov	r2, r9
 80003a2:	1f43      	subs	r3, r0, #5
 80003a4:	2576      	movs	r5, #118	@ 0x76
 80003a6:	409a      	lsls	r2, r3
 80003a8:	2300      	movs	r3, #0
 80003aa:	426d      	negs	r5, r5
 80003ac:	4691      	mov	r9, r2
 80003ae:	4698      	mov	r8, r3
 80003b0:	469a      	mov	sl, r3
 80003b2:	1a2d      	subs	r5, r5, r0
 80003b4:	e74b      	b.n	800024e <__aeabi_fmul+0x36>
 80003b6:	0020      	movs	r0, r4
 80003b8:	f000 fcae 	bl	8000d18 <__clzsi2>
 80003bc:	4642      	mov	r2, r8
 80003be:	1f43      	subs	r3, r0, #5
 80003c0:	409c      	lsls	r4, r3
 80003c2:	1a2b      	subs	r3, r5, r0
 80003c4:	3b76      	subs	r3, #118	@ 0x76
 80003c6:	2100      	movs	r1, #0
 80003c8:	1c5d      	adds	r5, r3, #1
 80003ca:	2a0a      	cmp	r2, #10
 80003cc:	dc00      	bgt.n	80003d0 <__aeabi_fmul+0x1b8>
 80003ce:	e752      	b.n	8000276 <__aeabi_fmul+0x5e>
 80003d0:	e780      	b.n	80002d4 <__aeabi_fmul+0xbc>
 80003d2:	2201      	movs	r2, #1
 80003d4:	1ad3      	subs	r3, r2, r3
 80003d6:	2b1b      	cmp	r3, #27
 80003d8:	dd00      	ble.n	80003dc <__aeabi_fmul+0x1c4>
 80003da:	e758      	b.n	800028e <__aeabi_fmul+0x76>
 80003dc:	359e      	adds	r5, #158	@ 0x9e
 80003de:	0022      	movs	r2, r4
 80003e0:	40ac      	lsls	r4, r5
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	1e63      	subs	r3, r4, #1
 80003e6:	419c      	sbcs	r4, r3
 80003e8:	4322      	orrs	r2, r4
 80003ea:	0753      	lsls	r3, r2, #29
 80003ec:	d004      	beq.n	80003f8 <__aeabi_fmul+0x1e0>
 80003ee:	230f      	movs	r3, #15
 80003f0:	4013      	ands	r3, r2
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	d000      	beq.n	80003f8 <__aeabi_fmul+0x1e0>
 80003f6:	3204      	adds	r2, #4
 80003f8:	0153      	lsls	r3, r2, #5
 80003fa:	d537      	bpl.n	800046c <__aeabi_fmul+0x254>
 80003fc:	2001      	movs	r0, #1
 80003fe:	2200      	movs	r2, #0
 8000400:	e747      	b.n	8000292 <__aeabi_fmul+0x7a>
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	464a      	mov	r2, r9
 8000406:	0424      	lsls	r4, r4, #16
 8000408:	0c24      	lsrs	r4, r4, #16
 800040a:	0027      	movs	r7, r4
 800040c:	0c10      	lsrs	r0, r2, #16
 800040e:	0412      	lsls	r2, r2, #16
 8000410:	0c12      	lsrs	r2, r2, #16
 8000412:	4344      	muls	r4, r0
 8000414:	4357      	muls	r7, r2
 8000416:	4348      	muls	r0, r1
 8000418:	4351      	muls	r1, r2
 800041a:	0c3a      	lsrs	r2, r7, #16
 800041c:	1909      	adds	r1, r1, r4
 800041e:	1852      	adds	r2, r2, r1
 8000420:	4294      	cmp	r4, r2
 8000422:	d903      	bls.n	800042c <__aeabi_fmul+0x214>
 8000424:	2180      	movs	r1, #128	@ 0x80
 8000426:	0249      	lsls	r1, r1, #9
 8000428:	468c      	mov	ip, r1
 800042a:	4460      	add	r0, ip
 800042c:	043f      	lsls	r7, r7, #16
 800042e:	0411      	lsls	r1, r2, #16
 8000430:	0c3f      	lsrs	r7, r7, #16
 8000432:	19c9      	adds	r1, r1, r7
 8000434:	018c      	lsls	r4, r1, #6
 8000436:	1e67      	subs	r7, r4, #1
 8000438:	41bc      	sbcs	r4, r7
 800043a:	0c12      	lsrs	r2, r2, #16
 800043c:	0e89      	lsrs	r1, r1, #26
 800043e:	1812      	adds	r2, r2, r0
 8000440:	430c      	orrs	r4, r1
 8000442:	0192      	lsls	r2, r2, #6
 8000444:	4314      	orrs	r4, r2
 8000446:	0112      	lsls	r2, r2, #4
 8000448:	d50e      	bpl.n	8000468 <__aeabi_fmul+0x250>
 800044a:	2301      	movs	r3, #1
 800044c:	0862      	lsrs	r2, r4, #1
 800044e:	401c      	ands	r4, r3
 8000450:	4314      	orrs	r4, r2
 8000452:	e749      	b.n	80002e8 <__aeabi_fmul+0xd0>
 8000454:	003e      	movs	r6, r7
 8000456:	46a1      	mov	r9, r4
 8000458:	2280      	movs	r2, #128	@ 0x80
 800045a:	464b      	mov	r3, r9
 800045c:	03d2      	lsls	r2, r2, #15
 800045e:	431a      	orrs	r2, r3
 8000460:	0252      	lsls	r2, r2, #9
 8000462:	20ff      	movs	r0, #255	@ 0xff
 8000464:	0a52      	lsrs	r2, r2, #9
 8000466:	e714      	b.n	8000292 <__aeabi_fmul+0x7a>
 8000468:	001d      	movs	r5, r3
 800046a:	e73d      	b.n	80002e8 <__aeabi_fmul+0xd0>
 800046c:	0192      	lsls	r2, r2, #6
 800046e:	2000      	movs	r0, #0
 8000470:	0a52      	lsrs	r2, r2, #9
 8000472:	e70e      	b.n	8000292 <__aeabi_fmul+0x7a>
 8000474:	290f      	cmp	r1, #15
 8000476:	d1ed      	bne.n	8000454 <__aeabi_fmul+0x23c>
 8000478:	2280      	movs	r2, #128	@ 0x80
 800047a:	464b      	mov	r3, r9
 800047c:	03d2      	lsls	r2, r2, #15
 800047e:	4213      	tst	r3, r2
 8000480:	d0ea      	beq.n	8000458 <__aeabi_fmul+0x240>
 8000482:	4214      	tst	r4, r2
 8000484:	d1e8      	bne.n	8000458 <__aeabi_fmul+0x240>
 8000486:	003e      	movs	r6, r7
 8000488:	20ff      	movs	r0, #255	@ 0xff
 800048a:	4322      	orrs	r2, r4
 800048c:	e701      	b.n	8000292 <__aeabi_fmul+0x7a>
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	f7ffffff 	.word	0xf7ffffff

08000494 <__aeabi_f2iz>:
 8000494:	0241      	lsls	r1, r0, #9
 8000496:	0042      	lsls	r2, r0, #1
 8000498:	0fc3      	lsrs	r3, r0, #31
 800049a:	0a49      	lsrs	r1, r1, #9
 800049c:	2000      	movs	r0, #0
 800049e:	0e12      	lsrs	r2, r2, #24
 80004a0:	2a7e      	cmp	r2, #126	@ 0x7e
 80004a2:	dd03      	ble.n	80004ac <__aeabi_f2iz+0x18>
 80004a4:	2a9d      	cmp	r2, #157	@ 0x9d
 80004a6:	dd02      	ble.n	80004ae <__aeabi_f2iz+0x1a>
 80004a8:	4a09      	ldr	r2, [pc, #36]	@ (80004d0 <__aeabi_f2iz+0x3c>)
 80004aa:	1898      	adds	r0, r3, r2
 80004ac:	4770      	bx	lr
 80004ae:	2080      	movs	r0, #128	@ 0x80
 80004b0:	0400      	lsls	r0, r0, #16
 80004b2:	4301      	orrs	r1, r0
 80004b4:	2a95      	cmp	r2, #149	@ 0x95
 80004b6:	dc07      	bgt.n	80004c8 <__aeabi_f2iz+0x34>
 80004b8:	2096      	movs	r0, #150	@ 0x96
 80004ba:	1a82      	subs	r2, r0, r2
 80004bc:	40d1      	lsrs	r1, r2
 80004be:	4248      	negs	r0, r1
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d1f3      	bne.n	80004ac <__aeabi_f2iz+0x18>
 80004c4:	0008      	movs	r0, r1
 80004c6:	e7f1      	b.n	80004ac <__aeabi_f2iz+0x18>
 80004c8:	3a96      	subs	r2, #150	@ 0x96
 80004ca:	4091      	lsls	r1, r2
 80004cc:	e7f7      	b.n	80004be <__aeabi_f2iz+0x2a>
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	7fffffff 	.word	0x7fffffff

080004d4 <__aeabi_i2f>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	2800      	cmp	r0, #0
 80004d8:	d013      	beq.n	8000502 <__aeabi_i2f+0x2e>
 80004da:	17c3      	asrs	r3, r0, #31
 80004dc:	18c5      	adds	r5, r0, r3
 80004de:	405d      	eors	r5, r3
 80004e0:	0fc4      	lsrs	r4, r0, #31
 80004e2:	0028      	movs	r0, r5
 80004e4:	f000 fc18 	bl	8000d18 <__clzsi2>
 80004e8:	239e      	movs	r3, #158	@ 0x9e
 80004ea:	0001      	movs	r1, r0
 80004ec:	1a1b      	subs	r3, r3, r0
 80004ee:	2b96      	cmp	r3, #150	@ 0x96
 80004f0:	dc0f      	bgt.n	8000512 <__aeabi_i2f+0x3e>
 80004f2:	2808      	cmp	r0, #8
 80004f4:	d034      	beq.n	8000560 <__aeabi_i2f+0x8c>
 80004f6:	3908      	subs	r1, #8
 80004f8:	408d      	lsls	r5, r1
 80004fa:	026d      	lsls	r5, r5, #9
 80004fc:	0a6d      	lsrs	r5, r5, #9
 80004fe:	b2d8      	uxtb	r0, r3
 8000500:	e002      	b.n	8000508 <__aeabi_i2f+0x34>
 8000502:	2400      	movs	r4, #0
 8000504:	2000      	movs	r0, #0
 8000506:	2500      	movs	r5, #0
 8000508:	05c0      	lsls	r0, r0, #23
 800050a:	4328      	orrs	r0, r5
 800050c:	07e4      	lsls	r4, r4, #31
 800050e:	4320      	orrs	r0, r4
 8000510:	bd70      	pop	{r4, r5, r6, pc}
 8000512:	2b99      	cmp	r3, #153	@ 0x99
 8000514:	dc16      	bgt.n	8000544 <__aeabi_i2f+0x70>
 8000516:	1f42      	subs	r2, r0, #5
 8000518:	2805      	cmp	r0, #5
 800051a:	d000      	beq.n	800051e <__aeabi_i2f+0x4a>
 800051c:	4095      	lsls	r5, r2
 800051e:	002a      	movs	r2, r5
 8000520:	4811      	ldr	r0, [pc, #68]	@ (8000568 <__aeabi_i2f+0x94>)
 8000522:	4002      	ands	r2, r0
 8000524:	076e      	lsls	r6, r5, #29
 8000526:	d009      	beq.n	800053c <__aeabi_i2f+0x68>
 8000528:	260f      	movs	r6, #15
 800052a:	4035      	ands	r5, r6
 800052c:	2d04      	cmp	r5, #4
 800052e:	d005      	beq.n	800053c <__aeabi_i2f+0x68>
 8000530:	3204      	adds	r2, #4
 8000532:	0155      	lsls	r5, r2, #5
 8000534:	d502      	bpl.n	800053c <__aeabi_i2f+0x68>
 8000536:	239f      	movs	r3, #159	@ 0x9f
 8000538:	4002      	ands	r2, r0
 800053a:	1a5b      	subs	r3, r3, r1
 800053c:	0192      	lsls	r2, r2, #6
 800053e:	0a55      	lsrs	r5, r2, #9
 8000540:	b2d8      	uxtb	r0, r3
 8000542:	e7e1      	b.n	8000508 <__aeabi_i2f+0x34>
 8000544:	2205      	movs	r2, #5
 8000546:	1a12      	subs	r2, r2, r0
 8000548:	0028      	movs	r0, r5
 800054a:	40d0      	lsrs	r0, r2
 800054c:	0002      	movs	r2, r0
 800054e:	0008      	movs	r0, r1
 8000550:	301b      	adds	r0, #27
 8000552:	4085      	lsls	r5, r0
 8000554:	0028      	movs	r0, r5
 8000556:	1e45      	subs	r5, r0, #1
 8000558:	41a8      	sbcs	r0, r5
 800055a:	4302      	orrs	r2, r0
 800055c:	0015      	movs	r5, r2
 800055e:	e7de      	b.n	800051e <__aeabi_i2f+0x4a>
 8000560:	026d      	lsls	r5, r5, #9
 8000562:	2096      	movs	r0, #150	@ 0x96
 8000564:	0a6d      	lsrs	r5, r5, #9
 8000566:	e7cf      	b.n	8000508 <__aeabi_i2f+0x34>
 8000568:	fbffffff 	.word	0xfbffffff

0800056c <__aeabi_ui2f>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	1e04      	subs	r4, r0, #0
 8000570:	d00e      	beq.n	8000590 <__aeabi_ui2f+0x24>
 8000572:	f000 fbd1 	bl	8000d18 <__clzsi2>
 8000576:	239e      	movs	r3, #158	@ 0x9e
 8000578:	0001      	movs	r1, r0
 800057a:	1a1b      	subs	r3, r3, r0
 800057c:	2b96      	cmp	r3, #150	@ 0x96
 800057e:	dc0c      	bgt.n	800059a <__aeabi_ui2f+0x2e>
 8000580:	2808      	cmp	r0, #8
 8000582:	d02f      	beq.n	80005e4 <__aeabi_ui2f+0x78>
 8000584:	3908      	subs	r1, #8
 8000586:	408c      	lsls	r4, r1
 8000588:	0264      	lsls	r4, r4, #9
 800058a:	0a64      	lsrs	r4, r4, #9
 800058c:	b2d8      	uxtb	r0, r3
 800058e:	e001      	b.n	8000594 <__aeabi_ui2f+0x28>
 8000590:	2000      	movs	r0, #0
 8000592:	2400      	movs	r4, #0
 8000594:	05c0      	lsls	r0, r0, #23
 8000596:	4320      	orrs	r0, r4
 8000598:	bd70      	pop	{r4, r5, r6, pc}
 800059a:	2b99      	cmp	r3, #153	@ 0x99
 800059c:	dc16      	bgt.n	80005cc <__aeabi_ui2f+0x60>
 800059e:	1f42      	subs	r2, r0, #5
 80005a0:	2805      	cmp	r0, #5
 80005a2:	d000      	beq.n	80005a6 <__aeabi_ui2f+0x3a>
 80005a4:	4094      	lsls	r4, r2
 80005a6:	0022      	movs	r2, r4
 80005a8:	4810      	ldr	r0, [pc, #64]	@ (80005ec <__aeabi_ui2f+0x80>)
 80005aa:	4002      	ands	r2, r0
 80005ac:	0765      	lsls	r5, r4, #29
 80005ae:	d009      	beq.n	80005c4 <__aeabi_ui2f+0x58>
 80005b0:	250f      	movs	r5, #15
 80005b2:	402c      	ands	r4, r5
 80005b4:	2c04      	cmp	r4, #4
 80005b6:	d005      	beq.n	80005c4 <__aeabi_ui2f+0x58>
 80005b8:	3204      	adds	r2, #4
 80005ba:	0154      	lsls	r4, r2, #5
 80005bc:	d502      	bpl.n	80005c4 <__aeabi_ui2f+0x58>
 80005be:	239f      	movs	r3, #159	@ 0x9f
 80005c0:	4002      	ands	r2, r0
 80005c2:	1a5b      	subs	r3, r3, r1
 80005c4:	0192      	lsls	r2, r2, #6
 80005c6:	0a54      	lsrs	r4, r2, #9
 80005c8:	b2d8      	uxtb	r0, r3
 80005ca:	e7e3      	b.n	8000594 <__aeabi_ui2f+0x28>
 80005cc:	0002      	movs	r2, r0
 80005ce:	0020      	movs	r0, r4
 80005d0:	321b      	adds	r2, #27
 80005d2:	4090      	lsls	r0, r2
 80005d4:	0002      	movs	r2, r0
 80005d6:	1e50      	subs	r0, r2, #1
 80005d8:	4182      	sbcs	r2, r0
 80005da:	2005      	movs	r0, #5
 80005dc:	1a40      	subs	r0, r0, r1
 80005de:	40c4      	lsrs	r4, r0
 80005e0:	4314      	orrs	r4, r2
 80005e2:	e7e0      	b.n	80005a6 <__aeabi_ui2f+0x3a>
 80005e4:	0264      	lsls	r4, r4, #9
 80005e6:	2096      	movs	r0, #150	@ 0x96
 80005e8:	0a64      	lsrs	r4, r4, #9
 80005ea:	e7d3      	b.n	8000594 <__aeabi_ui2f+0x28>
 80005ec:	fbffffff 	.word	0xfbffffff

080005f0 <__aeabi_dmul>:
 80005f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f2:	4657      	mov	r7, sl
 80005f4:	46de      	mov	lr, fp
 80005f6:	464e      	mov	r6, r9
 80005f8:	4645      	mov	r5, r8
 80005fa:	b5e0      	push	{r5, r6, r7, lr}
 80005fc:	001f      	movs	r7, r3
 80005fe:	030b      	lsls	r3, r1, #12
 8000600:	0b1b      	lsrs	r3, r3, #12
 8000602:	0016      	movs	r6, r2
 8000604:	469a      	mov	sl, r3
 8000606:	0fca      	lsrs	r2, r1, #31
 8000608:	004b      	lsls	r3, r1, #1
 800060a:	0004      	movs	r4, r0
 800060c:	4693      	mov	fp, r2
 800060e:	b087      	sub	sp, #28
 8000610:	0d5b      	lsrs	r3, r3, #21
 8000612:	d100      	bne.n	8000616 <__aeabi_dmul+0x26>
 8000614:	e0d5      	b.n	80007c2 <__aeabi_dmul+0x1d2>
 8000616:	4abb      	ldr	r2, [pc, #748]	@ (8000904 <__aeabi_dmul+0x314>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d100      	bne.n	800061e <__aeabi_dmul+0x2e>
 800061c:	e0f8      	b.n	8000810 <__aeabi_dmul+0x220>
 800061e:	4651      	mov	r1, sl
 8000620:	0f42      	lsrs	r2, r0, #29
 8000622:	00c9      	lsls	r1, r1, #3
 8000624:	430a      	orrs	r2, r1
 8000626:	2180      	movs	r1, #128	@ 0x80
 8000628:	0409      	lsls	r1, r1, #16
 800062a:	4311      	orrs	r1, r2
 800062c:	00c2      	lsls	r2, r0, #3
 800062e:	4691      	mov	r9, r2
 8000630:	4ab5      	ldr	r2, [pc, #724]	@ (8000908 <__aeabi_dmul+0x318>)
 8000632:	468a      	mov	sl, r1
 8000634:	189d      	adds	r5, r3, r2
 8000636:	2300      	movs	r3, #0
 8000638:	4698      	mov	r8, r3
 800063a:	9302      	str	r3, [sp, #8]
 800063c:	033c      	lsls	r4, r7, #12
 800063e:	007b      	lsls	r3, r7, #1
 8000640:	0ffa      	lsrs	r2, r7, #31
 8000642:	0030      	movs	r0, r6
 8000644:	0b24      	lsrs	r4, r4, #12
 8000646:	0d5b      	lsrs	r3, r3, #21
 8000648:	9200      	str	r2, [sp, #0]
 800064a:	d100      	bne.n	800064e <__aeabi_dmul+0x5e>
 800064c:	e096      	b.n	800077c <__aeabi_dmul+0x18c>
 800064e:	4aad      	ldr	r2, [pc, #692]	@ (8000904 <__aeabi_dmul+0x314>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d031      	beq.n	80006b8 <__aeabi_dmul+0xc8>
 8000654:	0f72      	lsrs	r2, r6, #29
 8000656:	00e4      	lsls	r4, r4, #3
 8000658:	4322      	orrs	r2, r4
 800065a:	2480      	movs	r4, #128	@ 0x80
 800065c:	0424      	lsls	r4, r4, #16
 800065e:	4314      	orrs	r4, r2
 8000660:	4aa9      	ldr	r2, [pc, #676]	@ (8000908 <__aeabi_dmul+0x318>)
 8000662:	00f0      	lsls	r0, r6, #3
 8000664:	4694      	mov	ip, r2
 8000666:	4463      	add	r3, ip
 8000668:	195b      	adds	r3, r3, r5
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	9201      	str	r2, [sp, #4]
 800066e:	4642      	mov	r2, r8
 8000670:	2600      	movs	r6, #0
 8000672:	2a0a      	cmp	r2, #10
 8000674:	dc42      	bgt.n	80006fc <__aeabi_dmul+0x10c>
 8000676:	465a      	mov	r2, fp
 8000678:	9900      	ldr	r1, [sp, #0]
 800067a:	404a      	eors	r2, r1
 800067c:	4693      	mov	fp, r2
 800067e:	4642      	mov	r2, r8
 8000680:	2a02      	cmp	r2, #2
 8000682:	dc32      	bgt.n	80006ea <__aeabi_dmul+0xfa>
 8000684:	3a01      	subs	r2, #1
 8000686:	2a01      	cmp	r2, #1
 8000688:	d900      	bls.n	800068c <__aeabi_dmul+0x9c>
 800068a:	e149      	b.n	8000920 <__aeabi_dmul+0x330>
 800068c:	2e02      	cmp	r6, #2
 800068e:	d100      	bne.n	8000692 <__aeabi_dmul+0xa2>
 8000690:	e0ca      	b.n	8000828 <__aeabi_dmul+0x238>
 8000692:	2e01      	cmp	r6, #1
 8000694:	d13d      	bne.n	8000712 <__aeabi_dmul+0x122>
 8000696:	2300      	movs	r3, #0
 8000698:	2400      	movs	r4, #0
 800069a:	2200      	movs	r2, #0
 800069c:	0010      	movs	r0, r2
 800069e:	465a      	mov	r2, fp
 80006a0:	051b      	lsls	r3, r3, #20
 80006a2:	4323      	orrs	r3, r4
 80006a4:	07d2      	lsls	r2, r2, #31
 80006a6:	4313      	orrs	r3, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	b007      	add	sp, #28
 80006ac:	bcf0      	pop	{r4, r5, r6, r7}
 80006ae:	46bb      	mov	fp, r7
 80006b0:	46b2      	mov	sl, r6
 80006b2:	46a9      	mov	r9, r5
 80006b4:	46a0      	mov	r8, r4
 80006b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b8:	4b92      	ldr	r3, [pc, #584]	@ (8000904 <__aeabi_dmul+0x314>)
 80006ba:	4326      	orrs	r6, r4
 80006bc:	18eb      	adds	r3, r5, r3
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dmul+0xd4>
 80006c2:	e0bb      	b.n	800083c <__aeabi_dmul+0x24c>
 80006c4:	2203      	movs	r2, #3
 80006c6:	4641      	mov	r1, r8
 80006c8:	4311      	orrs	r1, r2
 80006ca:	465a      	mov	r2, fp
 80006cc:	4688      	mov	r8, r1
 80006ce:	9900      	ldr	r1, [sp, #0]
 80006d0:	404a      	eors	r2, r1
 80006d2:	2180      	movs	r1, #128	@ 0x80
 80006d4:	0109      	lsls	r1, r1, #4
 80006d6:	468c      	mov	ip, r1
 80006d8:	0029      	movs	r1, r5
 80006da:	4461      	add	r1, ip
 80006dc:	9101      	str	r1, [sp, #4]
 80006de:	4641      	mov	r1, r8
 80006e0:	290a      	cmp	r1, #10
 80006e2:	dd00      	ble.n	80006e6 <__aeabi_dmul+0xf6>
 80006e4:	e233      	b.n	8000b4e <__aeabi_dmul+0x55e>
 80006e6:	4693      	mov	fp, r2
 80006e8:	2603      	movs	r6, #3
 80006ea:	4642      	mov	r2, r8
 80006ec:	2701      	movs	r7, #1
 80006ee:	4097      	lsls	r7, r2
 80006f0:	21a6      	movs	r1, #166	@ 0xa6
 80006f2:	003a      	movs	r2, r7
 80006f4:	00c9      	lsls	r1, r1, #3
 80006f6:	400a      	ands	r2, r1
 80006f8:	420f      	tst	r7, r1
 80006fa:	d031      	beq.n	8000760 <__aeabi_dmul+0x170>
 80006fc:	9e02      	ldr	r6, [sp, #8]
 80006fe:	2e02      	cmp	r6, #2
 8000700:	d100      	bne.n	8000704 <__aeabi_dmul+0x114>
 8000702:	e235      	b.n	8000b70 <__aeabi_dmul+0x580>
 8000704:	2e03      	cmp	r6, #3
 8000706:	d100      	bne.n	800070a <__aeabi_dmul+0x11a>
 8000708:	e1d2      	b.n	8000ab0 <__aeabi_dmul+0x4c0>
 800070a:	4654      	mov	r4, sl
 800070c:	4648      	mov	r0, r9
 800070e:	2e01      	cmp	r6, #1
 8000710:	d0c1      	beq.n	8000696 <__aeabi_dmul+0xa6>
 8000712:	9a01      	ldr	r2, [sp, #4]
 8000714:	4b7d      	ldr	r3, [pc, #500]	@ (800090c <__aeabi_dmul+0x31c>)
 8000716:	4694      	mov	ip, r2
 8000718:	4463      	add	r3, ip
 800071a:	2b00      	cmp	r3, #0
 800071c:	dc00      	bgt.n	8000720 <__aeabi_dmul+0x130>
 800071e:	e0c0      	b.n	80008a2 <__aeabi_dmul+0x2b2>
 8000720:	0742      	lsls	r2, r0, #29
 8000722:	d009      	beq.n	8000738 <__aeabi_dmul+0x148>
 8000724:	220f      	movs	r2, #15
 8000726:	4002      	ands	r2, r0
 8000728:	2a04      	cmp	r2, #4
 800072a:	d005      	beq.n	8000738 <__aeabi_dmul+0x148>
 800072c:	1d02      	adds	r2, r0, #4
 800072e:	4282      	cmp	r2, r0
 8000730:	4180      	sbcs	r0, r0
 8000732:	4240      	negs	r0, r0
 8000734:	1824      	adds	r4, r4, r0
 8000736:	0010      	movs	r0, r2
 8000738:	01e2      	lsls	r2, r4, #7
 800073a:	d506      	bpl.n	800074a <__aeabi_dmul+0x15a>
 800073c:	4b74      	ldr	r3, [pc, #464]	@ (8000910 <__aeabi_dmul+0x320>)
 800073e:	9a01      	ldr	r2, [sp, #4]
 8000740:	401c      	ands	r4, r3
 8000742:	2380      	movs	r3, #128	@ 0x80
 8000744:	4694      	mov	ip, r2
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	4463      	add	r3, ip
 800074a:	4a72      	ldr	r2, [pc, #456]	@ (8000914 <__aeabi_dmul+0x324>)
 800074c:	4293      	cmp	r3, r2
 800074e:	dc6b      	bgt.n	8000828 <__aeabi_dmul+0x238>
 8000750:	0762      	lsls	r2, r4, #29
 8000752:	08c0      	lsrs	r0, r0, #3
 8000754:	0264      	lsls	r4, r4, #9
 8000756:	055b      	lsls	r3, r3, #21
 8000758:	4302      	orrs	r2, r0
 800075a:	0b24      	lsrs	r4, r4, #12
 800075c:	0d5b      	lsrs	r3, r3, #21
 800075e:	e79d      	b.n	800069c <__aeabi_dmul+0xac>
 8000760:	2190      	movs	r1, #144	@ 0x90
 8000762:	0089      	lsls	r1, r1, #2
 8000764:	420f      	tst	r7, r1
 8000766:	d163      	bne.n	8000830 <__aeabi_dmul+0x240>
 8000768:	2288      	movs	r2, #136	@ 0x88
 800076a:	423a      	tst	r2, r7
 800076c:	d100      	bne.n	8000770 <__aeabi_dmul+0x180>
 800076e:	e0d7      	b.n	8000920 <__aeabi_dmul+0x330>
 8000770:	9b00      	ldr	r3, [sp, #0]
 8000772:	46a2      	mov	sl, r4
 8000774:	469b      	mov	fp, r3
 8000776:	4681      	mov	r9, r0
 8000778:	9602      	str	r6, [sp, #8]
 800077a:	e7bf      	b.n	80006fc <__aeabi_dmul+0x10c>
 800077c:	0023      	movs	r3, r4
 800077e:	4333      	orrs	r3, r6
 8000780:	d100      	bne.n	8000784 <__aeabi_dmul+0x194>
 8000782:	e07f      	b.n	8000884 <__aeabi_dmul+0x294>
 8000784:	2c00      	cmp	r4, #0
 8000786:	d100      	bne.n	800078a <__aeabi_dmul+0x19a>
 8000788:	e1ad      	b.n	8000ae6 <__aeabi_dmul+0x4f6>
 800078a:	0020      	movs	r0, r4
 800078c:	f000 fac4 	bl	8000d18 <__clzsi2>
 8000790:	0002      	movs	r2, r0
 8000792:	0003      	movs	r3, r0
 8000794:	3a0b      	subs	r2, #11
 8000796:	201d      	movs	r0, #29
 8000798:	0019      	movs	r1, r3
 800079a:	1a82      	subs	r2, r0, r2
 800079c:	0030      	movs	r0, r6
 800079e:	3908      	subs	r1, #8
 80007a0:	40d0      	lsrs	r0, r2
 80007a2:	408c      	lsls	r4, r1
 80007a4:	4304      	orrs	r4, r0
 80007a6:	0030      	movs	r0, r6
 80007a8:	4088      	lsls	r0, r1
 80007aa:	4a5b      	ldr	r2, [pc, #364]	@ (8000918 <__aeabi_dmul+0x328>)
 80007ac:	1aeb      	subs	r3, r5, r3
 80007ae:	4694      	mov	ip, r2
 80007b0:	4463      	add	r3, ip
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	9201      	str	r2, [sp, #4]
 80007b6:	4642      	mov	r2, r8
 80007b8:	2600      	movs	r6, #0
 80007ba:	2a0a      	cmp	r2, #10
 80007bc:	dc00      	bgt.n	80007c0 <__aeabi_dmul+0x1d0>
 80007be:	e75a      	b.n	8000676 <__aeabi_dmul+0x86>
 80007c0:	e79c      	b.n	80006fc <__aeabi_dmul+0x10c>
 80007c2:	4653      	mov	r3, sl
 80007c4:	4303      	orrs	r3, r0
 80007c6:	4699      	mov	r9, r3
 80007c8:	d054      	beq.n	8000874 <__aeabi_dmul+0x284>
 80007ca:	4653      	mov	r3, sl
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d100      	bne.n	80007d2 <__aeabi_dmul+0x1e2>
 80007d0:	e177      	b.n	8000ac2 <__aeabi_dmul+0x4d2>
 80007d2:	4650      	mov	r0, sl
 80007d4:	f000 faa0 	bl	8000d18 <__clzsi2>
 80007d8:	230b      	movs	r3, #11
 80007da:	425b      	negs	r3, r3
 80007dc:	469c      	mov	ip, r3
 80007de:	0002      	movs	r2, r0
 80007e0:	4484      	add	ip, r0
 80007e2:	0011      	movs	r1, r2
 80007e4:	4650      	mov	r0, sl
 80007e6:	3908      	subs	r1, #8
 80007e8:	4088      	lsls	r0, r1
 80007ea:	231d      	movs	r3, #29
 80007ec:	4680      	mov	r8, r0
 80007ee:	4660      	mov	r0, ip
 80007f0:	1a1b      	subs	r3, r3, r0
 80007f2:	0020      	movs	r0, r4
 80007f4:	40d8      	lsrs	r0, r3
 80007f6:	0003      	movs	r3, r0
 80007f8:	4640      	mov	r0, r8
 80007fa:	4303      	orrs	r3, r0
 80007fc:	469a      	mov	sl, r3
 80007fe:	0023      	movs	r3, r4
 8000800:	408b      	lsls	r3, r1
 8000802:	4699      	mov	r9, r3
 8000804:	2300      	movs	r3, #0
 8000806:	4d44      	ldr	r5, [pc, #272]	@ (8000918 <__aeabi_dmul+0x328>)
 8000808:	4698      	mov	r8, r3
 800080a:	1aad      	subs	r5, r5, r2
 800080c:	9302      	str	r3, [sp, #8]
 800080e:	e715      	b.n	800063c <__aeabi_dmul+0x4c>
 8000810:	4652      	mov	r2, sl
 8000812:	4302      	orrs	r2, r0
 8000814:	4691      	mov	r9, r2
 8000816:	d126      	bne.n	8000866 <__aeabi_dmul+0x276>
 8000818:	2200      	movs	r2, #0
 800081a:	001d      	movs	r5, r3
 800081c:	2302      	movs	r3, #2
 800081e:	4692      	mov	sl, r2
 8000820:	3208      	adds	r2, #8
 8000822:	4690      	mov	r8, r2
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	e709      	b.n	800063c <__aeabi_dmul+0x4c>
 8000828:	2400      	movs	r4, #0
 800082a:	2200      	movs	r2, #0
 800082c:	4b35      	ldr	r3, [pc, #212]	@ (8000904 <__aeabi_dmul+0x314>)
 800082e:	e735      	b.n	800069c <__aeabi_dmul+0xac>
 8000830:	2300      	movs	r3, #0
 8000832:	2480      	movs	r4, #128	@ 0x80
 8000834:	469b      	mov	fp, r3
 8000836:	0324      	lsls	r4, r4, #12
 8000838:	4b32      	ldr	r3, [pc, #200]	@ (8000904 <__aeabi_dmul+0x314>)
 800083a:	e72f      	b.n	800069c <__aeabi_dmul+0xac>
 800083c:	2202      	movs	r2, #2
 800083e:	4641      	mov	r1, r8
 8000840:	4311      	orrs	r1, r2
 8000842:	2280      	movs	r2, #128	@ 0x80
 8000844:	0112      	lsls	r2, r2, #4
 8000846:	4694      	mov	ip, r2
 8000848:	002a      	movs	r2, r5
 800084a:	4462      	add	r2, ip
 800084c:	4688      	mov	r8, r1
 800084e:	9201      	str	r2, [sp, #4]
 8000850:	290a      	cmp	r1, #10
 8000852:	dd00      	ble.n	8000856 <__aeabi_dmul+0x266>
 8000854:	e752      	b.n	80006fc <__aeabi_dmul+0x10c>
 8000856:	465a      	mov	r2, fp
 8000858:	2000      	movs	r0, #0
 800085a:	9900      	ldr	r1, [sp, #0]
 800085c:	0004      	movs	r4, r0
 800085e:	404a      	eors	r2, r1
 8000860:	4693      	mov	fp, r2
 8000862:	2602      	movs	r6, #2
 8000864:	e70b      	b.n	800067e <__aeabi_dmul+0x8e>
 8000866:	220c      	movs	r2, #12
 8000868:	001d      	movs	r5, r3
 800086a:	2303      	movs	r3, #3
 800086c:	4681      	mov	r9, r0
 800086e:	4690      	mov	r8, r2
 8000870:	9302      	str	r3, [sp, #8]
 8000872:	e6e3      	b.n	800063c <__aeabi_dmul+0x4c>
 8000874:	2300      	movs	r3, #0
 8000876:	469a      	mov	sl, r3
 8000878:	3304      	adds	r3, #4
 800087a:	4698      	mov	r8, r3
 800087c:	3b03      	subs	r3, #3
 800087e:	2500      	movs	r5, #0
 8000880:	9302      	str	r3, [sp, #8]
 8000882:	e6db      	b.n	800063c <__aeabi_dmul+0x4c>
 8000884:	4642      	mov	r2, r8
 8000886:	3301      	adds	r3, #1
 8000888:	431a      	orrs	r2, r3
 800088a:	002b      	movs	r3, r5
 800088c:	4690      	mov	r8, r2
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	9201      	str	r2, [sp, #4]
 8000892:	4642      	mov	r2, r8
 8000894:	2400      	movs	r4, #0
 8000896:	2000      	movs	r0, #0
 8000898:	2601      	movs	r6, #1
 800089a:	2a0a      	cmp	r2, #10
 800089c:	dc00      	bgt.n	80008a0 <__aeabi_dmul+0x2b0>
 800089e:	e6ea      	b.n	8000676 <__aeabi_dmul+0x86>
 80008a0:	e72c      	b.n	80006fc <__aeabi_dmul+0x10c>
 80008a2:	2201      	movs	r2, #1
 80008a4:	1ad2      	subs	r2, r2, r3
 80008a6:	2a38      	cmp	r2, #56	@ 0x38
 80008a8:	dd00      	ble.n	80008ac <__aeabi_dmul+0x2bc>
 80008aa:	e6f4      	b.n	8000696 <__aeabi_dmul+0xa6>
 80008ac:	2a1f      	cmp	r2, #31
 80008ae:	dc00      	bgt.n	80008b2 <__aeabi_dmul+0x2c2>
 80008b0:	e12a      	b.n	8000b08 <__aeabi_dmul+0x518>
 80008b2:	211f      	movs	r1, #31
 80008b4:	4249      	negs	r1, r1
 80008b6:	1acb      	subs	r3, r1, r3
 80008b8:	0021      	movs	r1, r4
 80008ba:	40d9      	lsrs	r1, r3
 80008bc:	000b      	movs	r3, r1
 80008be:	2a20      	cmp	r2, #32
 80008c0:	d005      	beq.n	80008ce <__aeabi_dmul+0x2de>
 80008c2:	4a16      	ldr	r2, [pc, #88]	@ (800091c <__aeabi_dmul+0x32c>)
 80008c4:	9d01      	ldr	r5, [sp, #4]
 80008c6:	4694      	mov	ip, r2
 80008c8:	4465      	add	r5, ip
 80008ca:	40ac      	lsls	r4, r5
 80008cc:	4320      	orrs	r0, r4
 80008ce:	1e42      	subs	r2, r0, #1
 80008d0:	4190      	sbcs	r0, r2
 80008d2:	4318      	orrs	r0, r3
 80008d4:	2307      	movs	r3, #7
 80008d6:	0019      	movs	r1, r3
 80008d8:	2400      	movs	r4, #0
 80008da:	4001      	ands	r1, r0
 80008dc:	4203      	tst	r3, r0
 80008de:	d00c      	beq.n	80008fa <__aeabi_dmul+0x30a>
 80008e0:	230f      	movs	r3, #15
 80008e2:	4003      	ands	r3, r0
 80008e4:	2b04      	cmp	r3, #4
 80008e6:	d100      	bne.n	80008ea <__aeabi_dmul+0x2fa>
 80008e8:	e140      	b.n	8000b6c <__aeabi_dmul+0x57c>
 80008ea:	1d03      	adds	r3, r0, #4
 80008ec:	4283      	cmp	r3, r0
 80008ee:	41a4      	sbcs	r4, r4
 80008f0:	0018      	movs	r0, r3
 80008f2:	4264      	negs	r4, r4
 80008f4:	0761      	lsls	r1, r4, #29
 80008f6:	0264      	lsls	r4, r4, #9
 80008f8:	0b24      	lsrs	r4, r4, #12
 80008fa:	08c2      	lsrs	r2, r0, #3
 80008fc:	2300      	movs	r3, #0
 80008fe:	430a      	orrs	r2, r1
 8000900:	e6cc      	b.n	800069c <__aeabi_dmul+0xac>
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	000007ff 	.word	0x000007ff
 8000908:	fffffc01 	.word	0xfffffc01
 800090c:	000003ff 	.word	0x000003ff
 8000910:	feffffff 	.word	0xfeffffff
 8000914:	000007fe 	.word	0x000007fe
 8000918:	fffffc0d 	.word	0xfffffc0d
 800091c:	0000043e 	.word	0x0000043e
 8000920:	4649      	mov	r1, r9
 8000922:	464a      	mov	r2, r9
 8000924:	0409      	lsls	r1, r1, #16
 8000926:	0c09      	lsrs	r1, r1, #16
 8000928:	000d      	movs	r5, r1
 800092a:	0c16      	lsrs	r6, r2, #16
 800092c:	0c02      	lsrs	r2, r0, #16
 800092e:	0400      	lsls	r0, r0, #16
 8000930:	0c00      	lsrs	r0, r0, #16
 8000932:	4345      	muls	r5, r0
 8000934:	46ac      	mov	ip, r5
 8000936:	0005      	movs	r5, r0
 8000938:	4375      	muls	r5, r6
 800093a:	46a8      	mov	r8, r5
 800093c:	0015      	movs	r5, r2
 800093e:	000f      	movs	r7, r1
 8000940:	4375      	muls	r5, r6
 8000942:	9200      	str	r2, [sp, #0]
 8000944:	9502      	str	r5, [sp, #8]
 8000946:	002a      	movs	r2, r5
 8000948:	9d00      	ldr	r5, [sp, #0]
 800094a:	436f      	muls	r7, r5
 800094c:	4665      	mov	r5, ip
 800094e:	0c2d      	lsrs	r5, r5, #16
 8000950:	46a9      	mov	r9, r5
 8000952:	4447      	add	r7, r8
 8000954:	444f      	add	r7, r9
 8000956:	45b8      	cmp	r8, r7
 8000958:	d905      	bls.n	8000966 <__aeabi_dmul+0x376>
 800095a:	0015      	movs	r5, r2
 800095c:	2280      	movs	r2, #128	@ 0x80
 800095e:	0252      	lsls	r2, r2, #9
 8000960:	4690      	mov	r8, r2
 8000962:	4445      	add	r5, r8
 8000964:	9502      	str	r5, [sp, #8]
 8000966:	0c3d      	lsrs	r5, r7, #16
 8000968:	9503      	str	r5, [sp, #12]
 800096a:	4665      	mov	r5, ip
 800096c:	042d      	lsls	r5, r5, #16
 800096e:	043f      	lsls	r7, r7, #16
 8000970:	0c2d      	lsrs	r5, r5, #16
 8000972:	46ac      	mov	ip, r5
 8000974:	003d      	movs	r5, r7
 8000976:	4465      	add	r5, ip
 8000978:	9504      	str	r5, [sp, #16]
 800097a:	0c25      	lsrs	r5, r4, #16
 800097c:	0424      	lsls	r4, r4, #16
 800097e:	0c24      	lsrs	r4, r4, #16
 8000980:	46ac      	mov	ip, r5
 8000982:	0025      	movs	r5, r4
 8000984:	4375      	muls	r5, r6
 8000986:	46a8      	mov	r8, r5
 8000988:	4665      	mov	r5, ip
 800098a:	000f      	movs	r7, r1
 800098c:	4369      	muls	r1, r5
 800098e:	4441      	add	r1, r8
 8000990:	4689      	mov	r9, r1
 8000992:	4367      	muls	r7, r4
 8000994:	0c39      	lsrs	r1, r7, #16
 8000996:	4449      	add	r1, r9
 8000998:	436e      	muls	r6, r5
 800099a:	4588      	cmp	r8, r1
 800099c:	d903      	bls.n	80009a6 <__aeabi_dmul+0x3b6>
 800099e:	2280      	movs	r2, #128	@ 0x80
 80009a0:	0252      	lsls	r2, r2, #9
 80009a2:	4690      	mov	r8, r2
 80009a4:	4446      	add	r6, r8
 80009a6:	0c0d      	lsrs	r5, r1, #16
 80009a8:	46a8      	mov	r8, r5
 80009aa:	0035      	movs	r5, r6
 80009ac:	4445      	add	r5, r8
 80009ae:	9505      	str	r5, [sp, #20]
 80009b0:	9d03      	ldr	r5, [sp, #12]
 80009b2:	043f      	lsls	r7, r7, #16
 80009b4:	46a8      	mov	r8, r5
 80009b6:	0c3f      	lsrs	r7, r7, #16
 80009b8:	0409      	lsls	r1, r1, #16
 80009ba:	19c9      	adds	r1, r1, r7
 80009bc:	4488      	add	r8, r1
 80009be:	4645      	mov	r5, r8
 80009c0:	9503      	str	r5, [sp, #12]
 80009c2:	4655      	mov	r5, sl
 80009c4:	042e      	lsls	r6, r5, #16
 80009c6:	0c36      	lsrs	r6, r6, #16
 80009c8:	0c2f      	lsrs	r7, r5, #16
 80009ca:	0035      	movs	r5, r6
 80009cc:	4345      	muls	r5, r0
 80009ce:	4378      	muls	r0, r7
 80009d0:	4681      	mov	r9, r0
 80009d2:	0038      	movs	r0, r7
 80009d4:	46a8      	mov	r8, r5
 80009d6:	0c2d      	lsrs	r5, r5, #16
 80009d8:	46aa      	mov	sl, r5
 80009da:	9a00      	ldr	r2, [sp, #0]
 80009dc:	4350      	muls	r0, r2
 80009de:	4372      	muls	r2, r6
 80009e0:	444a      	add	r2, r9
 80009e2:	4452      	add	r2, sl
 80009e4:	4591      	cmp	r9, r2
 80009e6:	d903      	bls.n	80009f0 <__aeabi_dmul+0x400>
 80009e8:	2580      	movs	r5, #128	@ 0x80
 80009ea:	026d      	lsls	r5, r5, #9
 80009ec:	46a9      	mov	r9, r5
 80009ee:	4448      	add	r0, r9
 80009f0:	0c15      	lsrs	r5, r2, #16
 80009f2:	46a9      	mov	r9, r5
 80009f4:	4645      	mov	r5, r8
 80009f6:	042d      	lsls	r5, r5, #16
 80009f8:	0c2d      	lsrs	r5, r5, #16
 80009fa:	46a8      	mov	r8, r5
 80009fc:	4665      	mov	r5, ip
 80009fe:	437d      	muls	r5, r7
 8000a00:	0412      	lsls	r2, r2, #16
 8000a02:	4448      	add	r0, r9
 8000a04:	4490      	add	r8, r2
 8000a06:	46a9      	mov	r9, r5
 8000a08:	0032      	movs	r2, r6
 8000a0a:	4665      	mov	r5, ip
 8000a0c:	4362      	muls	r2, r4
 8000a0e:	436e      	muls	r6, r5
 8000a10:	437c      	muls	r4, r7
 8000a12:	0c17      	lsrs	r7, r2, #16
 8000a14:	1936      	adds	r6, r6, r4
 8000a16:	19bf      	adds	r7, r7, r6
 8000a18:	42bc      	cmp	r4, r7
 8000a1a:	d903      	bls.n	8000a24 <__aeabi_dmul+0x434>
 8000a1c:	2480      	movs	r4, #128	@ 0x80
 8000a1e:	0264      	lsls	r4, r4, #9
 8000a20:	46a4      	mov	ip, r4
 8000a22:	44e1      	add	r9, ip
 8000a24:	9c02      	ldr	r4, [sp, #8]
 8000a26:	9e03      	ldr	r6, [sp, #12]
 8000a28:	46a4      	mov	ip, r4
 8000a2a:	9d05      	ldr	r5, [sp, #20]
 8000a2c:	4466      	add	r6, ip
 8000a2e:	428e      	cmp	r6, r1
 8000a30:	4189      	sbcs	r1, r1
 8000a32:	46ac      	mov	ip, r5
 8000a34:	0412      	lsls	r2, r2, #16
 8000a36:	043c      	lsls	r4, r7, #16
 8000a38:	0c12      	lsrs	r2, r2, #16
 8000a3a:	18a2      	adds	r2, r4, r2
 8000a3c:	4462      	add	r2, ip
 8000a3e:	4249      	negs	r1, r1
 8000a40:	1854      	adds	r4, r2, r1
 8000a42:	4446      	add	r6, r8
 8000a44:	46a4      	mov	ip, r4
 8000a46:	4546      	cmp	r6, r8
 8000a48:	41a4      	sbcs	r4, r4
 8000a4a:	4682      	mov	sl, r0
 8000a4c:	4264      	negs	r4, r4
 8000a4e:	46a0      	mov	r8, r4
 8000a50:	42aa      	cmp	r2, r5
 8000a52:	4192      	sbcs	r2, r2
 8000a54:	458c      	cmp	ip, r1
 8000a56:	4189      	sbcs	r1, r1
 8000a58:	44e2      	add	sl, ip
 8000a5a:	44d0      	add	r8, sl
 8000a5c:	4249      	negs	r1, r1
 8000a5e:	4252      	negs	r2, r2
 8000a60:	430a      	orrs	r2, r1
 8000a62:	45a0      	cmp	r8, r4
 8000a64:	41a4      	sbcs	r4, r4
 8000a66:	4582      	cmp	sl, r0
 8000a68:	4189      	sbcs	r1, r1
 8000a6a:	4264      	negs	r4, r4
 8000a6c:	4249      	negs	r1, r1
 8000a6e:	430c      	orrs	r4, r1
 8000a70:	4641      	mov	r1, r8
 8000a72:	0c3f      	lsrs	r7, r7, #16
 8000a74:	19d2      	adds	r2, r2, r7
 8000a76:	1912      	adds	r2, r2, r4
 8000a78:	0dcc      	lsrs	r4, r1, #23
 8000a7a:	9904      	ldr	r1, [sp, #16]
 8000a7c:	0270      	lsls	r0, r6, #9
 8000a7e:	4308      	orrs	r0, r1
 8000a80:	1e41      	subs	r1, r0, #1
 8000a82:	4188      	sbcs	r0, r1
 8000a84:	4641      	mov	r1, r8
 8000a86:	444a      	add	r2, r9
 8000a88:	0df6      	lsrs	r6, r6, #23
 8000a8a:	0252      	lsls	r2, r2, #9
 8000a8c:	4330      	orrs	r0, r6
 8000a8e:	0249      	lsls	r1, r1, #9
 8000a90:	4314      	orrs	r4, r2
 8000a92:	4308      	orrs	r0, r1
 8000a94:	01d2      	lsls	r2, r2, #7
 8000a96:	d535      	bpl.n	8000b04 <__aeabi_dmul+0x514>
 8000a98:	2201      	movs	r2, #1
 8000a9a:	0843      	lsrs	r3, r0, #1
 8000a9c:	4002      	ands	r2, r0
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	07e0      	lsls	r0, r4, #31
 8000aa2:	4318      	orrs	r0, r3
 8000aa4:	0864      	lsrs	r4, r4, #1
 8000aa6:	e634      	b.n	8000712 <__aeabi_dmul+0x122>
 8000aa8:	9b00      	ldr	r3, [sp, #0]
 8000aaa:	46a2      	mov	sl, r4
 8000aac:	469b      	mov	fp, r3
 8000aae:	4681      	mov	r9, r0
 8000ab0:	2480      	movs	r4, #128	@ 0x80
 8000ab2:	4653      	mov	r3, sl
 8000ab4:	0324      	lsls	r4, r4, #12
 8000ab6:	431c      	orrs	r4, r3
 8000ab8:	0324      	lsls	r4, r4, #12
 8000aba:	464a      	mov	r2, r9
 8000abc:	4b2e      	ldr	r3, [pc, #184]	@ (8000b78 <__aeabi_dmul+0x588>)
 8000abe:	0b24      	lsrs	r4, r4, #12
 8000ac0:	e5ec      	b.n	800069c <__aeabi_dmul+0xac>
 8000ac2:	f000 f929 	bl	8000d18 <__clzsi2>
 8000ac6:	2315      	movs	r3, #21
 8000ac8:	469c      	mov	ip, r3
 8000aca:	4484      	add	ip, r0
 8000acc:	0002      	movs	r2, r0
 8000ace:	4663      	mov	r3, ip
 8000ad0:	3220      	adds	r2, #32
 8000ad2:	2b1c      	cmp	r3, #28
 8000ad4:	dc00      	bgt.n	8000ad8 <__aeabi_dmul+0x4e8>
 8000ad6:	e684      	b.n	80007e2 <__aeabi_dmul+0x1f2>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	4699      	mov	r9, r3
 8000adc:	0023      	movs	r3, r4
 8000ade:	3808      	subs	r0, #8
 8000ae0:	4083      	lsls	r3, r0
 8000ae2:	469a      	mov	sl, r3
 8000ae4:	e68e      	b.n	8000804 <__aeabi_dmul+0x214>
 8000ae6:	f000 f917 	bl	8000d18 <__clzsi2>
 8000aea:	0002      	movs	r2, r0
 8000aec:	0003      	movs	r3, r0
 8000aee:	3215      	adds	r2, #21
 8000af0:	3320      	adds	r3, #32
 8000af2:	2a1c      	cmp	r2, #28
 8000af4:	dc00      	bgt.n	8000af8 <__aeabi_dmul+0x508>
 8000af6:	e64e      	b.n	8000796 <__aeabi_dmul+0x1a6>
 8000af8:	0002      	movs	r2, r0
 8000afa:	0034      	movs	r4, r6
 8000afc:	3a08      	subs	r2, #8
 8000afe:	2000      	movs	r0, #0
 8000b00:	4094      	lsls	r4, r2
 8000b02:	e652      	b.n	80007aa <__aeabi_dmul+0x1ba>
 8000b04:	9301      	str	r3, [sp, #4]
 8000b06:	e604      	b.n	8000712 <__aeabi_dmul+0x122>
 8000b08:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <__aeabi_dmul+0x58c>)
 8000b0a:	0021      	movs	r1, r4
 8000b0c:	469c      	mov	ip, r3
 8000b0e:	0003      	movs	r3, r0
 8000b10:	9d01      	ldr	r5, [sp, #4]
 8000b12:	40d3      	lsrs	r3, r2
 8000b14:	4465      	add	r5, ip
 8000b16:	40a9      	lsls	r1, r5
 8000b18:	4319      	orrs	r1, r3
 8000b1a:	0003      	movs	r3, r0
 8000b1c:	40ab      	lsls	r3, r5
 8000b1e:	1e58      	subs	r0, r3, #1
 8000b20:	4183      	sbcs	r3, r0
 8000b22:	4319      	orrs	r1, r3
 8000b24:	0008      	movs	r0, r1
 8000b26:	40d4      	lsrs	r4, r2
 8000b28:	074b      	lsls	r3, r1, #29
 8000b2a:	d009      	beq.n	8000b40 <__aeabi_dmul+0x550>
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	400b      	ands	r3, r1
 8000b30:	2b04      	cmp	r3, #4
 8000b32:	d005      	beq.n	8000b40 <__aeabi_dmul+0x550>
 8000b34:	1d0b      	adds	r3, r1, #4
 8000b36:	428b      	cmp	r3, r1
 8000b38:	4180      	sbcs	r0, r0
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	1824      	adds	r4, r4, r0
 8000b3e:	0018      	movs	r0, r3
 8000b40:	0223      	lsls	r3, r4, #8
 8000b42:	d400      	bmi.n	8000b46 <__aeabi_dmul+0x556>
 8000b44:	e6d6      	b.n	80008f4 <__aeabi_dmul+0x304>
 8000b46:	2301      	movs	r3, #1
 8000b48:	2400      	movs	r4, #0
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	e5a6      	b.n	800069c <__aeabi_dmul+0xac>
 8000b4e:	290f      	cmp	r1, #15
 8000b50:	d1aa      	bne.n	8000aa8 <__aeabi_dmul+0x4b8>
 8000b52:	2380      	movs	r3, #128	@ 0x80
 8000b54:	4652      	mov	r2, sl
 8000b56:	031b      	lsls	r3, r3, #12
 8000b58:	421a      	tst	r2, r3
 8000b5a:	d0a9      	beq.n	8000ab0 <__aeabi_dmul+0x4c0>
 8000b5c:	421c      	tst	r4, r3
 8000b5e:	d1a7      	bne.n	8000ab0 <__aeabi_dmul+0x4c0>
 8000b60:	431c      	orrs	r4, r3
 8000b62:	9b00      	ldr	r3, [sp, #0]
 8000b64:	0002      	movs	r2, r0
 8000b66:	469b      	mov	fp, r3
 8000b68:	4b03      	ldr	r3, [pc, #12]	@ (8000b78 <__aeabi_dmul+0x588>)
 8000b6a:	e597      	b.n	800069c <__aeabi_dmul+0xac>
 8000b6c:	2400      	movs	r4, #0
 8000b6e:	e6c1      	b.n	80008f4 <__aeabi_dmul+0x304>
 8000b70:	2400      	movs	r4, #0
 8000b72:	4b01      	ldr	r3, [pc, #4]	@ (8000b78 <__aeabi_dmul+0x588>)
 8000b74:	0022      	movs	r2, r4
 8000b76:	e591      	b.n	800069c <__aeabi_dmul+0xac>
 8000b78:	000007ff 	.word	0x000007ff
 8000b7c:	0000041e 	.word	0x0000041e

08000b80 <__aeabi_f2d>:
 8000b80:	b570      	push	{r4, r5, r6, lr}
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	0043      	lsls	r3, r0, #1
 8000b86:	0fc4      	lsrs	r4, r0, #31
 8000b88:	20fe      	movs	r0, #254	@ 0xfe
 8000b8a:	0e1b      	lsrs	r3, r3, #24
 8000b8c:	1c59      	adds	r1, r3, #1
 8000b8e:	0a55      	lsrs	r5, r2, #9
 8000b90:	4208      	tst	r0, r1
 8000b92:	d00c      	beq.n	8000bae <__aeabi_f2d+0x2e>
 8000b94:	21e0      	movs	r1, #224	@ 0xe0
 8000b96:	0089      	lsls	r1, r1, #2
 8000b98:	468c      	mov	ip, r1
 8000b9a:	076d      	lsls	r5, r5, #29
 8000b9c:	0b12      	lsrs	r2, r2, #12
 8000b9e:	4463      	add	r3, ip
 8000ba0:	051b      	lsls	r3, r3, #20
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	07e4      	lsls	r4, r4, #31
 8000ba6:	4323      	orrs	r3, r4
 8000ba8:	0028      	movs	r0, r5
 8000baa:	0019      	movs	r1, r3
 8000bac:	bd70      	pop	{r4, r5, r6, pc}
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d114      	bne.n	8000bdc <__aeabi_f2d+0x5c>
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d01b      	beq.n	8000bee <__aeabi_f2d+0x6e>
 8000bb6:	0028      	movs	r0, r5
 8000bb8:	f000 f8ae 	bl	8000d18 <__clzsi2>
 8000bbc:	280a      	cmp	r0, #10
 8000bbe:	dc1c      	bgt.n	8000bfa <__aeabi_f2d+0x7a>
 8000bc0:	230b      	movs	r3, #11
 8000bc2:	002a      	movs	r2, r5
 8000bc4:	1a1b      	subs	r3, r3, r0
 8000bc6:	40da      	lsrs	r2, r3
 8000bc8:	0003      	movs	r3, r0
 8000bca:	3315      	adds	r3, #21
 8000bcc:	409d      	lsls	r5, r3
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <__aeabi_f2d+0x88>)
 8000bd0:	0312      	lsls	r2, r2, #12
 8000bd2:	1a1b      	subs	r3, r3, r0
 8000bd4:	055b      	lsls	r3, r3, #21
 8000bd6:	0b12      	lsrs	r2, r2, #12
 8000bd8:	0d5b      	lsrs	r3, r3, #21
 8000bda:	e7e1      	b.n	8000ba0 <__aeabi_f2d+0x20>
 8000bdc:	2d00      	cmp	r5, #0
 8000bde:	d009      	beq.n	8000bf4 <__aeabi_f2d+0x74>
 8000be0:	0b13      	lsrs	r3, r2, #12
 8000be2:	2280      	movs	r2, #128	@ 0x80
 8000be4:	0312      	lsls	r2, r2, #12
 8000be6:	431a      	orrs	r2, r3
 8000be8:	076d      	lsls	r5, r5, #29
 8000bea:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <__aeabi_f2d+0x8c>)
 8000bec:	e7d8      	b.n	8000ba0 <__aeabi_f2d+0x20>
 8000bee:	2300      	movs	r3, #0
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	e7d5      	b.n	8000ba0 <__aeabi_f2d+0x20>
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <__aeabi_f2d+0x8c>)
 8000bf8:	e7d2      	b.n	8000ba0 <__aeabi_f2d+0x20>
 8000bfa:	0003      	movs	r3, r0
 8000bfc:	002a      	movs	r2, r5
 8000bfe:	3b0b      	subs	r3, #11
 8000c00:	409a      	lsls	r2, r3
 8000c02:	2500      	movs	r5, #0
 8000c04:	e7e3      	b.n	8000bce <__aeabi_f2d+0x4e>
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	00000389 	.word	0x00000389
 8000c0c:	000007ff 	.word	0x000007ff

08000c10 <__aeabi_d2f>:
 8000c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c12:	004b      	lsls	r3, r1, #1
 8000c14:	030f      	lsls	r7, r1, #12
 8000c16:	0d5b      	lsrs	r3, r3, #21
 8000c18:	4c3b      	ldr	r4, [pc, #236]	@ (8000d08 <__aeabi_d2f+0xf8>)
 8000c1a:	0f45      	lsrs	r5, r0, #29
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	0a7f      	lsrs	r7, r7, #9
 8000c20:	1c5e      	adds	r6, r3, #1
 8000c22:	432f      	orrs	r7, r5
 8000c24:	9000      	str	r0, [sp, #0]
 8000c26:	9101      	str	r1, [sp, #4]
 8000c28:	0fca      	lsrs	r2, r1, #31
 8000c2a:	00c5      	lsls	r5, r0, #3
 8000c2c:	4226      	tst	r6, r4
 8000c2e:	d00b      	beq.n	8000c48 <__aeabi_d2f+0x38>
 8000c30:	4936      	ldr	r1, [pc, #216]	@ (8000d0c <__aeabi_d2f+0xfc>)
 8000c32:	185c      	adds	r4, r3, r1
 8000c34:	2cfe      	cmp	r4, #254	@ 0xfe
 8000c36:	dd13      	ble.n	8000c60 <__aeabi_d2f+0x50>
 8000c38:	20ff      	movs	r0, #255	@ 0xff
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	05c0      	lsls	r0, r0, #23
 8000c3e:	4318      	orrs	r0, r3
 8000c40:	07d2      	lsls	r2, r2, #31
 8000c42:	4310      	orrs	r0, r2
 8000c44:	b003      	add	sp, #12
 8000c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2f+0x42>
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e7f4      	b.n	8000c3c <__aeabi_d2f+0x2c>
 8000c52:	433d      	orrs	r5, r7
 8000c54:	d0f0      	beq.n	8000c38 <__aeabi_d2f+0x28>
 8000c56:	2380      	movs	r3, #128	@ 0x80
 8000c58:	03db      	lsls	r3, r3, #15
 8000c5a:	20ff      	movs	r0, #255	@ 0xff
 8000c5c:	433b      	orrs	r3, r7
 8000c5e:	e7ed      	b.n	8000c3c <__aeabi_d2f+0x2c>
 8000c60:	2c00      	cmp	r4, #0
 8000c62:	dd14      	ble.n	8000c8e <__aeabi_d2f+0x7e>
 8000c64:	9b00      	ldr	r3, [sp, #0]
 8000c66:	00ff      	lsls	r7, r7, #3
 8000c68:	019b      	lsls	r3, r3, #6
 8000c6a:	1e58      	subs	r0, r3, #1
 8000c6c:	4183      	sbcs	r3, r0
 8000c6e:	0f69      	lsrs	r1, r5, #29
 8000c70:	433b      	orrs	r3, r7
 8000c72:	430b      	orrs	r3, r1
 8000c74:	0759      	lsls	r1, r3, #29
 8000c76:	d041      	beq.n	8000cfc <__aeabi_d2f+0xec>
 8000c78:	210f      	movs	r1, #15
 8000c7a:	4019      	ands	r1, r3
 8000c7c:	2904      	cmp	r1, #4
 8000c7e:	d028      	beq.n	8000cd2 <__aeabi_d2f+0xc2>
 8000c80:	3304      	adds	r3, #4
 8000c82:	0159      	lsls	r1, r3, #5
 8000c84:	d525      	bpl.n	8000cd2 <__aeabi_d2f+0xc2>
 8000c86:	3401      	adds	r4, #1
 8000c88:	2300      	movs	r3, #0
 8000c8a:	b2e0      	uxtb	r0, r4
 8000c8c:	e7d6      	b.n	8000c3c <__aeabi_d2f+0x2c>
 8000c8e:	0021      	movs	r1, r4
 8000c90:	3117      	adds	r1, #23
 8000c92:	dbdb      	blt.n	8000c4c <__aeabi_d2f+0x3c>
 8000c94:	2180      	movs	r1, #128	@ 0x80
 8000c96:	201e      	movs	r0, #30
 8000c98:	0409      	lsls	r1, r1, #16
 8000c9a:	4339      	orrs	r1, r7
 8000c9c:	1b00      	subs	r0, r0, r4
 8000c9e:	281f      	cmp	r0, #31
 8000ca0:	dd1b      	ble.n	8000cda <__aeabi_d2f+0xca>
 8000ca2:	2602      	movs	r6, #2
 8000ca4:	4276      	negs	r6, r6
 8000ca6:	1b34      	subs	r4, r6, r4
 8000ca8:	000e      	movs	r6, r1
 8000caa:	40e6      	lsrs	r6, r4
 8000cac:	0034      	movs	r4, r6
 8000cae:	2820      	cmp	r0, #32
 8000cb0:	d004      	beq.n	8000cbc <__aeabi_d2f+0xac>
 8000cb2:	4817      	ldr	r0, [pc, #92]	@ (8000d10 <__aeabi_d2f+0x100>)
 8000cb4:	4684      	mov	ip, r0
 8000cb6:	4463      	add	r3, ip
 8000cb8:	4099      	lsls	r1, r3
 8000cba:	430d      	orrs	r5, r1
 8000cbc:	002b      	movs	r3, r5
 8000cbe:	1e59      	subs	r1, r3, #1
 8000cc0:	418b      	sbcs	r3, r1
 8000cc2:	4323      	orrs	r3, r4
 8000cc4:	0759      	lsls	r1, r3, #29
 8000cc6:	d015      	beq.n	8000cf4 <__aeabi_d2f+0xe4>
 8000cc8:	210f      	movs	r1, #15
 8000cca:	2400      	movs	r4, #0
 8000ccc:	4019      	ands	r1, r3
 8000cce:	2904      	cmp	r1, #4
 8000cd0:	d117      	bne.n	8000d02 <__aeabi_d2f+0xf2>
 8000cd2:	019b      	lsls	r3, r3, #6
 8000cd4:	0a5b      	lsrs	r3, r3, #9
 8000cd6:	b2e0      	uxtb	r0, r4
 8000cd8:	e7b0      	b.n	8000c3c <__aeabi_d2f+0x2c>
 8000cda:	4c0e      	ldr	r4, [pc, #56]	@ (8000d14 <__aeabi_d2f+0x104>)
 8000cdc:	191c      	adds	r4, r3, r4
 8000cde:	002b      	movs	r3, r5
 8000ce0:	40a5      	lsls	r5, r4
 8000ce2:	40c3      	lsrs	r3, r0
 8000ce4:	40a1      	lsls	r1, r4
 8000ce6:	1e68      	subs	r0, r5, #1
 8000ce8:	4185      	sbcs	r5, r0
 8000cea:	4329      	orrs	r1, r5
 8000cec:	430b      	orrs	r3, r1
 8000cee:	2400      	movs	r4, #0
 8000cf0:	0759      	lsls	r1, r3, #29
 8000cf2:	d1c1      	bne.n	8000c78 <__aeabi_d2f+0x68>
 8000cf4:	019b      	lsls	r3, r3, #6
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	0a5b      	lsrs	r3, r3, #9
 8000cfa:	e79f      	b.n	8000c3c <__aeabi_d2f+0x2c>
 8000cfc:	08db      	lsrs	r3, r3, #3
 8000cfe:	b2e0      	uxtb	r0, r4
 8000d00:	e79c      	b.n	8000c3c <__aeabi_d2f+0x2c>
 8000d02:	3304      	adds	r3, #4
 8000d04:	e7e5      	b.n	8000cd2 <__aeabi_d2f+0xc2>
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	000007fe 	.word	0x000007fe
 8000d0c:	fffffc80 	.word	0xfffffc80
 8000d10:	fffffca2 	.word	0xfffffca2
 8000d14:	fffffc82 	.word	0xfffffc82

08000d18 <__clzsi2>:
 8000d18:	211c      	movs	r1, #28
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d301      	bcc.n	8000d26 <__clzsi2+0xe>
 8000d22:	0c00      	lsrs	r0, r0, #16
 8000d24:	3910      	subs	r1, #16
 8000d26:	0a1b      	lsrs	r3, r3, #8
 8000d28:	4298      	cmp	r0, r3
 8000d2a:	d301      	bcc.n	8000d30 <__clzsi2+0x18>
 8000d2c:	0a00      	lsrs	r0, r0, #8
 8000d2e:	3908      	subs	r1, #8
 8000d30:	091b      	lsrs	r3, r3, #4
 8000d32:	4298      	cmp	r0, r3
 8000d34:	d301      	bcc.n	8000d3a <__clzsi2+0x22>
 8000d36:	0900      	lsrs	r0, r0, #4
 8000d38:	3904      	subs	r1, #4
 8000d3a:	a202      	add	r2, pc, #8	@ (adr r2, 8000d44 <__clzsi2+0x2c>)
 8000d3c:	5c10      	ldrb	r0, [r2, r0]
 8000d3e:	1840      	adds	r0, r0, r1
 8000d40:	4770      	bx	lr
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	02020304 	.word	0x02020304
 8000d48:	01010101 	.word	0x01010101
	...

08000d54 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d54:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2401      	movs	r4, #1
{
 8000d58:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	2214      	movs	r2, #20
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	a802      	add	r0, sp, #8
 8000d60:	f001 fb72 	bl	8002448 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <MX_GPIO_Init+0x68>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000d66:	25a0      	movs	r5, #160	@ 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000d6a:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	4322      	orrs	r2, r4
 8000d6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000d72:	0028      	movs	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	4022      	ands	r2, r4
 8000d76:	9200      	str	r2, [sp, #0]
 8000d78:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000d7e:	4311      	orrs	r1, r2
 8000d80:	6359      	str	r1, [r3, #52]	@ 0x34
 8000d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000d84:	2170      	movs	r1, #112	@ 0x70
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	401a      	ands	r2, r3
 8000d88:	9201      	str	r2, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000d8e:	f000 facd 	bl	800132c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|LED1_Pin|LED2_Pin;
 8000d92:	2370      	movs	r3, #112	@ 0x70
 8000d94:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	0028      	movs	r0, r5
 8000d9a:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f000 f9d1 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000da6:	2203      	movs	r2, #3
 8000da8:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <MX_GPIO_Init+0x6c>)
 8000dac:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000dae:	9202      	str	r2, [sp, #8]
 8000db0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db2:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f000 f9c8 	bl	8001148 <HAL_GPIO_Init>

}
 8000db8:	b009      	add	sp, #36	@ 0x24
 8000dba:	bd30      	pop	{r4, r5, pc}
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	50000400 	.word	0x50000400

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000dc8:	f000 f942 	bl	8001050 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000dcc:	f000 f809 	bl	8000de2 <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000dd0:	f7ff ffc0 	bl	8000d54 <MX_GPIO_Init>
    MX_SPI1_Init();
 8000dd4:	f000 f86e 	bl	8000eb4 <MX_SPI1_Init>
    /* USER CODE BEGIN 2 */
    setup();
 8000dd8:	f001 fa84 	bl	80022e4 <setup>
    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        loop();
 8000ddc:	f001 fb12 	bl	8002404 <loop>
 8000de0:	e7fc      	b.n	8000ddc <main+0x18>

08000de2 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de2:	b590      	push	{r4, r7, lr}
 8000de4:	b093      	sub	sp, #76	@ 0x4c
 8000de6:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de8:	2414      	movs	r4, #20
 8000dea:	193b      	adds	r3, r7, r4
 8000dec:	0018      	movs	r0, r3
 8000dee:	2334      	movs	r3, #52	@ 0x34
 8000df0:	001a      	movs	r2, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	f001 fb28 	bl	8002448 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	001a      	movs	r2, r3
 8000e00:	2100      	movs	r1, #0
 8000e02:	f001 fb21 	bl	8002448 <memset>

    /** Configure the main internal regulator output voltage
    */
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e06:	2380      	movs	r3, #128	@ 0x80
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f000 fa94 	bl	8001338 <HAL_PWREx_ControlVoltageScaling>

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	2202      	movs	r2, #2
 8000e14:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	2280      	movs	r2, #128	@ 0x80
 8000e1a:	0052      	lsls	r2, r2, #1
 8000e1c:	60da      	str	r2, [r3, #12]
    RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000e1e:	0021      	movs	r1, r4
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2240      	movs	r2, #64	@ 0x40
 8000e2a:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2202      	movs	r2, #2
 8000e30:	61da      	str	r2, [r3, #28]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2202      	movs	r2, #2
 8000e36:	621a      	str	r2, [r3, #32]
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2210      	movs	r2, #16
 8000e3c:	625a      	str	r2, [r3, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLN = 25;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2219      	movs	r2, #25
 8000e42:	629a      	str	r2, [r3, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2280      	movs	r2, #128	@ 0x80
 8000e48:	0292      	lsls	r2, r2, #10
 8000e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	22c0      	movs	r2, #192	@ 0xc0
 8000e50:	05d2      	lsls	r2, r2, #23
 8000e52:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 fa9e 	bl	8001398 <HAL_RCC_OscConfig>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	1e5a      	subs	r2, r3, #1
 8000e60:	4193      	sbcs	r3, r2
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <_Z18SystemClock_Configv+0x8a>
    {
        Error_Handler();
 8000e68:	f000 f81d 	bl	8000ea6 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2207      	movs	r2, #7
 8000e70:	601a      	str	r2, [r3, #0]
                                  |RCC_CLOCKTYPE_PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2202      	movs	r2, #2
 8000e76:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2102      	movs	r1, #2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f000 fd31 	bl	80018f0 <HAL_RCC_ClockConfig>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	1e5a      	subs	r2, r3, #1
 8000e92:	4193      	sbcs	r3, r2
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <_Z18SystemClock_Configv+0xbc>
    {
        Error_Handler();
 8000e9a:	f000 f804 	bl	8000ea6 <Error_Handler>
    }
}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b013      	add	sp, #76	@ 0x4c
 8000ea4:	bd90      	pop	{r4, r7, pc}

08000ea6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eaa:	b672      	cpsid	i
}
 8000eac:	46c0      	nop			@ (mov r8, r8)
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	e7fd      	b.n	8000eae <Error_Handler+0x8>
	...

08000eb4 <MX_SPI1_Init>:

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb4:	22e0      	movs	r2, #224	@ 0xe0
  hspi1.Instance = SPI1;
 8000eb6:	4811      	ldr	r0, [pc, #68]	@ (8000efc <MX_SPI1_Init+0x48>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb8:	00d2      	lsls	r2, r2, #3
{
 8000eba:	b510      	push	{r4, lr}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ebc:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ebe:	2201      	movs	r2, #1
  hspi1.Instance = SPI1;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <MX_SPI1_Init+0x4c>)
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ec2:	6142      	str	r2, [r0, #20]
  hspi1.Instance = SPI1;
 8000ec4:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ec6:	2382      	movs	r3, #130	@ 0x82
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ec8:	2280      	movs	r2, #128	@ 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ece:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ed0:	0092      	lsls	r2, r2, #2
 8000ed2:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ed4:	3ae9      	subs	r2, #233	@ 0xe9
 8000ed6:	3aff      	subs	r2, #255	@ 0xff
 8000ed8:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8000eda:	3a11      	subs	r2, #17
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000edc:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ede:	6103      	str	r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee0:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ee2:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee4:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ee6:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ee8:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000eea:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eec:	f000 fed2 	bl	8001c94 <HAL_SPI_Init>
 8000ef0:	2800      	cmp	r0, #0
 8000ef2:	d100      	bne.n	8000ef6 <MX_SPI1_Init+0x42>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ef4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000ef6:	f7ff ffd6 	bl	8000ea6 <Error_Handler>
}
 8000efa:	e7fb      	b.n	8000ef4 <MX_SPI1_Init+0x40>
 8000efc:	20000030 	.word	0x20000030
 8000f00:	40013000 	.word	0x40013000

08000f04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f04:	b510      	push	{r4, lr}
 8000f06:	0004      	movs	r4, r0
 8000f08:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	2214      	movs	r2, #20
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	a802      	add	r0, sp, #8
 8000f10:	f001 fa9a 	bl	8002448 <memset>
  if(spiHandle->Instance==SPI1)
 8000f14:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <HAL_SPI_MspInit+0x54>)
 8000f16:	6822      	ldr	r2, [r4, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d001      	beq.n	8000f20 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f1c:	b008      	add	sp, #32
 8000f1e:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f20:	2180      	movs	r1, #128	@ 0x80
 8000f22:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <HAL_SPI_MspInit+0x58>)
 8000f24:	0149      	lsls	r1, r1, #5
 8000f26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f32:	400a      	ands	r2, r1
 8000f34:	9200      	str	r2, [sp, #0]
 8000f36:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	2201      	movs	r2, #1
 8000f3a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f3c:	4311      	orrs	r1, r2
 8000f3e:	6359      	str	r1, [r3, #52]	@ 0x34
 8000f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	401a      	ands	r2, r3
 8000f46:	9201      	str	r2, [sp, #4]
 8000f48:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SCK_Pin|DIN_Pin;
 8000f4a:	2282      	movs	r2, #130	@ 0x82
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	9202      	str	r2, [sp, #8]
 8000f50:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f000 f8f9 	bl	8001148 <HAL_GPIO_Init>
}
 8000f56:	e7e1      	b.n	8000f1c <HAL_SPI_MspInit+0x18>
 8000f58:	40013000 	.word	0x40013000
 8000f5c:	40021000 	.word	0x40021000

08000f60 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	2201      	movs	r2, #1
 8000f62:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <HAL_MspInit+0x2c>)
{
 8000f64:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000f68:	4311      	orrs	r1, r2
 8000f6a:	6419      	str	r1, [r3, #64]	@ 0x40
 8000f6c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000f6e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	9200      	str	r2, [sp, #0]
 8000f74:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f78:	0549      	lsls	r1, r1, #21
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f80:	400b      	ands	r3, r1
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f86:	b002      	add	sp, #8
 8000f88:	4770      	bx	lr
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	40021000 	.word	0x40021000

08000f90 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler>
 8000f92:	46c0      	nop			@ (mov r8, r8)

08000f94 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <HardFault_Handler>
 8000f96:	46c0      	nop			@ (mov r8, r8)

08000f98 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f98:	4770      	bx	lr
 8000f9a:	46c0      	nop			@ (mov r8, r8)

08000f9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000f9c:	4770      	bx	lr
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa2:	f000 f869 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
    task_handler();
 8000fa6:	f001 fa3b 	bl	8002420 <task_handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000faa:	bd10      	pop	{r4, pc}

08000fac <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	4770      	bx	lr
 8000fae:	46c0      	nop			@ (mov r8, r8)

08000fb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fb0:	480d      	ldr	r0, [pc, #52]	@ (8000fe8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fb2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb4:	f7ff fffa 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	480c      	ldr	r0, [pc, #48]	@ (8000fec <LoopForever+0x6>)
  ldr r1, =_edata
 8000fba:	490d      	ldr	r1, [pc, #52]	@ (8000ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <LoopForever+0xe>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ffc <LoopForever+0x16>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fde:	f001 fa3b 	bl	8002458 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fe2:	f7ff feef 	bl	8000dc4 <main>

08000fe6 <LoopForever>:

LoopForever:
  b LoopForever
 8000fe6:	e7fe      	b.n	8000fe6 <LoopForever>
  ldr   r0, =_estack
 8000fe8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ff4:	08002514 	.word	0x08002514
  ldr r2, =_sbss
 8000ff8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ffc:	200003a0 	.word	0x200003a0

08001000 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC1_IRQHandler>
	...

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <HAL_InitTick+0x40>)
{
 8001008:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 800100a:	7819      	ldrb	r1, [r3, #0]
 800100c:	2900      	cmp	r1, #0
 800100e:	d101      	bne.n	8001014 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8001010:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8001012:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001014:	20fa      	movs	r0, #250	@ 0xfa
 8001016:	0080      	lsls	r0, r0, #2
 8001018:	f7ff f872 	bl	8000100 <__udivsi3>
 800101c:	4d0a      	ldr	r5, [pc, #40]	@ (8001048 <HAL_InitTick+0x44>)
 800101e:	0001      	movs	r1, r0
 8001020:	6828      	ldr	r0, [r5, #0]
 8001022:	f7ff f86d 	bl	8000100 <__udivsi3>
 8001026:	f000 f875 	bl	8001114 <HAL_SYSTICK_Config>
 800102a:	2800      	cmp	r0, #0
 800102c:	d1f0      	bne.n	8001010 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102e:	2c03      	cmp	r4, #3
 8001030:	d8ee      	bhi.n	8001010 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001032:	3801      	subs	r0, #1
 8001034:	2200      	movs	r2, #0
 8001036:	0021      	movs	r1, r4
 8001038:	f000 f842 	bl	80010c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800103c:	4b03      	ldr	r3, [pc, #12]	@ (800104c <HAL_InitTick+0x48>)
 800103e:	2000      	movs	r0, #0
 8001040:	601c      	str	r4, [r3, #0]
  return status;
 8001042:	e7e6      	b.n	8001012 <HAL_InitTick+0xe>
 8001044:	20000004 	.word	0x20000004
 8001048:	20000000 	.word	0x20000000
 800104c:	20000008 	.word	0x20000008

08001050 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	4a08      	ldr	r2, [pc, #32]	@ (8001074 <HAL_Init+0x24>)
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	6811      	ldr	r1, [r2, #0]
{
 8001058:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105a:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105e:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001060:	f7ff ffd0 	bl	8001004 <HAL_InitTick>
 8001064:	1e04      	subs	r4, r0, #0
 8001066:	d002      	beq.n	800106e <HAL_Init+0x1e>
    status = HAL_ERROR;
 8001068:	2401      	movs	r4, #1
}
 800106a:	0020      	movs	r0, r4
 800106c:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 800106e:	f7ff ff77 	bl	8000f60 <HAL_MspInit>
 8001072:	e7fa      	b.n	800106a <HAL_Init+0x1a>
 8001074:	40022000 	.word	0x40022000

08001078 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001078:	4a03      	ldr	r2, [pc, #12]	@ (8001088 <HAL_IncTick+0x10>)
 800107a:	4b04      	ldr	r3, [pc, #16]	@ (800108c <HAL_IncTick+0x14>)
 800107c:	6811      	ldr	r1, [r2, #0]
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	185b      	adds	r3, r3, r1
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	4770      	bx	lr
 8001086:	46c0      	nop			@ (mov r8, r8)
 8001088:	20000094 	.word	0x20000094
 800108c:	20000004 	.word	0x20000004

08001090 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001090:	4b01      	ldr	r3, [pc, #4]	@ (8001098 <HAL_GetTick+0x8>)
 8001092:	6818      	ldr	r0, [r3, #0]
}
 8001094:	4770      	bx	lr
 8001096:	46c0      	nop			@ (mov r8, r8)
 8001098:	20000094 	.word	0x20000094

0800109c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800109c:	b570      	push	{r4, r5, r6, lr}
 800109e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff fff6 	bl	8001090 <HAL_GetTick>
 80010a4:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	1c63      	adds	r3, r4, #1
 80010a8:	d002      	beq.n	80010b0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <HAL_Delay+0x20>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010b0:	f7ff ffee 	bl	8001090 <HAL_GetTick>
 80010b4:	1b40      	subs	r0, r0, r5
 80010b6:	42a0      	cmp	r0, r4
 80010b8:	d3fa      	bcc.n	80010b0 <HAL_Delay+0x14>
  {
  }
}
 80010ba:	bd70      	pop	{r4, r5, r6, pc}
 80010bc:	20000004 	.word	0x20000004

080010c0 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010c0:	22ff      	movs	r2, #255	@ 0xff
 80010c2:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b510      	push	{r4, lr}
 80010c6:	0014      	movs	r4, r2
 80010c8:	4003      	ands	r3, r0
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ce:	0189      	lsls	r1, r1, #6
 80010d0:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d2:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010d4:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 80010d6:	2800      	cmp	r0, #0
 80010d8:	db0b      	blt.n	80010f2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010da:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <HAL_NVIC_SetPriority+0x4c>)
 80010dc:	21c0      	movs	r1, #192	@ 0xc0
 80010de:	469c      	mov	ip, r3
 80010e0:	0880      	lsrs	r0, r0, #2
 80010e2:	0080      	lsls	r0, r0, #2
 80010e4:	4460      	add	r0, ip
 80010e6:	0089      	lsls	r1, r1, #2
 80010e8:	5843      	ldr	r3, [r0, r1]
 80010ea:	4023      	ands	r3, r4
 80010ec:	4313      	orrs	r3, r2
 80010ee:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80010f0:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010f2:	230f      	movs	r3, #15
 80010f4:	4906      	ldr	r1, [pc, #24]	@ (8001110 <HAL_NVIC_SetPriority+0x50>)
 80010f6:	4003      	ands	r3, r0
 80010f8:	468c      	mov	ip, r1
 80010fa:	3b08      	subs	r3, #8
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4463      	add	r3, ip
 8001102:	69d9      	ldr	r1, [r3, #28]
 8001104:	400c      	ands	r4, r1
 8001106:	4314      	orrs	r4, r2
 8001108:	61dc      	str	r4, [r3, #28]
 800110a:	e7f1      	b.n	80010f0 <HAL_NVIC_SetPriority+0x30>
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	2280      	movs	r2, #128	@ 0x80
 8001116:	1e43      	subs	r3, r0, #1
 8001118:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800111c:	4293      	cmp	r3, r2
 800111e:	d20e      	bcs.n	800113e <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001120:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a07      	ldr	r2, [pc, #28]	@ (8001140 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001124:	4807      	ldr	r0, [pc, #28]	@ (8001144 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001128:	6a03      	ldr	r3, [r0, #32]
 800112a:	0609      	lsls	r1, r1, #24
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	0a1b      	lsrs	r3, r3, #8
 8001130:	430b      	orrs	r3, r1
 8001132:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001136:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	3307      	adds	r3, #7
 800113c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800113e:	4770      	bx	lr
 8001140:	e000e010 	.word	0xe000e010
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	46de      	mov	lr, fp
 800114c:	4657      	mov	r7, sl
 800114e:	464e      	mov	r6, r9
 8001150:	4645      	mov	r5, r8
 8001152:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001154:	680c      	ldr	r4, [r1, #0]
{
 8001156:	468b      	mov	fp, r1
  uint32_t position = 0x00u;
 8001158:	2300      	movs	r3, #0
{
 800115a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115c:	2c00      	cmp	r4, #0
 800115e:	d068      	beq.n	8001232 <HAL_GPIO_Init+0xea>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001160:	2201      	movs	r2, #1
 8001162:	409a      	lsls	r2, r3
 8001164:	4694      	mov	ip, r2
 8001166:	4022      	ands	r2, r4
 8001168:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 800116a:	4662      	mov	r2, ip
 800116c:	4214      	tst	r4, r2
 800116e:	d05c      	beq.n	800122a <HAL_GPIO_Init+0xe2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001170:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001172:	465a      	mov	r2, fp
 8001174:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001176:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001178:	6855      	ldr	r5, [r2, #4]
 800117a:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800117c:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800117e:	402a      	ands	r2, r5
 8001180:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001182:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001184:	2e01      	cmp	r6, #1
 8001186:	d95b      	bls.n	8001240 <HAL_GPIO_Init+0xf8>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001188:	2a03      	cmp	r2, #3
 800118a:	d000      	beq.n	800118e <HAL_GPIO_Init+0x46>
 800118c:	e0ad      	b.n	80012ea <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800118e:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8001190:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001192:	9900      	ldr	r1, [sp, #0]
 8001194:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001196:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8001198:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800119a:	22c0      	movs	r2, #192	@ 0xc0
 800119c:	0292      	lsls	r2, r2, #10
 800119e:	4215      	tst	r5, r2
 80011a0:	d043      	beq.n	800122a <HAL_GPIO_Init+0xe2>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80011a2:	2703      	movs	r7, #3
 80011a4:	260f      	movs	r6, #15
 80011a6:	495d      	ldr	r1, [pc, #372]	@ (800131c <HAL_GPIO_Init+0x1d4>)
 80011a8:	401f      	ands	r7, r3
 80011aa:	468c      	mov	ip, r1
 80011ac:	00ff      	lsls	r7, r7, #3
 80011ae:	40be      	lsls	r6, r7
        temp = EXTI->EXTICR[position >> 2u];
 80011b0:	089a      	lsrs	r2, r3, #2
 80011b2:	0092      	lsls	r2, r2, #2
 80011b4:	4462      	add	r2, ip
 80011b6:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80011b8:	43b1      	bics	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80011ba:	26a0      	movs	r6, #160	@ 0xa0
 80011bc:	05f6      	lsls	r6, r6, #23
 80011be:	42b0      	cmp	r0, r6
 80011c0:	d00e      	beq.n	80011e0 <HAL_GPIO_Init+0x98>
 80011c2:	4e57      	ldr	r6, [pc, #348]	@ (8001320 <HAL_GPIO_Init+0x1d8>)
 80011c4:	42b0      	cmp	r0, r6
 80011c6:	d100      	bne.n	80011ca <HAL_GPIO_Init+0x82>
 80011c8:	e0a0      	b.n	800130c <HAL_GPIO_Init+0x1c4>
 80011ca:	4e56      	ldr	r6, [pc, #344]	@ (8001324 <HAL_GPIO_Init+0x1dc>)
 80011cc:	42b0      	cmp	r0, r6
 80011ce:	d100      	bne.n	80011d2 <HAL_GPIO_Init+0x8a>
 80011d0:	e0a0      	b.n	8001314 <HAL_GPIO_Init+0x1cc>
 80011d2:	4e55      	ldr	r6, [pc, #340]	@ (8001328 <HAL_GPIO_Init+0x1e0>)
 80011d4:	42b0      	cmp	r0, r6
 80011d6:	d100      	bne.n	80011da <HAL_GPIO_Init+0x92>
 80011d8:	e094      	b.n	8001304 <HAL_GPIO_Init+0x1bc>
 80011da:	2605      	movs	r6, #5
 80011dc:	40be      	lsls	r6, r7
 80011de:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e0:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 80011e2:	6611      	str	r1, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 80011e4:	4651      	mov	r1, sl
        temp = EXTI->RTSR1;
 80011e6:	4a4d      	ldr	r2, [pc, #308]	@ (800131c <HAL_GPIO_Init+0x1d4>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e8:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 80011ea:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR1;
 80011ec:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ee:	4235      	tst	r5, r6
 80011f0:	d000      	beq.n	80011f4 <HAL_GPIO_Init+0xac>
 80011f2:	e077      	b.n	80012e4 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 80011f4:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80011f6:	4e49      	ldr	r6, [pc, #292]	@ (800131c <HAL_GPIO_Init+0x1d4>)
 80011f8:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 80011fa:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011fc:	2680      	movs	r6, #128	@ 0x80
 80011fe:	03b6      	lsls	r6, r6, #14
 8001200:	4235      	tst	r5, r6
 8001202:	d16c      	bne.n	80012de <HAL_GPIO_Init+0x196>
        temp &= ~(iocurrent);
 8001204:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8001206:	4e45      	ldr	r6, [pc, #276]	@ (800131c <HAL_GPIO_Init+0x1d4>)
 8001208:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800120a:	2284      	movs	r2, #132	@ 0x84
 800120c:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800120e:	03af      	lsls	r7, r5, #14
 8001210:	d462      	bmi.n	80012d8 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 8001212:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8001214:	2784      	movs	r7, #132	@ 0x84
 8001216:	4e41      	ldr	r6, [pc, #260]	@ (800131c <HAL_GPIO_Init+0x1d4>)
 8001218:	51f2      	str	r2, [r6, r7]

        temp = EXTI->IMR1;
 800121a:	2280      	movs	r2, #128	@ 0x80
 800121c:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800121e:	03ed      	lsls	r5, r5, #15
 8001220:	d456      	bmi.n	80012d0 <HAL_GPIO_Init+0x188>
        temp &= ~(iocurrent);
 8001222:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8001224:	2180      	movs	r1, #128	@ 0x80
 8001226:	4d3d      	ldr	r5, [pc, #244]	@ (800131c <HAL_GPIO_Init+0x1d4>)
 8001228:	506a      	str	r2, [r5, r1]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	0022      	movs	r2, r4
      }
    }

    position++;
 800122c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122e:	40da      	lsrs	r2, r3
 8001230:	d196      	bne.n	8001160 <HAL_GPIO_Init+0x18>
  }
}
 8001232:	b003      	add	sp, #12
 8001234:	bcf0      	pop	{r4, r5, r6, r7}
 8001236:	46bb      	mov	fp, r7
 8001238:	46b2      	mov	sl, r6
 800123a:	46a9      	mov	r9, r5
 800123c:	46a0      	mov	r8, r4
 800123e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8001240:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001242:	000e      	movs	r6, r1
 8001244:	9900      	ldr	r1, [sp, #0]
 8001246:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001248:	4659      	mov	r1, fp
 800124a:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800124c:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800124e:	000e      	movs	r6, r1
 8001250:	40be      	lsls	r6, r7
 8001252:	46b0      	mov	r8, r6
 8001254:	464e      	mov	r6, r9
 8001256:	4641      	mov	r1, r8
 8001258:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 800125a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800125c:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800125e:	000e      	movs	r6, r1
 8001260:	4661      	mov	r1, ip
 8001262:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001264:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001266:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001268:	000e      	movs	r6, r1
 800126a:	2101      	movs	r1, #1
 800126c:	400e      	ands	r6, r1
 800126e:	409e      	lsls	r6, r3
 8001270:	46b4      	mov	ip, r6
 8001272:	4646      	mov	r6, r8
 8001274:	4661      	mov	r1, ip
 8001276:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 8001278:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 800127a:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800127c:	000e      	movs	r6, r1
 800127e:	9900      	ldr	r1, [sp, #0]
 8001280:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001282:	4659      	mov	r1, fp
 8001284:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001286:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001288:	000e      	movs	r6, r1
 800128a:	40be      	lsls	r6, r7
 800128c:	46b4      	mov	ip, r6
 800128e:	4646      	mov	r6, r8
 8001290:	4661      	mov	r1, ip
 8001292:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 8001294:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001296:	2a02      	cmp	r2, #2
 8001298:	d000      	beq.n	800129c <HAL_GPIO_Init+0x154>
 800129a:	e778      	b.n	800118e <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 800129c:	08d9      	lsrs	r1, r3, #3
 800129e:	0089      	lsls	r1, r1, #2
 80012a0:	468c      	mov	ip, r1
 80012a2:	4484      	add	ip, r0
 80012a4:	4661      	mov	r1, ip
 80012a6:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012a8:	2107      	movs	r1, #7
 80012aa:	4019      	ands	r1, r3
 80012ac:	0089      	lsls	r1, r1, #2
 80012ae:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 80012b0:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012b2:	210f      	movs	r1, #15
 80012b4:	4646      	mov	r6, r8
 80012b6:	40b1      	lsls	r1, r6
 80012b8:	9e01      	ldr	r6, [sp, #4]
 80012ba:	438e      	bics	r6, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012bc:	4659      	mov	r1, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012be:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012c0:	4646      	mov	r6, r8
 80012c2:	6909      	ldr	r1, [r1, #16]
 80012c4:	40b1      	lsls	r1, r6
 80012c6:	9e01      	ldr	r6, [sp, #4]
 80012c8:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 80012ca:	4661      	mov	r1, ip
 80012cc:	620e      	str	r6, [r1, #32]
 80012ce:	e75e      	b.n	800118e <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 80012d0:	4651      	mov	r1, sl
 80012d2:	4311      	orrs	r1, r2
 80012d4:	000a      	movs	r2, r1
 80012d6:	e7a5      	b.n	8001224 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 80012d8:	4656      	mov	r6, sl
 80012da:	4332      	orrs	r2, r6
 80012dc:	e79a      	b.n	8001214 <HAL_GPIO_Init+0xcc>
          temp |= iocurrent;
 80012de:	4656      	mov	r6, sl
 80012e0:	4332      	orrs	r2, r6
 80012e2:	e790      	b.n	8001206 <HAL_GPIO_Init+0xbe>
          temp |= iocurrent;
 80012e4:	4656      	mov	r6, sl
 80012e6:	4332      	orrs	r2, r6
 80012e8:	e785      	b.n	80011f6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->PUPDR;
 80012ea:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012ec:	9e00      	ldr	r6, [sp, #0]
 80012ee:	4031      	ands	r1, r6
 80012f0:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012f2:	4659      	mov	r1, fp
 80012f4:	6889      	ldr	r1, [r1, #8]
 80012f6:	40b9      	lsls	r1, r7
 80012f8:	468c      	mov	ip, r1
 80012fa:	4641      	mov	r1, r8
 80012fc:	4666      	mov	r6, ip
 80012fe:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8001300:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001302:	e744      	b.n	800118e <HAL_GPIO_Init+0x46>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001304:	2603      	movs	r6, #3
 8001306:	40be      	lsls	r6, r7
 8001308:	4331      	orrs	r1, r6
 800130a:	e769      	b.n	80011e0 <HAL_GPIO_Init+0x98>
 800130c:	2601      	movs	r6, #1
 800130e:	40be      	lsls	r6, r7
 8001310:	4331      	orrs	r1, r6
 8001312:	e765      	b.n	80011e0 <HAL_GPIO_Init+0x98>
 8001314:	2602      	movs	r6, #2
 8001316:	40be      	lsls	r6, r7
 8001318:	4331      	orrs	r1, r6
 800131a:	e761      	b.n	80011e0 <HAL_GPIO_Init+0x98>
 800131c:	40021800 	.word	0x40021800
 8001320:	50000400 	.word	0x50000400
 8001324:	50000800 	.word	0x50000800
 8001328:	50000c00 	.word	0x50000c00

0800132c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800132c:	2a00      	cmp	r2, #0
 800132e:	d001      	beq.n	8001334 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001330:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001332:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001334:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8001336:	e7fc      	b.n	8001332 <HAL_GPIO_WritePin+0x6>

08001338 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001338:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800133a:	4c13      	ldr	r4, [pc, #76]	@ (8001388 <HAL_PWREx_ControlVoltageScaling+0x50>)
 800133c:	4a13      	ldr	r2, [pc, #76]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x54>)
 800133e:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001340:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001342:	4013      	ands	r3, r2
 8001344:	4303      	orrs	r3, r0
 8001346:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001348:	2380      	movs	r3, #128	@ 0x80
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4298      	cmp	r0, r3
 800134e:	d001      	beq.n	8001354 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8001350:	0028      	movs	r0, r5
 8001352:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001354:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8001356:	490f      	ldr	r1, [pc, #60]	@ (8001394 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	0058      	lsls	r0, r3, #1
 800135c:	18c0      	adds	r0, r0, r3
 800135e:	0040      	lsls	r0, r0, #1
 8001360:	f7fe fece 	bl	8000100 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001364:	2280      	movs	r2, #128	@ 0x80
 8001366:	6963      	ldr	r3, [r4, #20]
 8001368:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800136a:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800136c:	4213      	tst	r3, r2
 800136e:	d102      	bne.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x3e>
 8001370:	e7ee      	b.n	8001350 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8001372:	2800      	cmp	r0, #0
 8001374:	d005      	beq.n	8001382 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001376:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8001378:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800137a:	4213      	tst	r3, r2
 800137c:	d1f9      	bne.n	8001372 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 800137e:	2500      	movs	r5, #0
 8001380:	e7e6      	b.n	8001350 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8001382:	2503      	movs	r5, #3
 8001384:	e7e4      	b.n	8001350 <HAL_PWREx_ControlVoltageScaling+0x18>
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	40007000 	.word	0x40007000
 800138c:	fffff9ff 	.word	0xfffff9ff
 8001390:	20000000 	.word	0x20000000
 8001394:	000f4240 	.word	0x000f4240

08001398 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139a:	46ce      	mov	lr, r9
 800139c:	4647      	mov	r7, r8
 800139e:	b580      	push	{r7, lr}
 80013a0:	0004      	movs	r4, r0
 80013a2:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013a4:	2800      	cmp	r0, #0
 80013a6:	d027      	beq.n	80013f8 <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a8:	6803      	ldr	r3, [r0, #0]
 80013aa:	07da      	lsls	r2, r3, #31
 80013ac:	d511      	bpl.n	80013d2 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ae:	2238      	movs	r2, #56	@ 0x38
 80013b0:	49c0      	ldr	r1, [pc, #768]	@ (80016b4 <HAL_RCC_OscConfig+0x31c>)
 80013b2:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013b4:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013b6:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80013b8:	2a10      	cmp	r2, #16
 80013ba:	d100      	bne.n	80013be <HAL_RCC_OscConfig+0x26>
 80013bc:	e0cc      	b.n	8001558 <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80013be:	2a08      	cmp	r2, #8
 80013c0:	d000      	beq.n	80013c4 <HAL_RCC_OscConfig+0x2c>
 80013c2:	e0cd      	b.n	8001560 <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	4abb      	ldr	r2, [pc, #748]	@ (80016b4 <HAL_RCC_OscConfig+0x31c>)
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	0392      	lsls	r2, r2, #14
 80013ca:	d502      	bpl.n	80013d2 <HAL_RCC_OscConfig+0x3a>
 80013cc:	6862      	ldr	r2, [r4, #4]
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d012      	beq.n	80013f8 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d2:	079a      	lsls	r2, r3, #30
 80013d4:	d532      	bpl.n	800143c <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013d6:	2338      	movs	r3, #56	@ 0x38
 80013d8:	4ab6      	ldr	r2, [pc, #728]	@ (80016b4 <HAL_RCC_OscConfig+0x31c>)
 80013da:	6891      	ldr	r1, [r2, #8]
 80013dc:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013de:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80013e0:	2b10      	cmp	r3, #16
 80013e2:	d100      	bne.n	80013e6 <HAL_RCC_OscConfig+0x4e>
 80013e4:	e10b      	b.n	80015fe <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d000      	beq.n	80013ec <HAL_RCC_OscConfig+0x54>
 80013ea:	e10d      	b.n	8001608 <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ec:	6813      	ldr	r3, [r2, #0]
 80013ee:	055b      	lsls	r3, r3, #21
 80013f0:	d508      	bpl.n	8001404 <HAL_RCC_OscConfig+0x6c>
 80013f2:	68e3      	ldr	r3, [r4, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d105      	bne.n	8001404 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 80013f8:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 80013fa:	b003      	add	sp, #12
 80013fc:	bcc0      	pop	{r6, r7}
 80013fe:	46b9      	mov	r9, r7
 8001400:	46b0      	mov	r8, r6
 8001402:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001404:	6851      	ldr	r1, [r2, #4]
 8001406:	6963      	ldr	r3, [r4, #20]
 8001408:	48ab      	ldr	r0, [pc, #684]	@ (80016b8 <HAL_RCC_OscConfig+0x320>)
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	4001      	ands	r1, r0
 800140e:	430b      	orrs	r3, r1
 8001410:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001412:	4aa8      	ldr	r2, [pc, #672]	@ (80016b4 <HAL_RCC_OscConfig+0x31c>)
 8001414:	49a9      	ldr	r1, [pc, #676]	@ (80016bc <HAL_RCC_OscConfig+0x324>)
 8001416:	6813      	ldr	r3, [r2, #0]
 8001418:	400b      	ands	r3, r1
 800141a:	6921      	ldr	r1, [r4, #16]
 800141c:	430b      	orrs	r3, r1
 800141e:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001420:	6813      	ldr	r3, [r2, #0]
 8001422:	4aa7      	ldr	r2, [pc, #668]	@ (80016c0 <HAL_RCC_OscConfig+0x328>)
 8001424:	049b      	lsls	r3, r3, #18
 8001426:	0f5b      	lsrs	r3, r3, #29
 8001428:	40da      	lsrs	r2, r3
 800142a:	49a6      	ldr	r1, [pc, #664]	@ (80016c4 <HAL_RCC_OscConfig+0x32c>)
 800142c:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800142e:	4ba6      	ldr	r3, [pc, #664]	@ (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	f7ff fde7 	bl	8001004 <HAL_InitTick>
 8001436:	2800      	cmp	r0, #0
 8001438:	d1de      	bne.n	80013f8 <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	071a      	lsls	r2, r3, #28
 800143e:	d46d      	bmi.n	800151c <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001440:	075b      	lsls	r3, r3, #29
 8001442:	d545      	bpl.n	80014d0 <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001444:	2338      	movs	r3, #56	@ 0x38
 8001446:	4a9b      	ldr	r2, [pc, #620]	@ (80016b4 <HAL_RCC_OscConfig+0x31c>)
 8001448:	6891      	ldr	r1, [r2, #8]
 800144a:	400b      	ands	r3, r1
 800144c:	2b20      	cmp	r3, #32
 800144e:	d100      	bne.n	8001452 <HAL_RCC_OscConfig+0xba>
 8001450:	e0cc      	b.n	80015ec <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001452:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001454:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001456:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001458:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800145a:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800145c:	4219      	tst	r1, r3
 800145e:	d108      	bne.n	8001472 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 8001460:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001462:	4319      	orrs	r1, r3
 8001464:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8001466:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001468:	4013      	ands	r3, r2
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 800146e:	2301      	movs	r3, #1
 8001470:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001472:	2780      	movs	r7, #128	@ 0x80
 8001474:	4e95      	ldr	r6, [pc, #596]	@ (80016cc <HAL_RCC_OscConfig+0x334>)
 8001476:	007f      	lsls	r7, r7, #1
 8001478:	6833      	ldr	r3, [r6, #0]
 800147a:	423b      	tst	r3, r7
 800147c:	d100      	bne.n	8001480 <HAL_RCC_OscConfig+0xe8>
 800147e:	e0ff      	b.n	8001680 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001480:	68a3      	ldr	r3, [r4, #8]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d100      	bne.n	8001488 <HAL_RCC_OscConfig+0xf0>
 8001486:	e0e5      	b.n	8001654 <HAL_RCC_OscConfig+0x2bc>
 8001488:	2b05      	cmp	r3, #5
 800148a:	d100      	bne.n	800148e <HAL_RCC_OscConfig+0xf6>
 800148c:	e1c8      	b.n	8001820 <HAL_RCC_OscConfig+0x488>
 800148e:	2101      	movs	r1, #1
 8001490:	4e88      	ldr	r6, [pc, #544]	@ (80016b4 <HAL_RCC_OscConfig+0x31c>)
 8001492:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8001494:	438a      	bics	r2, r1
 8001496:	65f2      	str	r2, [r6, #92]	@ 0x5c
 8001498:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 800149a:	3103      	adds	r1, #3
 800149c:	438a      	bics	r2, r1
 800149e:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d000      	beq.n	80014a6 <HAL_RCC_OscConfig+0x10e>
 80014a4:	e0da      	b.n	800165c <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 80014a6:	f7ff fdf3 	bl	8001090 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014aa:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 80014ac:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014ae:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b0:	4d87      	ldr	r5, [pc, #540]	@ (80016d0 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014b2:	e005      	b.n	80014c0 <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b4:	f7ff fdec 	bl	8001090 <HAL_GetTick>
 80014b8:	1bc0      	subs	r0, r0, r7
 80014ba:	42a8      	cmp	r0, r5
 80014bc:	d900      	bls.n	80014c0 <HAL_RCC_OscConfig+0x128>
 80014be:	e0ee      	b.n	800169e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014c0:	4642      	mov	r2, r8
 80014c2:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 80014c4:	421a      	tst	r2, r3
 80014c6:	d1f5      	bne.n	80014b4 <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 80014c8:	464b      	mov	r3, r9
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d100      	bne.n	80014d0 <HAL_RCC_OscConfig+0x138>
 80014ce:	e163      	b.n	8001798 <HAL_RCC_OscConfig+0x400>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014d0:	69e3      	ldr	r3, [r4, #28]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d020      	beq.n	8001518 <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d6:	2238      	movs	r2, #56	@ 0x38
 80014d8:	4d76      	ldr	r5, [pc, #472]	@ (80016b4 <HAL_RCC_OscConfig+0x31c>)
 80014da:	68a9      	ldr	r1, [r5, #8]
 80014dc:	400a      	ands	r2, r1
 80014de:	2a10      	cmp	r2, #16
 80014e0:	d100      	bne.n	80014e4 <HAL_RCC_OscConfig+0x14c>
 80014e2:	e11d      	b.n	8001720 <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d100      	bne.n	80014ea <HAL_RCC_OscConfig+0x152>
 80014e8:	e15c      	b.n	80017a4 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_PLL_DISABLE();
 80014ea:	682b      	ldr	r3, [r5, #0]
 80014ec:	4a79      	ldr	r2, [pc, #484]	@ (80016d4 <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ee:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80014f0:	4013      	ands	r3, r2
 80014f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014f4:	f7ff fdcc 	bl	8001090 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014f8:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80014fa:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014fc:	e005      	b.n	800150a <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff fdc7 	bl	8001090 <HAL_GetTick>
 8001502:	1b00      	subs	r0, r0, r4
 8001504:	2802      	cmp	r0, #2
 8001506:	d900      	bls.n	800150a <HAL_RCC_OscConfig+0x172>
 8001508:	e0c9      	b.n	800169e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800150a:	682b      	ldr	r3, [r5, #0]
 800150c:	4233      	tst	r3, r6
 800150e:	d1f6      	bne.n	80014fe <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001510:	68eb      	ldr	r3, [r5, #12]
 8001512:	4a71      	ldr	r2, [pc, #452]	@ (80016d8 <HAL_RCC_OscConfig+0x340>)
 8001514:	4013      	ands	r3, r2
 8001516:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8001518:	2000      	movs	r0, #0
 800151a:	e76e      	b.n	80013fa <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800151c:	2238      	movs	r2, #56	@ 0x38
 800151e:	4d65      	ldr	r5, [pc, #404]	@ (80016b4 <HAL_RCC_OscConfig+0x31c>)
 8001520:	68a9      	ldr	r1, [r5, #8]
 8001522:	400a      	ands	r2, r1
 8001524:	2a18      	cmp	r2, #24
 8001526:	d043      	beq.n	80015b0 <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001528:	69a3      	ldr	r3, [r4, #24]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d100      	bne.n	8001530 <HAL_RCC_OscConfig+0x198>
 800152e:	e0b8      	b.n	80016a2 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 8001530:	2201      	movs	r2, #1
 8001532:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001534:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8001536:	4313      	orrs	r3, r2
 8001538:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800153a:	f7ff fda9 	bl	8001090 <HAL_GetTick>
 800153e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001540:	e005      	b.n	800154e <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001542:	f7ff fda5 	bl	8001090 <HAL_GetTick>
 8001546:	1b80      	subs	r0, r0, r6
 8001548:	2802      	cmp	r0, #2
 800154a:	d900      	bls.n	800154e <HAL_RCC_OscConfig+0x1b6>
 800154c:	e0a7      	b.n	800169e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800154e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001550:	421f      	tst	r7, r3
 8001552:	d0f6      	beq.n	8001542 <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001554:	6823      	ldr	r3, [r4, #0]
 8001556:	e773      	b.n	8001440 <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001558:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800155a:	0789      	lsls	r1, r1, #30
 800155c:	d100      	bne.n	8001560 <HAL_RCC_OscConfig+0x1c8>
 800155e:	e731      	b.n	80013c4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001560:	2280      	movs	r2, #128	@ 0x80
 8001562:	6863      	ldr	r3, [r4, #4]
 8001564:	0252      	lsls	r2, r2, #9
 8001566:	4293      	cmp	r3, r2
 8001568:	d02b      	beq.n	80015c2 <HAL_RCC_OscConfig+0x22a>
 800156a:	21a0      	movs	r1, #160	@ 0xa0
 800156c:	02c9      	lsls	r1, r1, #11
 800156e:	428b      	cmp	r3, r1
 8001570:	d100      	bne.n	8001574 <HAL_RCC_OscConfig+0x1dc>
 8001572:	e0fc      	b.n	800176e <HAL_RCC_OscConfig+0x3d6>
 8001574:	4d4f      	ldr	r5, [pc, #316]	@ (80016b4 <HAL_RCC_OscConfig+0x31c>)
 8001576:	4959      	ldr	r1, [pc, #356]	@ (80016dc <HAL_RCC_OscConfig+0x344>)
 8001578:	682a      	ldr	r2, [r5, #0]
 800157a:	400a      	ands	r2, r1
 800157c:	602a      	str	r2, [r5, #0]
 800157e:	682a      	ldr	r2, [r5, #0]
 8001580:	4957      	ldr	r1, [pc, #348]	@ (80016e0 <HAL_RCC_OscConfig+0x348>)
 8001582:	400a      	ands	r2, r1
 8001584:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001586:	2b00      	cmp	r3, #0
 8001588:	d11f      	bne.n	80015ca <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 800158a:	f7ff fd81 	bl	8001090 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800158e:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001590:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001592:	02bf      	lsls	r7, r7, #10
 8001594:	e004      	b.n	80015a0 <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001596:	f7ff fd7b 	bl	8001090 <HAL_GetTick>
 800159a:	1b80      	subs	r0, r0, r6
 800159c:	2864      	cmp	r0, #100	@ 0x64
 800159e:	d87e      	bhi.n	800169e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015a0:	682b      	ldr	r3, [r5, #0]
 80015a2:	423b      	tst	r3, r7
 80015a4:	d1f7      	bne.n	8001596 <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	079a      	lsls	r2, r3, #30
 80015aa:	d400      	bmi.n	80015ae <HAL_RCC_OscConfig+0x216>
 80015ac:	e746      	b.n	800143c <HAL_RCC_OscConfig+0xa4>
 80015ae:	e712      	b.n	80013d6 <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80015b0:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 80015b2:	0792      	lsls	r2, r2, #30
 80015b4:	d400      	bmi.n	80015b8 <HAL_RCC_OscConfig+0x220>
 80015b6:	e743      	b.n	8001440 <HAL_RCC_OscConfig+0xa8>
 80015b8:	69a2      	ldr	r2, [r4, #24]
 80015ba:	2a00      	cmp	r2, #0
 80015bc:	d000      	beq.n	80015c0 <HAL_RCC_OscConfig+0x228>
 80015be:	e73f      	b.n	8001440 <HAL_RCC_OscConfig+0xa8>
 80015c0:	e71a      	b.n	80013f8 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c2:	4a3c      	ldr	r2, [pc, #240]	@ (80016b4 <HAL_RCC_OscConfig+0x31c>)
 80015c4:	6811      	ldr	r1, [r2, #0]
 80015c6:	430b      	orrs	r3, r1
 80015c8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80015ca:	f7ff fd61 	bl	8001090 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ce:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 80015d0:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015d2:	4f38      	ldr	r7, [pc, #224]	@ (80016b4 <HAL_RCC_OscConfig+0x31c>)
 80015d4:	02b6      	lsls	r6, r6, #10
 80015d6:	e004      	b.n	80015e2 <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fd5a 	bl	8001090 <HAL_GetTick>
 80015dc:	1b40      	subs	r0, r0, r5
 80015de:	2864      	cmp	r0, #100	@ 0x64
 80015e0:	d85d      	bhi.n	800169e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	4233      	tst	r3, r6
 80015e6:	d0f7      	beq.n	80015d8 <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	e7dd      	b.n	80015a8 <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015ec:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80015ee:	079b      	lsls	r3, r3, #30
 80015f0:	d400      	bmi.n	80015f4 <HAL_RCC_OscConfig+0x25c>
 80015f2:	e76d      	b.n	80014d0 <HAL_RCC_OscConfig+0x138>
 80015f4:	68a3      	ldr	r3, [r4, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d000      	beq.n	80015fc <HAL_RCC_OscConfig+0x264>
 80015fa:	e769      	b.n	80014d0 <HAL_RCC_OscConfig+0x138>
 80015fc:	e6fc      	b.n	80013f8 <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015fe:	3b0d      	subs	r3, #13
 8001600:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001602:	2b02      	cmp	r3, #2
 8001604:	d100      	bne.n	8001608 <HAL_RCC_OscConfig+0x270>
 8001606:	e0bc      	b.n	8001782 <HAL_RCC_OscConfig+0x3ea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001608:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800160a:	4d2a      	ldr	r5, [pc, #168]	@ (80016b4 <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800160c:	2b00      	cmp	r3, #0
 800160e:	d073      	beq.n	80016f8 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001610:	682b      	ldr	r3, [r5, #0]
 8001612:	4a2a      	ldr	r2, [pc, #168]	@ (80016bc <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001614:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001616:	4013      	ands	r3, r2
 8001618:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800161a:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800161c:	4313      	orrs	r3, r2
 800161e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8001620:	2380      	movs	r3, #128	@ 0x80
 8001622:	682a      	ldr	r2, [r5, #0]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4313      	orrs	r3, r2
 8001628:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800162a:	f7ff fd31 	bl	8001090 <HAL_GetTick>
 800162e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001630:	e004      	b.n	800163c <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fd2d 	bl	8001090 <HAL_GetTick>
 8001636:	1b80      	subs	r0, r0, r6
 8001638:	2802      	cmp	r0, #2
 800163a:	d830      	bhi.n	800169e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163c:	682b      	ldr	r3, [r5, #0]
 800163e:	423b      	tst	r3, r7
 8001640:	d0f7      	beq.n	8001632 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001642:	686a      	ldr	r2, [r5, #4]
 8001644:	6963      	ldr	r3, [r4, #20]
 8001646:	491c      	ldr	r1, [pc, #112]	@ (80016b8 <HAL_RCC_OscConfig+0x320>)
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	400a      	ands	r2, r1
 800164c:	4313      	orrs	r3, r2
 800164e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	e6f3      	b.n	800143c <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001654:	4917      	ldr	r1, [pc, #92]	@ (80016b4 <HAL_RCC_OscConfig+0x31c>)
 8001656:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 8001658:	4313      	orrs	r3, r2
 800165a:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 800165c:	f7ff fd18 	bl	8001090 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001660:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8001662:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001664:	4698      	mov	r8, r3
 8001666:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001668:	4d19      	ldr	r5, [pc, #100]	@ (80016d0 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800166a:	e004      	b.n	8001676 <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166c:	f7ff fd10 	bl	8001090 <HAL_GetTick>
 8001670:	1b80      	subs	r0, r0, r6
 8001672:	42a8      	cmp	r0, r5
 8001674:	d813      	bhi.n	800169e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001676:	4643      	mov	r3, r8
 8001678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800167a:	421f      	tst	r7, r3
 800167c:	d0f6      	beq.n	800166c <HAL_RCC_OscConfig+0x2d4>
 800167e:	e723      	b.n	80014c8 <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001680:	6833      	ldr	r3, [r6, #0]
 8001682:	433b      	orrs	r3, r7
 8001684:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001686:	f7ff fd03 	bl	8001090 <HAL_GetTick>
 800168a:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168c:	6833      	ldr	r3, [r6, #0]
 800168e:	423b      	tst	r3, r7
 8001690:	d000      	beq.n	8001694 <HAL_RCC_OscConfig+0x2fc>
 8001692:	e6f5      	b.n	8001480 <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001694:	f7ff fcfc 	bl	8001090 <HAL_GetTick>
 8001698:	1b40      	subs	r0, r0, r5
 800169a:	2802      	cmp	r0, #2
 800169c:	d9f6      	bls.n	800168c <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 800169e:	2003      	movs	r0, #3
 80016a0:	e6ab      	b.n	80013fa <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 80016a2:	2201      	movs	r2, #1
 80016a4:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a6:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 80016a8:	4393      	bics	r3, r2
 80016aa:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80016ac:	f7ff fcf0 	bl	8001090 <HAL_GetTick>
 80016b0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b2:	e01c      	b.n	80016ee <HAL_RCC_OscConfig+0x356>
 80016b4:	40021000 	.word	0x40021000
 80016b8:	ffff80ff 	.word	0xffff80ff
 80016bc:	ffffc7ff 	.word	0xffffc7ff
 80016c0:	00f42400 	.word	0x00f42400
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000008 	.word	0x20000008
 80016cc:	40007000 	.word	0x40007000
 80016d0:	00001388 	.word	0x00001388
 80016d4:	feffffff 	.word	0xfeffffff
 80016d8:	effefffc 	.word	0xeffefffc
 80016dc:	fffeffff 	.word	0xfffeffff
 80016e0:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e4:	f7ff fcd4 	bl	8001090 <HAL_GetTick>
 80016e8:	1b80      	subs	r0, r0, r6
 80016ea:	2802      	cmp	r0, #2
 80016ec:	d8d7      	bhi.n	800169e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ee:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80016f0:	421f      	tst	r7, r3
 80016f2:	d1f7      	bne.n	80016e4 <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	e6a3      	b.n	8001440 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 80016f8:	682b      	ldr	r3, [r5, #0]
 80016fa:	4a50      	ldr	r2, [pc, #320]	@ (800183c <HAL_RCC_OscConfig+0x4a4>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016fc:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 80016fe:	4013      	ands	r3, r2
 8001700:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001702:	f7ff fcc5 	bl	8001090 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001706:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8001708:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800170a:	e004      	b.n	8001716 <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff fcc0 	bl	8001090 <HAL_GetTick>
 8001710:	1b80      	subs	r0, r0, r6
 8001712:	2802      	cmp	r0, #2
 8001714:	d8c3      	bhi.n	800169e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001716:	682b      	ldr	r3, [r5, #0]
 8001718:	423b      	tst	r3, r7
 800171a:	d1f7      	bne.n	800170c <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800171c:	6823      	ldr	r3, [r4, #0]
 800171e:	e68d      	b.n	800143c <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001720:	2b01      	cmp	r3, #1
 8001722:	d100      	bne.n	8001726 <HAL_RCC_OscConfig+0x38e>
 8001724:	e668      	b.n	80013f8 <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8001728:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172a:	6a21      	ldr	r1, [r4, #32]
 800172c:	4002      	ands	r2, r0
 800172e:	428a      	cmp	r2, r1
 8001730:	d000      	beq.n	8001734 <HAL_RCC_OscConfig+0x39c>
 8001732:	e661      	b.n	80013f8 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001734:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001736:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001738:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173a:	428a      	cmp	r2, r1
 800173c:	d000      	beq.n	8001740 <HAL_RCC_OscConfig+0x3a8>
 800173e:	e65b      	b.n	80013f8 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001740:	21fe      	movs	r1, #254	@ 0xfe
 8001742:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001744:	01c9      	lsls	r1, r1, #7
 8001746:	4001      	ands	r1, r0
 8001748:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800174a:	4291      	cmp	r1, r2
 800174c:	d000      	beq.n	8001750 <HAL_RCC_OscConfig+0x3b8>
 800174e:	e653      	b.n	80013f8 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001750:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001752:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001754:	0392      	lsls	r2, r2, #14
 8001756:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001758:	428a      	cmp	r2, r1
 800175a:	d000      	beq.n	800175e <HAL_RCC_OscConfig+0x3c6>
 800175c:	e64c      	b.n	80013f8 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800175e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001760:	0f40      	lsrs	r0, r0, #29
 8001762:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001764:	1ac0      	subs	r0, r0, r3
 8001766:	1e43      	subs	r3, r0, #1
 8001768:	4198      	sbcs	r0, r3
 800176a:	b2c0      	uxtb	r0, r0
 800176c:	e645      	b.n	80013fa <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176e:	2180      	movs	r1, #128	@ 0x80
 8001770:	4b33      	ldr	r3, [pc, #204]	@ (8001840 <HAL_RCC_OscConfig+0x4a8>)
 8001772:	02c9      	lsls	r1, r1, #11
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	4301      	orrs	r1, r0
 8001778:	6019      	str	r1, [r3, #0]
 800177a:	6819      	ldr	r1, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001780:	e723      	b.n	80015ca <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001782:	6813      	ldr	r3, [r2, #0]
 8001784:	055b      	lsls	r3, r3, #21
 8001786:	d455      	bmi.n	8001834 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001788:	6851      	ldr	r1, [r2, #4]
 800178a:	6963      	ldr	r3, [r4, #20]
 800178c:	482d      	ldr	r0, [pc, #180]	@ (8001844 <HAL_RCC_OscConfig+0x4ac>)
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	4001      	ands	r1, r0
 8001792:	430b      	orrs	r3, r1
 8001794:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001796:	e64a      	b.n	800142e <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001798:	4a29      	ldr	r2, [pc, #164]	@ (8001840 <HAL_RCC_OscConfig+0x4a8>)
 800179a:	492b      	ldr	r1, [pc, #172]	@ (8001848 <HAL_RCC_OscConfig+0x4b0>)
 800179c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800179e:	400b      	ands	r3, r1
 80017a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80017a2:	e695      	b.n	80014d0 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 80017a4:	682b      	ldr	r3, [r5, #0]
 80017a6:	4a29      	ldr	r2, [pc, #164]	@ (800184c <HAL_RCC_OscConfig+0x4b4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a8:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80017aa:	4013      	ands	r3, r2
 80017ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017ae:	f7ff fc6f 	bl	8001090 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b2:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 80017b4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b6:	e005      	b.n	80017c4 <HAL_RCC_OscConfig+0x42c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff fc6a 	bl	8001090 <HAL_GetTick>
 80017bc:	1b80      	subs	r0, r0, r6
 80017be:	2802      	cmp	r0, #2
 80017c0:	d900      	bls.n	80017c4 <HAL_RCC_OscConfig+0x42c>
 80017c2:	e76c      	b.n	800169e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c4:	682b      	ldr	r3, [r5, #0]
 80017c6:	423b      	tst	r3, r7
 80017c8:	d1f6      	bne.n	80017b8 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ca:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80017cc:	6a23      	ldr	r3, [r4, #32]
 80017ce:	68ea      	ldr	r2, [r5, #12]
 80017d0:	430b      	orrs	r3, r1
 80017d2:	491f      	ldr	r1, [pc, #124]	@ (8001850 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d4:	4e1a      	ldr	r6, [pc, #104]	@ (8001840 <HAL_RCC_OscConfig+0x4a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d6:	400a      	ands	r2, r1
 80017d8:	4313      	orrs	r3, r2
 80017da:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80017dc:	4313      	orrs	r3, r2
 80017de:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80017e0:	4313      	orrs	r3, r2
 80017e2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80017e4:	0212      	lsls	r2, r2, #8
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80017ea:	2380      	movs	r3, #128	@ 0x80
 80017ec:	682a      	ldr	r2, [r5, #0]
 80017ee:	045b      	lsls	r3, r3, #17
 80017f0:	4313      	orrs	r3, r2
 80017f2:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80017f4:	2380      	movs	r3, #128	@ 0x80
 80017f6:	68ea      	ldr	r2, [r5, #12]
 80017f8:	055b      	lsls	r3, r3, #21
 80017fa:	4313      	orrs	r3, r2
 80017fc:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80017fe:	f7ff fc47 	bl	8001090 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001802:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001804:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001806:	04ad      	lsls	r5, r5, #18
 8001808:	e005      	b.n	8001816 <HAL_RCC_OscConfig+0x47e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180a:	f7ff fc41 	bl	8001090 <HAL_GetTick>
 800180e:	1b00      	subs	r0, r0, r4
 8001810:	2802      	cmp	r0, #2
 8001812:	d900      	bls.n	8001816 <HAL_RCC_OscConfig+0x47e>
 8001814:	e743      	b.n	800169e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001816:	6833      	ldr	r3, [r6, #0]
 8001818:	422b      	tst	r3, r5
 800181a:	d0f6      	beq.n	800180a <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 800181c:	2000      	movs	r0, #0
 800181e:	e5ec      	b.n	80013fa <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001820:	2104      	movs	r1, #4
 8001822:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <HAL_RCC_OscConfig+0x4a8>)
 8001824:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001826:	430a      	orrs	r2, r1
 8001828:	65da      	str	r2, [r3, #92]	@ 0x5c
 800182a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800182c:	3903      	subs	r1, #3
 800182e:	430a      	orrs	r2, r1
 8001830:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001832:	e713      	b.n	800165c <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001834:	68e3      	ldr	r3, [r4, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1a6      	bne.n	8001788 <HAL_RCC_OscConfig+0x3f0>
 800183a:	e5dd      	b.n	80013f8 <HAL_RCC_OscConfig+0x60>
 800183c:	fffffeff 	.word	0xfffffeff
 8001840:	40021000 	.word	0x40021000
 8001844:	ffff80ff 	.word	0xffff80ff
 8001848:	efffffff 	.word	0xefffffff
 800184c:	feffffff 	.word	0xfeffffff
 8001850:	1fc1808c 	.word	0x1fc1808c

08001854 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001854:	2338      	movs	r3, #56	@ 0x38
 8001856:	4a22      	ldr	r2, [pc, #136]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x8c>)
{
 8001858:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800185a:	6891      	ldr	r1, [r2, #8]
 800185c:	420b      	tst	r3, r1
 800185e:	d105      	bne.n	800186c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001860:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001862:	4820      	ldr	r0, [pc, #128]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001864:	049b      	lsls	r3, r3, #18
 8001866:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001868:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 800186a:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800186c:	6891      	ldr	r1, [r2, #8]
 800186e:	4019      	ands	r1, r3
 8001870:	2908      	cmp	r1, #8
 8001872:	d014      	beq.n	800189e <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001874:	6891      	ldr	r1, [r2, #8]
 8001876:	4019      	ands	r1, r3
 8001878:	2910      	cmp	r1, #16
 800187a:	d012      	beq.n	80018a2 <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800187c:	6891      	ldr	r1, [r2, #8]
 800187e:	4019      	ands	r1, r3
 8001880:	2920      	cmp	r1, #32
 8001882:	d024      	beq.n	80018ce <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001884:	6890      	ldr	r0, [r2, #8]
 8001886:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8001888:	3818      	subs	r0, #24
 800188a:	1e43      	subs	r3, r0, #1
 800188c:	4198      	sbcs	r0, r3
 800188e:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001890:	4240      	negs	r0, r0
 8001892:	4018      	ands	r0, r3
 8001894:	23fa      	movs	r3, #250	@ 0xfa
 8001896:	01db      	lsls	r3, r3, #7
 8001898:	469c      	mov	ip, r3
 800189a:	4460      	add	r0, ip
 800189c:	e7e5      	b.n	800186a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 800189e:	4813      	ldr	r0, [pc, #76]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x98>)
 80018a0:	e7e3      	b.n	800186a <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80018a2:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018a4:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80018a6:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80018a8:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018aa:	0649      	lsls	r1, r1, #25
 80018ac:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80018ae:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018b0:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80018b2:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 80018b4:	079b      	lsls	r3, r3, #30
 80018b6:	d00d      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80018b8:	480a      	ldr	r0, [pc, #40]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x90>)
 80018ba:	f7fe fc21 	bl	8000100 <__udivsi3>
 80018be:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80018c0:	4b07      	ldr	r3, [pc, #28]	@ (80018e0 <HAL_RCC_GetSysClockFreq+0x8c>)
 80018c2:	68d9      	ldr	r1, [r3, #12]
 80018c4:	0f49      	lsrs	r1, r1, #29
 80018c6:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 80018c8:	f7fe fc1a 	bl	8000100 <__udivsi3>
 80018cc:	e7cd      	b.n	800186a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 80018ce:	2080      	movs	r0, #128	@ 0x80
 80018d0:	0200      	lsls	r0, r0, #8
 80018d2:	e7ca      	b.n	800186a <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018d4:	4805      	ldr	r0, [pc, #20]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x98>)
 80018d6:	f7fe fc13 	bl	8000100 <__udivsi3>
 80018da:	4360      	muls	r0, r4
        break;
 80018dc:	e7f0      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0x6c>
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	40021000 	.word	0x40021000
 80018e4:	00f42400 	.word	0x00f42400
 80018e8:	ffff8300 	.word	0xffff8300
 80018ec:	007a1200 	.word	0x007a1200

080018f0 <HAL_RCC_ClockConfig>:
{
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	46ce      	mov	lr, r9
 80018f4:	4647      	mov	r7, r8
 80018f6:	0005      	movs	r5, r0
 80018f8:	000c      	movs	r4, r1
 80018fa:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d026      	beq.n	800194e <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001900:	2207      	movs	r2, #7
 8001902:	4e57      	ldr	r6, [pc, #348]	@ (8001a60 <HAL_RCC_ClockConfig+0x170>)
 8001904:	6833      	ldr	r3, [r6, #0]
 8001906:	4013      	ands	r3, r2
 8001908:	428b      	cmp	r3, r1
 800190a:	d35e      	bcc.n	80019ca <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800190c:	682b      	ldr	r3, [r5, #0]
 800190e:	079a      	lsls	r2, r3, #30
 8001910:	d50e      	bpl.n	8001930 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001912:	075a      	lsls	r2, r3, #29
 8001914:	d505      	bpl.n	8001922 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001916:	22e0      	movs	r2, #224	@ 0xe0
 8001918:	4952      	ldr	r1, [pc, #328]	@ (8001a64 <HAL_RCC_ClockConfig+0x174>)
 800191a:	01d2      	lsls	r2, r2, #7
 800191c:	6888      	ldr	r0, [r1, #8]
 800191e:	4302      	orrs	r2, r0
 8001920:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001922:	4950      	ldr	r1, [pc, #320]	@ (8001a64 <HAL_RCC_ClockConfig+0x174>)
 8001924:	4850      	ldr	r0, [pc, #320]	@ (8001a68 <HAL_RCC_ClockConfig+0x178>)
 8001926:	688a      	ldr	r2, [r1, #8]
 8001928:	4002      	ands	r2, r0
 800192a:	68a8      	ldr	r0, [r5, #8]
 800192c:	4302      	orrs	r2, r0
 800192e:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001930:	07db      	lsls	r3, r3, #31
 8001932:	d52b      	bpl.n	800198c <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001934:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001936:	4a4b      	ldr	r2, [pc, #300]	@ (8001a64 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001938:	2b01      	cmp	r3, #1
 800193a:	d100      	bne.n	800193e <HAL_RCC_ClockConfig+0x4e>
 800193c:	e07c      	b.n	8001a38 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800193e:	2b02      	cmp	r3, #2
 8001940:	d007      	beq.n	8001952 <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001942:	2b00      	cmp	r3, #0
 8001944:	d000      	beq.n	8001948 <HAL_RCC_ClockConfig+0x58>
 8001946:	e07d      	b.n	8001a44 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	0552      	lsls	r2, r2, #21
 800194c:	d404      	bmi.n	8001958 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800194e:	2001      	movs	r0, #1
 8001950:	e037      	b.n	80019c2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	0192      	lsls	r2, r2, #6
 8001956:	d5fa      	bpl.n	800194e <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001958:	2107      	movs	r1, #7
 800195a:	4e42      	ldr	r6, [pc, #264]	@ (8001a64 <HAL_RCC_ClockConfig+0x174>)
 800195c:	68b2      	ldr	r2, [r6, #8]
 800195e:	438a      	bics	r2, r1
 8001960:	4313      	orrs	r3, r2
 8001962:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001964:	f7ff fb94 	bl	8001090 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001968:	2338      	movs	r3, #56	@ 0x38
 800196a:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a6c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 800196e:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001970:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	e004      	b.n	800197e <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001974:	f7ff fb8c 	bl	8001090 <HAL_GetTick>
 8001978:	1bc0      	subs	r0, r0, r7
 800197a:	4548      	cmp	r0, r9
 800197c:	d83b      	bhi.n	80019f6 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	4643      	mov	r3, r8
 8001980:	68b2      	ldr	r2, [r6, #8]
 8001982:	401a      	ands	r2, r3
 8001984:	686b      	ldr	r3, [r5, #4]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	429a      	cmp	r2, r3
 800198a:	d1f3      	bne.n	8001974 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800198c:	2207      	movs	r2, #7
 800198e:	4e34      	ldr	r6, [pc, #208]	@ (8001a60 <HAL_RCC_ClockConfig+0x170>)
 8001990:	6833      	ldr	r3, [r6, #0]
 8001992:	4013      	ands	r3, r2
 8001994:	42a3      	cmp	r3, r4
 8001996:	d838      	bhi.n	8001a0a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	682b      	ldr	r3, [r5, #0]
 800199a:	075b      	lsls	r3, r3, #29
 800199c:	d42d      	bmi.n	80019fa <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800199e:	f7ff ff59 	bl	8001854 <HAL_RCC_GetSysClockFreq>
 80019a2:	4b30      	ldr	r3, [pc, #192]	@ (8001a64 <HAL_RCC_ClockConfig+0x174>)
 80019a4:	4a32      	ldr	r2, [pc, #200]	@ (8001a70 <HAL_RCC_ClockConfig+0x180>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4932      	ldr	r1, [pc, #200]	@ (8001a74 <HAL_RCC_ClockConfig+0x184>)
 80019aa:	051b      	lsls	r3, r3, #20
 80019ac:	0f1b      	lsrs	r3, r3, #28
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	589b      	ldr	r3, [r3, r2]
 80019b2:	221f      	movs	r2, #31
 80019b4:	4013      	ands	r3, r2
 80019b6:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 80019b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a78 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80019ba:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	f7ff fb21 	bl	8001004 <HAL_InitTick>
}
 80019c2:	bcc0      	pop	{r6, r7}
 80019c4:	46b9      	mov	r9, r7
 80019c6:	46b0      	mov	r8, r6
 80019c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	6833      	ldr	r3, [r6, #0]
 80019cc:	4393      	bics	r3, r2
 80019ce:	430b      	orrs	r3, r1
 80019d0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80019d2:	f7ff fb5d 	bl	8001090 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019d6:	2307      	movs	r3, #7
 80019d8:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019da:	4b24      	ldr	r3, [pc, #144]	@ (8001a6c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80019dc:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019de:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019e0:	4642      	mov	r2, r8
 80019e2:	6833      	ldr	r3, [r6, #0]
 80019e4:	4013      	ands	r3, r2
 80019e6:	42a3      	cmp	r3, r4
 80019e8:	d100      	bne.n	80019ec <HAL_RCC_ClockConfig+0xfc>
 80019ea:	e78f      	b.n	800190c <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ec:	f7ff fb50 	bl	8001090 <HAL_GetTick>
 80019f0:	1bc0      	subs	r0, r0, r7
 80019f2:	4548      	cmp	r0, r9
 80019f4:	d9f4      	bls.n	80019e0 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 80019f6:	2003      	movs	r0, #3
 80019f8:	e7e3      	b.n	80019c2 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001a64 <HAL_RCC_ClockConfig+0x174>)
 80019fc:	491f      	ldr	r1, [pc, #124]	@ (8001a7c <HAL_RCC_ClockConfig+0x18c>)
 80019fe:	6893      	ldr	r3, [r2, #8]
 8001a00:	400b      	ands	r3, r1
 8001a02:	68e9      	ldr	r1, [r5, #12]
 8001a04:	430b      	orrs	r3, r1
 8001a06:	6093      	str	r3, [r2, #8]
 8001a08:	e7c9      	b.n	800199e <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	6833      	ldr	r3, [r6, #0]
 8001a0c:	4393      	bics	r3, r2
 8001a0e:	4323      	orrs	r3, r4
 8001a10:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001a12:	f7ff fb3d 	bl	8001090 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a16:	2307      	movs	r3, #7
 8001a18:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1a:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8001a1c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1e:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a20:	4642      	mov	r2, r8
 8001a22:	6833      	ldr	r3, [r6, #0]
 8001a24:	4013      	ands	r3, r2
 8001a26:	42a3      	cmp	r3, r4
 8001a28:	d0b6      	beq.n	8001998 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2a:	f7ff fb31 	bl	8001090 <HAL_GetTick>
 8001a2e:	1bc0      	subs	r0, r0, r7
 8001a30:	4548      	cmp	r0, r9
 8001a32:	d9f5      	bls.n	8001a20 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8001a34:	2003      	movs	r0, #3
 8001a36:	e7c4      	b.n	80019c2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	0392      	lsls	r2, r2, #14
 8001a3c:	d500      	bpl.n	8001a40 <HAL_RCC_ClockConfig+0x150>
 8001a3e:	e78b      	b.n	8001958 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8001a40:	2001      	movs	r0, #1
 8001a42:	e7be      	b.n	80019c2 <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a48:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a4a:	0792      	lsls	r2, r2, #30
 8001a4c:	d500      	bpl.n	8001a50 <HAL_RCC_ClockConfig+0x160>
 8001a4e:	e783      	b.n	8001958 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8001a50:	2001      	movs	r0, #1
 8001a52:	e7b6      	b.n	80019c2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a54:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8001a56:	0792      	lsls	r2, r2, #30
 8001a58:	d500      	bpl.n	8001a5c <HAL_RCC_ClockConfig+0x16c>
 8001a5a:	e77d      	b.n	8001958 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	e7b0      	b.n	80019c2 <HAL_RCC_ClockConfig+0xd2>
 8001a60:	40022000 	.word	0x40022000
 8001a64:	40021000 	.word	0x40021000
 8001a68:	fffff0ff 	.word	0xfffff0ff
 8001a6c:	00001388 	.word	0x00001388
 8001a70:	080024cc 	.word	0x080024cc
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	ffff8fff 	.word	0xffff8fff

08001a80 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a82:	46c6      	mov	lr, r8
 8001a84:	b500      	push	{lr}
 8001a86:	000c      	movs	r4, r1
 8001a88:	0016      	movs	r6, r2
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	0007      	movs	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001a8e:	f7ff faff 	bl	8001090 <HAL_GetTick>
 8001a92:	1936      	adds	r6, r6, r4
 8001a94:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8001a96:	f7ff fafb 	bl	8001090 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a9a:	2580      	movs	r5, #128	@ 0x80
  tmp_tickstart = HAL_GetTick();
 8001a9c:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001a9e:	4b26      	ldr	r3, [pc, #152]	@ (8001b38 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	015b      	lsls	r3, r3, #5
 8001aa4:	0d1b      	lsrs	r3, r3, #20
 8001aa6:	4373      	muls	r3, r6
 8001aa8:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	e001      	b.n	8001ab2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001aae:	1c63      	adds	r3, r4, #1
 8001ab0:	d107      	bne.n	8001ac2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ab2:	6893      	ldr	r3, [r2, #8]
 8001ab4:	421d      	tst	r5, r3
 8001ab6:	d1fa      	bne.n	8001aae <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
      }
      count--;
    }
  }

  return HAL_OK;
 8001ab8:	2000      	movs	r0, #0
}
 8001aba:	b002      	add	sp, #8
 8001abc:	bc80      	pop	{r7}
 8001abe:	46b8      	mov	r8, r7
 8001ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ac2:	f7ff fae5 	bl	8001090 <HAL_GetTick>
 8001ac6:	4643      	mov	r3, r8
 8001ac8:	1ac0      	subs	r0, r0, r3
 8001aca:	42b0      	cmp	r0, r6
 8001acc:	d208      	bcs.n	8001ae0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
      if (count == 0U)
 8001ace:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001ad0:	1e5a      	subs	r2, r3, #1
 8001ad2:	4193      	sbcs	r3, r2
 8001ad4:	425b      	negs	r3, r3
 8001ad6:	401e      	ands	r6, r3
      count--;
 8001ad8:	9b01      	ldr	r3, [sp, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	e7e4      	b.n	8001aaa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ae0:	21e0      	movs	r1, #224	@ 0xe0
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	438a      	bics	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001aea:	2282      	movs	r2, #130	@ 0x82
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	0052      	lsls	r2, r2, #1
 8001af0:	4291      	cmp	r1, r2
 8001af2:	d013      	beq.n	8001b1c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001af4:	2180      	movs	r1, #128	@ 0x80
 8001af6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001af8:	0189      	lsls	r1, r1, #6
 8001afa:	428a      	cmp	r2, r1
 8001afc:	d106      	bne.n	8001b0c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
          SPI_RESET_CRC(hspi);
 8001afe:	6819      	ldr	r1, [r3, #0]
 8001b00:	480e      	ldr	r0, [pc, #56]	@ (8001b3c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8001b02:	4001      	ands	r1, r0
 8001b04:	6019      	str	r1, [r3, #0]
 8001b06:	6819      	ldr	r1, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001b0c:	235d      	movs	r3, #93	@ 0x5d
 8001b0e:	2201      	movs	r2, #1
 8001b10:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 8001b12:	2200      	movs	r2, #0
 8001b14:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8001b16:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8001b18:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8001b1a:	e7ce      	b.n	8001aba <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b1c:	2180      	movs	r1, #128	@ 0x80
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	0209      	lsls	r1, r1, #8
 8001b22:	428a      	cmp	r2, r1
 8001b24:	d003      	beq.n	8001b2e <SPI_WaitFlagStateUntilTimeout.constprop.0+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b26:	2180      	movs	r1, #128	@ 0x80
 8001b28:	00c9      	lsls	r1, r1, #3
 8001b2a:	428a      	cmp	r2, r1
 8001b2c:	d1e2      	bne.n	8001af4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
          __HAL_SPI_DISABLE(hspi);
 8001b2e:	2140      	movs	r1, #64	@ 0x40
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	438a      	bics	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	e7dd      	b.n	8001af4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	ffffdfff 	.word	0xffffdfff

08001b40 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b42:	46de      	mov	lr, fp
 8001b44:	4657      	mov	r7, sl
 8001b46:	464e      	mov	r6, r9
 8001b48:	4645      	mov	r5, r8
 8001b4a:	b5e0      	push	{r5, r6, r7, lr}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	001e      	movs	r6, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001b50:	466b      	mov	r3, sp
 8001b52:	1cdf      	adds	r7, r3, #3
 8001b54:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001b56:	0015      	movs	r5, r2
 8001b58:	4681      	mov	r9, r0
 8001b5a:	000c      	movs	r4, r1
  __IO uint8_t  tmpreg8 = 0;
 8001b5c:	703b      	strb	r3, [r7, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001b5e:	f7ff fa97 	bl	8001090 <HAL_GetTick>
 8001b62:	1976      	adds	r6, r6, r5
 8001b64:	1a33      	subs	r3, r6, r0
 8001b66:	4698      	mov	r8, r3
  tmp_tickstart = HAL_GetTick();
 8001b68:	f7ff fa92 	bl	8001090 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001b6c:	464b      	mov	r3, r9
 8001b6e:	681b      	ldr	r3, [r3, #0]
  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);

  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001b70:	26c0      	movs	r6, #192	@ 0xc0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001b72:	469a      	mov	sl, r3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001b74:	4b34      	ldr	r3, [pc, #208]	@ (8001c48 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
  tmp_tickstart = HAL_GetTick();
 8001b76:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001b78:	681b      	ldr	r3, [r3, #0]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001b7a:	00f6      	lsls	r6, r6, #3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001b7c:	009a      	lsls	r2, r3, #2
 8001b7e:	18d2      	adds	r2, r2, r3
 8001b80:	00d3      	lsls	r3, r2, #3
 8001b82:	1a9b      	subs	r3, r3, r2
 8001b84:	4642      	mov	r2, r8
 8001b86:	0d1b      	lsrs	r3, r3, #20
 8001b88:	4353      	muls	r3, r2
  while ((hspi->Instance->SR & Fifo) != State)
 8001b8a:	4652      	mov	r2, sl
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001b8c:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8001b8e:	e001      	b.n	8001b94 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8001b90:	1c6b      	adds	r3, r5, #1
 8001b92:	d10b      	bne.n	8001bac <SPI_WaitFifoStateUntilTimeout.constprop.0+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8001b94:	6893      	ldr	r3, [r2, #8]
 8001b96:	4223      	tst	r3, r4
 8001b98:	d01d      	beq.n	8001bd6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x96>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001b9a:	42b4      	cmp	r4, r6
 8001b9c:	d1f8      	bne.n	8001b90 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x50>
      tmpreg8 = *ptmpreg8;
 8001b9e:	4653      	mov	r3, sl
 8001ba0:	7b1b      	ldrb	r3, [r3, #12]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	703b      	strb	r3, [r7, #0]
      UNUSED(tmpreg8);
 8001ba6:	783b      	ldrb	r3, [r7, #0]
    if (Timeout != HAL_MAX_DELAY)
 8001ba8:	1c6b      	adds	r3, r5, #1
 8001baa:	d0f3      	beq.n	8001b94 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001bac:	f7ff fa70 	bl	8001090 <HAL_GetTick>
 8001bb0:	465b      	mov	r3, fp
 8001bb2:	1ac0      	subs	r0, r0, r3
 8001bb4:	4540      	cmp	r0, r8
 8001bb6:	d216      	bcs.n	8001be6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001bb8:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8001bba:	1e5a      	subs	r2, r3, #1
 8001bbc:	4193      	sbcs	r3, r2
 8001bbe:	4642      	mov	r2, r8
 8001bc0:	425b      	negs	r3, r3
 8001bc2:	401a      	ands	r2, r3
      }
      count--;
 8001bc4:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001bc6:	4690      	mov	r8, r2
      count--;
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001bcc:	464b      	mov	r3, r9
 8001bce:	681a      	ldr	r2, [r3, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8001bd0:	6893      	ldr	r3, [r2, #8]
 8001bd2:	4223      	tst	r3, r4
 8001bd4:	d1e1      	bne.n	8001b9a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
    }
  }

  return HAL_OK;
 8001bd6:	2000      	movs	r0, #0
}
 8001bd8:	b003      	add	sp, #12
 8001bda:	bcf0      	pop	{r4, r5, r6, r7}
 8001bdc:	46bb      	mov	fp, r7
 8001bde:	46b2      	mov	sl, r6
 8001be0:	46a9      	mov	r9, r5
 8001be2:	46a0      	mov	r8, r4
 8001be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001be6:	464b      	mov	r3, r9
 8001be8:	21e0      	movs	r1, #224	@ 0xe0
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bf0:	4649      	mov	r1, r9
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001bf2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bf4:	2282      	movs	r2, #130	@ 0x82
 8001bf6:	6849      	ldr	r1, [r1, #4]
 8001bf8:	0052      	lsls	r2, r2, #1
 8001bfa:	4291      	cmp	r1, r2
 8001bfc:	d015      	beq.n	8001c2a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001bfe:	464a      	mov	r2, r9
 8001c00:	2180      	movs	r1, #128	@ 0x80
 8001c02:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001c04:	0189      	lsls	r1, r1, #6
 8001c06:	428a      	cmp	r2, r1
 8001c08:	d106      	bne.n	8001c18 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
          SPI_RESET_CRC(hspi);
 8001c0a:	6819      	ldr	r1, [r3, #0]
 8001c0c:	480f      	ldr	r0, [pc, #60]	@ (8001c4c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x10c>)
 8001c0e:	4001      	ands	r1, r0
 8001c10:	6019      	str	r1, [r3, #0]
 8001c12:	6819      	ldr	r1, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001c18:	235d      	movs	r3, #93	@ 0x5d
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4649      	mov	r1, r9
 8001c1e:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 8001c20:	2200      	movs	r2, #0
 8001c22:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8001c24:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8001c26:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8001c28:	e7d6      	b.n	8001bd8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c2a:	464a      	mov	r2, r9
 8001c2c:	2180      	movs	r1, #128	@ 0x80
 8001c2e:	6892      	ldr	r2, [r2, #8]
 8001c30:	0209      	lsls	r1, r1, #8
 8001c32:	428a      	cmp	r2, r1
 8001c34:	d003      	beq.n	8001c3e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c36:	2180      	movs	r1, #128	@ 0x80
 8001c38:	00c9      	lsls	r1, r1, #3
 8001c3a:	428a      	cmp	r2, r1
 8001c3c:	d1df      	bne.n	8001bfe <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          __HAL_SPI_DISABLE(hspi);
 8001c3e:	2140      	movs	r1, #64	@ 0x40
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	438a      	bics	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	e7da      	b.n	8001bfe <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	ffffdfff 	.word	0xffffdfff

08001c50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c50:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001c52:	0013      	movs	r3, r2
{
 8001c54:	000d      	movs	r5, r1
 8001c56:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001c58:	000a      	movs	r2, r1
 8001c5a:	21c0      	movs	r1, #192	@ 0xc0
 8001c5c:	0149      	lsls	r1, r1, #5
{
 8001c5e:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001c60:	f7ff ff6e 	bl	8001b40 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8001c64:	2800      	cmp	r0, #0
 8001c66:	d10f      	bne.n	8001c88 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c68:	0032      	movs	r2, r6
 8001c6a:	0029      	movs	r1, r5
 8001c6c:	0020      	movs	r0, r4
 8001c6e:	f7ff ff07 	bl	8001a80 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8001c72:	2800      	cmp	r0, #0
 8001c74:	d108      	bne.n	8001c88 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001c76:	21c0      	movs	r1, #192	@ 0xc0
 8001c78:	0033      	movs	r3, r6
 8001c7a:	002a      	movs	r2, r5
 8001c7c:	0020      	movs	r0, r4
 8001c7e:	00c9      	lsls	r1, r1, #3
 8001c80:	f7ff ff5e 	bl	8001b40 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8001c84:	2800      	cmp	r0, #0
 8001c86:	d004      	beq.n	8001c92 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c88:	2220      	movs	r2, #32
    return HAL_TIMEOUT;
 8001c8a:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c8c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001c92:	bd70      	pop	{r4, r5, r6, pc}

08001c94 <HAL_SPI_Init>:
{
 8001c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c96:	46de      	mov	lr, fp
 8001c98:	4657      	mov	r7, sl
 8001c9a:	464e      	mov	r6, r9
 8001c9c:	4645      	mov	r5, r8
 8001c9e:	0004      	movs	r4, r0
 8001ca0:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	d100      	bne.n	8001ca8 <HAL_SPI_Init+0x14>
 8001ca6:	e093      	b.n	8001dd0 <HAL_SPI_Init+0x13c>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ca8:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8001caa:	2d00      	cmp	r5, #0
 8001cac:	d069      	beq.n	8001d82 <HAL_SPI_Init+0xee>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cb2:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cb8:	335d      	adds	r3, #93	@ 0x5d
 8001cba:	5ce3      	ldrb	r3, [r4, r3]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d06c      	beq.n	8001d9c <HAL_SPI_Init+0x108>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001cc2:	235d      	movs	r3, #93	@ 0x5d
 8001cc4:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 8001cc6:	2140      	movs	r1, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8001cc8:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8001cca:	6822      	ldr	r2, [r4, #0]
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	438b      	bics	r3, r1
 8001cd0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cd2:	23e0      	movs	r3, #224	@ 0xe0
 8001cd4:	68e1      	ldr	r1, [r4, #12]
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4299      	cmp	r1, r3
 8001cda:	d866      	bhi.n	8001daa <HAL_SPI_Init+0x116>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001cdc:	d000      	beq.n	8001ce0 <HAL_SPI_Init+0x4c>
 8001cde:	e070      	b.n	8001dc2 <HAL_SPI_Init+0x12e>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ce0:	2380      	movs	r3, #128	@ 0x80
 8001ce2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001ce4:	019b      	lsls	r3, r3, #6
 8001ce6:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ce8:	2380      	movs	r3, #128	@ 0x80
 8001cea:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cec:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001cee:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cf0:	2682      	movs	r6, #130	@ 0x82
 8001cf2:	2784      	movs	r7, #132	@ 0x84
 8001cf4:	6863      	ldr	r3, [r4, #4]
 8001cf6:	0076      	lsls	r6, r6, #1
 8001cf8:	4033      	ands	r3, r6
 8001cfa:	68a6      	ldr	r6, [r4, #8]
 8001cfc:	023f      	lsls	r7, r7, #8
 8001cfe:	403e      	ands	r6, r7
 8001d00:	2702      	movs	r7, #2
 8001d02:	4333      	orrs	r3, r6
 8001d04:	6926      	ldr	r6, [r4, #16]
 8001d06:	69a0      	ldr	r0, [r4, #24]
 8001d08:	403e      	ands	r6, r7
 8001d0a:	4333      	orrs	r3, r6
 8001d0c:	2601      	movs	r6, #1
 8001d0e:	6967      	ldr	r7, [r4, #20]
 8001d10:	46b2      	mov	sl, r6
 8001d12:	4037      	ands	r7, r6
 8001d14:	433b      	orrs	r3, r7
 8001d16:	2780      	movs	r7, #128	@ 0x80
 8001d18:	00bf      	lsls	r7, r7, #2
 8001d1a:	4007      	ands	r7, r0
 8001d1c:	433b      	orrs	r3, r7
 8001d1e:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001d20:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d22:	46b8      	mov	r8, r7
 8001d24:	2738      	movs	r7, #56	@ 0x38
 8001d26:	46b9      	mov	r9, r7
 8001d28:	4647      	mov	r7, r8
 8001d2a:	464e      	mov	r6, r9
 8001d2c:	4037      	ands	r7, r6
 8001d2e:	6a26      	ldr	r6, [r4, #32]
 8001d30:	433b      	orrs	r3, r7
 8001d32:	46b0      	mov	r8, r6
 8001d34:	2680      	movs	r6, #128	@ 0x80
 8001d36:	4647      	mov	r7, r8
 8001d38:	4037      	ands	r7, r6
 8001d3a:	4666      	mov	r6, ip
 8001d3c:	433b      	orrs	r3, r7
 8001d3e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001d40:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d42:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001d44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001d46:	4033      	ands	r3, r6
 8001d48:	26f0      	movs	r6, #240	@ 0xf0
 8001d4a:	0136      	lsls	r6, r6, #4
 8001d4c:	4031      	ands	r1, r6
 8001d4e:	4319      	orrs	r1, r3
 8001d50:	2304      	movs	r3, #4
 8001d52:	4003      	ands	r3, r0
 8001d54:	4319      	orrs	r1, r3
 8001d56:	2310      	movs	r3, #16
 8001d58:	402b      	ands	r3, r5
 8001d5a:	4319      	orrs	r1, r3
 8001d5c:	465b      	mov	r3, fp
 8001d5e:	4319      	orrs	r1, r3
 8001d60:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d62:	69d3      	ldr	r3, [r2, #28]
 8001d64:	491d      	ldr	r1, [pc, #116]	@ (8001ddc <HAL_SPI_Init+0x148>)
  return HAL_OK;
 8001d66:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d68:	400b      	ands	r3, r1
 8001d6a:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d6c:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001d6e:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d70:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001d72:	335d      	adds	r3, #93	@ 0x5d
 8001d74:	54e2      	strb	r2, [r4, r3]
}
 8001d76:	bcf0      	pop	{r4, r5, r6, r7}
 8001d78:	46bb      	mov	fp, r7
 8001d7a:	46b2      	mov	sl, r6
 8001d7c:	46a9      	mov	r9, r5
 8001d7e:	46a0      	mov	r8, r4
 8001d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d82:	2382      	movs	r3, #130	@ 0x82
 8001d84:	6842      	ldr	r2, [r0, #4]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d093      	beq.n	8001cb4 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d8c:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d8e:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d90:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d92:	335d      	adds	r3, #93	@ 0x5d
 8001d94:	5ce3      	ldrb	r3, [r4, r3]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d192      	bne.n	8001cc2 <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 8001d9c:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8001d9e:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8001da0:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8001da2:	f7ff f8af 	bl	8000f04 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001da6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8001da8:	e78b      	b.n	8001cc2 <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001daa:	23f0      	movs	r3, #240	@ 0xf0
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	4299      	cmp	r1, r3
 8001db0:	d110      	bne.n	8001dd4 <HAL_SPI_Init+0x140>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001db2:	2380      	movs	r3, #128	@ 0x80
 8001db4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001db6:	019b      	lsls	r3, r3, #6
 8001db8:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001dba:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dbc:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001dbe:	469b      	mov	fp, r3
 8001dc0:	e796      	b.n	8001cf0 <HAL_SPI_Init+0x5c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001dc2:	2380      	movs	r3, #128	@ 0x80
 8001dc4:	015b      	lsls	r3, r3, #5
 8001dc6:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	469c      	mov	ip, r3
 8001dcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001dce:	e78f      	b.n	8001cf0 <HAL_SPI_Init+0x5c>
    return HAL_ERROR;
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	e7d0      	b.n	8001d76 <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	469b      	mov	fp, r3
 8001dd8:	e7f6      	b.n	8001dc8 <HAL_SPI_Init+0x134>
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	fffff7ff 	.word	0xfffff7ff

08001de0 <HAL_SPI_Transmit>:
{
 8001de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de2:	46ce      	mov	lr, r9
 8001de4:	4647      	mov	r7, r8
 8001de6:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8001de8:	235c      	movs	r3, #92	@ 0x5c
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8001dee:	5cc2      	ldrb	r2, [r0, r3]
{
 8001df0:	0004      	movs	r4, r0
 8001df2:	4688      	mov	r8, r1
 8001df4:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8001df6:	2a01      	cmp	r2, #1
 8001df8:	d064      	beq.n	8001ec4 <HAL_SPI_Transmit+0xe4>
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001dfe:	f7ff f947 	bl	8001090 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001e02:	225d      	movs	r2, #93	@ 0x5d
 8001e04:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 8001e06:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001e08:	b2df      	uxtb	r7, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d009      	beq.n	8001e22 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8001e0e:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 8001e10:	235c      	movs	r3, #92	@ 0x5c
 8001e12:	2200      	movs	r2, #0
 8001e14:	54e2      	strb	r2, [r4, r3]
}
 8001e16:	0038      	movs	r0, r7
 8001e18:	b003      	add	sp, #12
 8001e1a:	bcc0      	pop	{r6, r7}
 8001e1c:	46b9      	mov	r9, r7
 8001e1e:	46b0      	mov	r8, r6
 8001e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 8001e22:	4643      	mov	r3, r8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f3      	beq.n	8001e10 <HAL_SPI_Transmit+0x30>
 8001e28:	464b      	mov	r3, r9
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_SPI_Transmit+0x30>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	54a3      	strb	r3, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e32:	4642      	mov	r2, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e34:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e36:	63a2      	str	r2, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001e38:	464a      	mov	r2, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e3a:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->TxXferSize  = Size;
 8001e3c:	87a2      	strh	r2, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001e3e:	87e2      	strh	r2, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = 0U;
 8001e40:	2244      	movs	r2, #68	@ 0x44
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e42:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001e44:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 8001e46:	3202      	adds	r2, #2
 8001e48:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 8001e4a:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001e4c:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e4e:	2380      	movs	r3, #128	@ 0x80
 8001e50:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8001e52:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d05b      	beq.n	8001f12 <HAL_SPI_Transmit+0x132>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e5a:	2340      	movs	r3, #64	@ 0x40
 8001e5c:	6802      	ldr	r2, [r0, #0]
 8001e5e:	4213      	tst	r3, r2
 8001e60:	d102      	bne.n	8001e68 <HAL_SPI_Transmit+0x88>
    __HAL_SPI_ENABLE(hspi);
 8001e62:	6802      	ldr	r2, [r0, #0]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e68:	23e0      	movs	r3, #224	@ 0xe0
 8001e6a:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e6c:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d929      	bls.n	8001ec8 <HAL_SPI_Transmit+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e74:	2900      	cmp	r1, #0
 8001e76:	d061      	beq.n	8001f3c <HAL_SPI_Transmit+0x15c>
 8001e78:	464b      	mov	r3, r9
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d05e      	beq.n	8001f3c <HAL_SPI_Transmit+0x15c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e7e:	2202      	movs	r2, #2
    while (hspi->TxXferCount > 0U)
 8001e80:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e82:	4690      	mov	r8, r2
    while (hspi->TxXferCount > 0U)
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10d      	bne.n	8001ea4 <HAL_SPI_Transmit+0xc4>
 8001e88:	e063      	b.n	8001f52 <HAL_SPI_Transmit+0x172>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e8a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001e8c:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e8e:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e90:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 8001e92:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e94:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001e96:	3901      	subs	r1, #1
 8001e98:	b289      	uxth	r1, r1
 8001e9a:	87e1      	strh	r1, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8001e9c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d057      	beq.n	8001f52 <HAL_SPI_Transmit+0x172>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ea2:	6820      	ldr	r0, [r4, #0]
 8001ea4:	4642      	mov	r2, r8
 8001ea6:	6883      	ldr	r3, [r0, #8]
 8001ea8:	421a      	tst	r2, r3
 8001eaa:	d1ee      	bne.n	8001e8a <HAL_SPI_Transmit+0xaa>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eac:	f7ff f8f0 	bl	8001090 <HAL_GetTick>
 8001eb0:	1b80      	subs	r0, r0, r6
 8001eb2:	42a8      	cmp	r0, r5
 8001eb4:	d3f2      	bcc.n	8001e9c <HAL_SPI_Transmit+0xbc>
 8001eb6:	1c6b      	adds	r3, r5, #1
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_SPI_Transmit+0xbc>
          hspi->State = HAL_SPI_STATE_READY;
 8001eba:	235d      	movs	r3, #93	@ 0x5d
 8001ebc:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 8001ebe:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 8001ec0:	54e2      	strb	r2, [r4, r3]
          goto error;
 8001ec2:	e7a5      	b.n	8001e10 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8001ec4:	2702      	movs	r7, #2
 8001ec6:	e7a6      	b.n	8001e16 <HAL_SPI_Transmit+0x36>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ec8:	2900      	cmp	r1, #0
 8001eca:	d02c      	beq.n	8001f26 <HAL_SPI_Transmit+0x146>
 8001ecc:	464b      	mov	r3, r9
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d029      	beq.n	8001f26 <HAL_SPI_Transmit+0x146>
    while (hspi->TxXferCount > 0U)
 8001ed2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d03c      	beq.n	8001f52 <HAL_SPI_Transmit+0x172>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ed8:	2302      	movs	r3, #2
 8001eda:	4698      	mov	r8, r3
 8001edc:	e00c      	b.n	8001ef8 <HAL_SPI_Transmit+0x118>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ede:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001ee0:	7812      	ldrb	r2, [r2, #0]
 8001ee2:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001ee4:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ee6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001ee8:	3901      	subs	r1, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eea:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 8001eec:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eee:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001ef0:	87e1      	strh	r1, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8001ef2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d02c      	beq.n	8001f52 <HAL_SPI_Transmit+0x172>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ef8:	4641      	mov	r1, r8
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	4211      	tst	r1, r2
 8001f00:	d1ed      	bne.n	8001ede <HAL_SPI_Transmit+0xfe>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f02:	f7ff f8c5 	bl	8001090 <HAL_GetTick>
 8001f06:	1b80      	subs	r0, r0, r6
 8001f08:	42a8      	cmp	r0, r5
 8001f0a:	d3f2      	bcc.n	8001ef2 <HAL_SPI_Transmit+0x112>
 8001f0c:	1c6b      	adds	r3, r5, #1
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_SPI_Transmit+0x112>
 8001f10:	e7d3      	b.n	8001eba <HAL_SPI_Transmit+0xda>
    __HAL_SPI_DISABLE(hspi);
 8001f12:	2240      	movs	r2, #64	@ 0x40
 8001f14:	6803      	ldr	r3, [r0, #0]
 8001f16:	4393      	bics	r3, r2
 8001f18:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8001f1a:	2380      	movs	r3, #128	@ 0x80
 8001f1c:	6802      	ldr	r2, [r0, #0]
 8001f1e:	01db      	lsls	r3, r3, #7
 8001f20:	4313      	orrs	r3, r2
 8001f22:	6003      	str	r3, [r0, #0]
 8001f24:	e799      	b.n	8001e5a <HAL_SPI_Transmit+0x7a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f26:	4643      	mov	r3, r8
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	7303      	strb	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f2c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001f2e:	3301      	adds	r3, #1
 8001f30:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8001f32:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001f3a:	e7ca      	b.n	8001ed2 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f3c:	4643      	mov	r3, r8
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f42:	4643      	mov	r3, r8
 8001f44:	3302      	adds	r3, #2
 8001f46:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8001f48:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001f50:	e795      	b.n	8001e7e <HAL_SPI_Transmit+0x9e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f52:	0032      	movs	r2, r6
 8001f54:	0029      	movs	r1, r5
 8001f56:	0020      	movs	r0, r4
 8001f58:	f7ff fe7a 	bl	8001c50 <SPI_EndRxTxTransaction>
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_SPI_Transmit+0x184>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f60:	2320      	movs	r3, #32
 8001f62:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f64:	68a3      	ldr	r3, [r4, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_SPI_Transmit+0x198>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	6823      	ldr	r3, [r4, #0]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	9201      	str	r2, [sp, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f78:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d000      	beq.n	8001f80 <HAL_SPI_Transmit+0x1a0>
 8001f7e:	e747      	b.n	8001e10 <HAL_SPI_Transmit+0x30>
    hspi->State = HAL_SPI_STATE_READY;
 8001f80:	2201      	movs	r2, #1
 8001f82:	335d      	adds	r3, #93	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f84:	2700      	movs	r7, #0
    hspi->State = HAL_SPI_STATE_READY;
 8001f86:	54e2      	strb	r2, [r4, r3]
 8001f88:	e742      	b.n	8001e10 <HAL_SPI_Transmit+0x30>
 8001f8a:	46c0      	nop			@ (mov r8, r8)

08001f8c <_Z12WS2812_resetv>:

WS2812_color_t ws2812_data[WS2812_LEN];

WS2812_color_t violet = {238, 20, 255};

void WS2812_reset(){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
    static uint8_t buffer[200] = {0};
    HAL_SPI_Transmit(&hspi1, buffer, 200, 10);
 8001f90:	4904      	ldr	r1, [pc, #16]	@ (8001fa4 <_Z12WS2812_resetv+0x18>)
 8001f92:	4805      	ldr	r0, [pc, #20]	@ (8001fa8 <_Z12WS2812_resetv+0x1c>)
 8001f94:	230a      	movs	r3, #10
 8001f96:	22c8      	movs	r2, #200	@ 0xc8
 8001f98:	f7ff ff22 	bl	8001de0 <HAL_SPI_Transmit>
}
 8001f9c:	46c0      	nop			@ (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	200002d8 	.word	0x200002d8
 8001fa8:	20000030 	.word	0x20000030

08001fac <_Z11WS2812_send14WS2812_color_t>:

void WS2812_send(WS2812_color_t color){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	@ 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	6018      	str	r0, [r3, #0]
    uint8_t buffer[12];
    int i;

    i = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
    for(int j = 0; j != 4; ++j){
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fbe:	e038      	b.n	8002032 <_Z11WS2812_send14WS2812_color_t+0x86>
        buffer[4*i+j] = (color.g & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2207      	movs	r2, #7
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	4119      	asrs	r1, r3
 8001fd0:	000b      	movs	r3, r1
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d001      	beq.n	8001fdc <_Z11WS2812_send14WS2812_color_t+0x30>
 8001fd8:	21c0      	movs	r1, #192	@ 0xc0
 8001fda:	e000      	b.n	8001fde <_Z11WS2812_send14WS2812_color_t+0x32>
 8001fdc:	2180      	movs	r1, #128	@ 0x80
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	009a      	lsls	r2, r3, #2
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	18d3      	adds	r3, r2, r3
 8001fe6:	200c      	movs	r0, #12
 8001fe8:	183a      	adds	r2, r7, r0
 8001fea:	54d1      	strb	r1, [r2, r3]
        buffer[4*i+j] |= color.g & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	009a      	lsls	r2, r3, #2
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff2:	18d3      	adds	r3, r2, r3
 8001ff4:	183a      	adds	r2, r7, r0
 8001ff6:	5cd3      	ldrb	r3, [r2, r3]
 8001ff8:	b25a      	sxtb	r2, r3
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	0018      	movs	r0, r3
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	2103      	movs	r1, #3
 8002004:	1acb      	subs	r3, r1, r3
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4118      	asrs	r0, r3
 800200a:	0003      	movs	r3, r0
 800200c:	2101      	movs	r1, #1
 800200e:	400b      	ands	r3, r1
 8002010:	d001      	beq.n	8002016 <_Z11WS2812_send14WS2812_color_t+0x6a>
 8002012:	230c      	movs	r3, #12
 8002014:	e000      	b.n	8002018 <_Z11WS2812_send14WS2812_color_t+0x6c>
 8002016:	2308      	movs	r3, #8
 8002018:	4313      	orrs	r3, r2
 800201a:	b259      	sxtb	r1, r3
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	009a      	lsls	r2, r3, #2
 8002020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002022:	18d3      	adds	r3, r2, r3
 8002024:	b2c9      	uxtb	r1, r1
 8002026:	220c      	movs	r2, #12
 8002028:	18ba      	adds	r2, r7, r2
 800202a:	54d1      	strb	r1, [r2, r3]
    for(int j = 0; j != 4; ++j){
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	3301      	adds	r3, #1
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	2b04      	cmp	r3, #4
 8002036:	d1c3      	bne.n	8001fc0 <_Z11WS2812_send14WS2812_color_t+0x14>
    }
    i = 1;
 8002038:	2301      	movs	r3, #1
 800203a:	61bb      	str	r3, [r7, #24]
    for(int j = 0; j != 4; ++j){
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
 8002040:	e038      	b.n	80020b4 <_Z11WS2812_send14WS2812_color_t+0x108>
        buffer[4*i+j] = (color.r & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	785b      	ldrb	r3, [r3, #1]
 8002046:	0019      	movs	r1, r3
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	2207      	movs	r2, #7
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	4119      	asrs	r1, r3
 8002052:	000b      	movs	r3, r1
 8002054:	2201      	movs	r2, #1
 8002056:	4013      	ands	r3, r2
 8002058:	d001      	beq.n	800205e <_Z11WS2812_send14WS2812_color_t+0xb2>
 800205a:	21c0      	movs	r1, #192	@ 0xc0
 800205c:	e000      	b.n	8002060 <_Z11WS2812_send14WS2812_color_t+0xb4>
 800205e:	2180      	movs	r1, #128	@ 0x80
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	009a      	lsls	r2, r3, #2
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	18d3      	adds	r3, r2, r3
 8002068:	200c      	movs	r0, #12
 800206a:	183a      	adds	r2, r7, r0
 800206c:	54d1      	strb	r1, [r2, r3]
        buffer[4*i+j] |= color.r & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	009a      	lsls	r2, r3, #2
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	18d3      	adds	r3, r2, r3
 8002076:	183a      	adds	r2, r7, r0
 8002078:	5cd3      	ldrb	r3, [r2, r3]
 800207a:	b25a      	sxtb	r2, r3
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	785b      	ldrb	r3, [r3, #1]
 8002080:	0018      	movs	r0, r3
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	2103      	movs	r1, #3
 8002086:	1acb      	subs	r3, r1, r3
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4118      	asrs	r0, r3
 800208c:	0003      	movs	r3, r0
 800208e:	2101      	movs	r1, #1
 8002090:	400b      	ands	r3, r1
 8002092:	d001      	beq.n	8002098 <_Z11WS2812_send14WS2812_color_t+0xec>
 8002094:	230c      	movs	r3, #12
 8002096:	e000      	b.n	800209a <_Z11WS2812_send14WS2812_color_t+0xee>
 8002098:	2308      	movs	r3, #8
 800209a:	4313      	orrs	r3, r2
 800209c:	b259      	sxtb	r1, r3
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	009a      	lsls	r2, r3, #2
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	18d3      	adds	r3, r2, r3
 80020a6:	b2c9      	uxtb	r1, r1
 80020a8:	220c      	movs	r2, #12
 80020aa:	18ba      	adds	r2, r7, r2
 80020ac:	54d1      	strb	r1, [r2, r3]
    for(int j = 0; j != 4; ++j){
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	3301      	adds	r3, #1
 80020b2:	623b      	str	r3, [r7, #32]
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d1c3      	bne.n	8002042 <_Z11WS2812_send14WS2812_color_t+0x96>
    }
    i = 2;
 80020ba:	2302      	movs	r3, #2
 80020bc:	61bb      	str	r3, [r7, #24]
    for(int j = 0; j != 4; ++j){
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	e038      	b.n	8002136 <_Z11WS2812_send14WS2812_color_t+0x18a>
        buffer[4*i+j] = (color.b & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	789b      	ldrb	r3, [r3, #2]
 80020c8:	0019      	movs	r1, r3
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	2207      	movs	r2, #7
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	4119      	asrs	r1, r3
 80020d4:	000b      	movs	r3, r1
 80020d6:	2201      	movs	r2, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	d001      	beq.n	80020e0 <_Z11WS2812_send14WS2812_color_t+0x134>
 80020dc:	21c0      	movs	r1, #192	@ 0xc0
 80020de:	e000      	b.n	80020e2 <_Z11WS2812_send14WS2812_color_t+0x136>
 80020e0:	2180      	movs	r1, #128	@ 0x80
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	009a      	lsls	r2, r3, #2
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	18d3      	adds	r3, r2, r3
 80020ea:	200c      	movs	r0, #12
 80020ec:	183a      	adds	r2, r7, r0
 80020ee:	54d1      	strb	r1, [r2, r3]
        buffer[4*i+j] |= color.b & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	009a      	lsls	r2, r3, #2
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	18d3      	adds	r3, r2, r3
 80020f8:	183a      	adds	r2, r7, r0
 80020fa:	5cd3      	ldrb	r3, [r2, r3]
 80020fc:	b25a      	sxtb	r2, r3
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	789b      	ldrb	r3, [r3, #2]
 8002102:	0018      	movs	r0, r3
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2103      	movs	r1, #3
 8002108:	1acb      	subs	r3, r1, r3
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4118      	asrs	r0, r3
 800210e:	0003      	movs	r3, r0
 8002110:	2101      	movs	r1, #1
 8002112:	400b      	ands	r3, r1
 8002114:	d001      	beq.n	800211a <_Z11WS2812_send14WS2812_color_t+0x16e>
 8002116:	230c      	movs	r3, #12
 8002118:	e000      	b.n	800211c <_Z11WS2812_send14WS2812_color_t+0x170>
 800211a:	2308      	movs	r3, #8
 800211c:	4313      	orrs	r3, r2
 800211e:	b259      	sxtb	r1, r3
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	009a      	lsls	r2, r3, #2
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	18d3      	adds	r3, r2, r3
 8002128:	b2c9      	uxtb	r1, r1
 800212a:	220c      	movs	r2, #12
 800212c:	18ba      	adds	r2, r7, r2
 800212e:	54d1      	strb	r1, [r2, r3]
    for(int j = 0; j != 4; ++j){
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	3301      	adds	r3, #1
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	2b04      	cmp	r3, #4
 800213a:	d1c3      	bne.n	80020c4 <_Z11WS2812_send14WS2812_color_t+0x118>
    }

    HAL_SPI_Transmit(&hspi1, buffer, 12, 10);
 800213c:	230c      	movs	r3, #12
 800213e:	18f9      	adds	r1, r7, r3
 8002140:	4804      	ldr	r0, [pc, #16]	@ (8002154 <_Z11WS2812_send14WS2812_color_t+0x1a8>)
 8002142:	230a      	movs	r3, #10
 8002144:	220c      	movs	r2, #12
 8002146:	f7ff fe4b 	bl	8001de0 <HAL_SPI_Transmit>
}
 800214a:	46c0      	nop			@ (mov r8, r8)
 800214c:	46bd      	mov	sp, r7
 800214e:	b00a      	add	sp, #40	@ 0x28
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	20000030 	.word	0x20000030

08002158 <_Z14WS2812_Handlerv>:

void WS2812_Handler(){
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
    for(int i = 0; i < WS2812_LEN; i++){
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	e01a      	b.n	800219a <_Z14WS2812_Handlerv+0x42>
        WS2812_send(ws2812_data[i]);
 8002164:	4a11      	ldr	r2, [pc, #68]	@ (80021ac <_Z14WS2812_Handlerv+0x54>)
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	000b      	movs	r3, r1
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	185b      	adds	r3, r3, r1
 800216e:	5c99      	ldrb	r1, [r3, r2]
 8002170:	18d0      	adds	r0, r2, r3
 8002172:	7840      	ldrb	r0, [r0, #1]
 8002174:	0200      	lsls	r0, r0, #8
 8002176:	4301      	orrs	r1, r0
 8002178:	18d3      	adds	r3, r2, r3
 800217a:	789b      	ldrb	r3, [r3, #2]
 800217c:	041b      	lsls	r3, r3, #16
 800217e:	430b      	orrs	r3, r1
 8002180:	001a      	movs	r2, r3
 8002182:	2300      	movs	r3, #0
 8002184:	0212      	lsls	r2, r2, #8
 8002186:	0a12      	lsrs	r2, r2, #8
 8002188:	0e1b      	lsrs	r3, r3, #24
 800218a:	061b      	lsls	r3, r3, #24
 800218c:	4313      	orrs	r3, r2
 800218e:	0018      	movs	r0, r3
 8002190:	f7ff ff0c 	bl	8001fac <_Z11WS2812_send14WS2812_color_t>
    for(int i = 0; i < WS2812_LEN; i++){
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3301      	adds	r3, #1
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2bbf      	cmp	r3, #191	@ 0xbf
 800219e:	dde1      	ble.n	8002164 <_Z14WS2812_Handlerv+0xc>
    }
    WS2812_reset();
 80021a0:	f7ff fef4 	bl	8001f8c <_Z12WS2812_resetv>
}
 80021a4:	46c0      	nop			@ (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b002      	add	sp, #8
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000098 	.word	0x20000098

080021b0 <_Z9color_mul14WS2812_color_tf>:

#include "include.h"

//LED_Matrix led;
uint32_t delay_t = 99;
WS2812_color_t color_mul(WS2812_color_t color, float a){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	6018      	str	r0, [r3, #0]
 80021ba:	6039      	str	r1, [r7, #0]
    color.g = (int)((float)color.g * a);
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7fe f9d3 	bl	800056c <__aeabi_ui2f>
 80021c6:	1c03      	adds	r3, r0, #0
 80021c8:	6839      	ldr	r1, [r7, #0]
 80021ca:	1c18      	adds	r0, r3, #0
 80021cc:	f7fe f824 	bl	8000218 <__aeabi_fmul>
 80021d0:	1c03      	adds	r3, r0, #0
 80021d2:	1c18      	adds	r0, r3, #0
 80021d4:	f7fe f95e 	bl	8000494 <__aeabi_f2iz>
 80021d8:	0003      	movs	r3, r0
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	701a      	strb	r2, [r3, #0]
    color.r = (int)((float)color.r * a);
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	785b      	ldrb	r3, [r3, #1]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f7fe f9c1 	bl	800056c <__aeabi_ui2f>
 80021ea:	1c03      	adds	r3, r0, #0
 80021ec:	6839      	ldr	r1, [r7, #0]
 80021ee:	1c18      	adds	r0, r3, #0
 80021f0:	f7fe f812 	bl	8000218 <__aeabi_fmul>
 80021f4:	1c03      	adds	r3, r0, #0
 80021f6:	1c18      	adds	r0, r3, #0
 80021f8:	f7fe f94c 	bl	8000494 <__aeabi_f2iz>
 80021fc:	0003      	movs	r3, r0
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	705a      	strb	r2, [r3, #1]
    color.b = (int)((float)color.b * a);
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	789b      	ldrb	r3, [r3, #2]
 8002208:	0018      	movs	r0, r3
 800220a:	f7fe f9af 	bl	800056c <__aeabi_ui2f>
 800220e:	1c03      	adds	r3, r0, #0
 8002210:	6839      	ldr	r1, [r7, #0]
 8002212:	1c18      	adds	r0, r3, #0
 8002214:	f7fe f800 	bl	8000218 <__aeabi_fmul>
 8002218:	1c03      	adds	r3, r0, #0
 800221a:	1c18      	adds	r0, r3, #0
 800221c:	f7fe f93a 	bl	8000494 <__aeabi_f2iz>
 8002220:	0003      	movs	r3, r0
 8002222:	b2da      	uxtb	r2, r3
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	709a      	strb	r2, [r3, #2]
    return color;
 8002228:	200c      	movs	r0, #12
 800222a:	183b      	adds	r3, r7, r0
 800222c:	1d3a      	adds	r2, r7, #4
 800222e:	8811      	ldrh	r1, [r2, #0]
 8002230:	8019      	strh	r1, [r3, #0]
 8002232:	7892      	ldrb	r2, [r2, #2]
 8002234:	709a      	strb	r2, [r3, #2]
 8002236:	183a      	adds	r2, r7, r0
 8002238:	2300      	movs	r3, #0
 800223a:	7811      	ldrb	r1, [r2, #0]
 800223c:	20ff      	movs	r0, #255	@ 0xff
 800223e:	4001      	ands	r1, r0
 8002240:	20ff      	movs	r0, #255	@ 0xff
 8002242:	4383      	bics	r3, r0
 8002244:	430b      	orrs	r3, r1
 8002246:	7851      	ldrb	r1, [r2, #1]
 8002248:	20ff      	movs	r0, #255	@ 0xff
 800224a:	4001      	ands	r1, r0
 800224c:	0209      	lsls	r1, r1, #8
 800224e:	4807      	ldr	r0, [pc, #28]	@ (800226c <_Z9color_mul14WS2812_color_tf+0xbc>)
 8002250:	4003      	ands	r3, r0
 8002252:	430b      	orrs	r3, r1
 8002254:	7892      	ldrb	r2, [r2, #2]
 8002256:	21ff      	movs	r1, #255	@ 0xff
 8002258:	400a      	ands	r2, r1
 800225a:	0412      	lsls	r2, r2, #16
 800225c:	4904      	ldr	r1, [pc, #16]	@ (8002270 <_Z9color_mul14WS2812_color_tf+0xc0>)
 800225e:	400b      	ands	r3, r1
 8002260:	4313      	orrs	r3, r2
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b004      	add	sp, #16
 8002268:	bd80      	pop	{r7, pc}
 800226a:	46c0      	nop			@ (mov r8, r8)
 800226c:	ffff00ff 	.word	0xffff00ff
 8002270:	ff00ffff 	.word	0xff00ffff

08002274 <_Z12LED_flow_setv>:

void LED_flow_set()
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
	WS2812_color_t temp = ws2812_data[WS2812_LEN-1];
 800227a:	0039      	movs	r1, r7
 800227c:	4b17      	ldr	r3, [pc, #92]	@ (80022dc <_Z12LED_flow_setv+0x68>)
 800227e:	4a18      	ldr	r2, [pc, #96]	@ (80022e0 <_Z12LED_flow_setv+0x6c>)
 8002280:	0008      	movs	r0, r1
 8002282:	189b      	adds	r3, r3, r2
 8002284:	2203      	movs	r2, #3
 8002286:	0019      	movs	r1, r3
 8002288:	f000 f90a 	bl	80024a0 <memcpy>
	for(int i = WS2812_LEN-1; i > 0; i--)
 800228c:	23bf      	movs	r3, #191	@ 0xbf
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	e014      	b.n	80022bc <_Z12LED_flow_setv+0x48>
	{
		ws2812_data[i] = ws2812_data[i-1];
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	1e59      	subs	r1, r3, #1
 8002296:	4c11      	ldr	r4, [pc, #68]	@ (80022dc <_Z12LED_flow_setv+0x68>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	001a      	movs	r2, r3
 800229c:	0052      	lsls	r2, r2, #1
 800229e:	18d2      	adds	r2, r2, r3
 80022a0:	480e      	ldr	r0, [pc, #56]	@ (80022dc <_Z12LED_flow_setv+0x68>)
 80022a2:	000b      	movs	r3, r1
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	185b      	adds	r3, r3, r1
 80022a8:	18a4      	adds	r4, r4, r2
 80022aa:	18c3      	adds	r3, r0, r3
 80022ac:	2203      	movs	r2, #3
 80022ae:	0019      	movs	r1, r3
 80022b0:	0020      	movs	r0, r4
 80022b2:	f000 f8f5 	bl	80024a0 <memcpy>
	for(int i = WS2812_LEN-1; i > 0; i--)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	dce7      	bgt.n	8002292 <_Z12LED_flow_setv+0x1e>
	}
	ws2812_data[0] = temp;
 80022c2:	4a06      	ldr	r2, [pc, #24]	@ (80022dc <_Z12LED_flow_setv+0x68>)
 80022c4:	003b      	movs	r3, r7
 80022c6:	0010      	movs	r0, r2
 80022c8:	0019      	movs	r1, r3
 80022ca:	2303      	movs	r3, #3
 80022cc:	001a      	movs	r2, r3
 80022ce:	f000 f8e7 	bl	80024a0 <memcpy>
}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b003      	add	sp, #12
 80022d8:	bd90      	pop	{r4, r7, pc}
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	20000098 	.word	0x20000098
 80022e0:	0000023d 	.word	0x0000023d

080022e4 <setup>:

void setup(){
 80022e4:	b5b0      	push	{r4, r5, r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
    for(int i = 0; i < 24; i++){
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	e079      	b.n	80023e4 <setup+0x100>
        for(int j = 0; j < 4; j++){
 80022f0:	2300      	movs	r3, #0
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	e070      	b.n	80023d8 <setup+0xf4>
            ws2812_data[i * 8 + j] = color_mul(violet, 0.33 * (float)j);
 80022f6:	6838      	ldr	r0, [r7, #0]
 80022f8:	f7fe f8ec 	bl	80004d4 <__aeabi_i2f>
 80022fc:	1c03      	adds	r3, r0, #0
 80022fe:	1c18      	adds	r0, r3, #0
 8002300:	f7fe fc3e 	bl	8000b80 <__aeabi_f2d>
 8002304:	4a3b      	ldr	r2, [pc, #236]	@ (80023f4 <setup+0x110>)
 8002306:	4b3c      	ldr	r3, [pc, #240]	@ (80023f8 <setup+0x114>)
 8002308:	f7fe f972 	bl	80005f0 <__aeabi_dmul>
 800230c:	0002      	movs	r2, r0
 800230e:	000b      	movs	r3, r1
 8002310:	0010      	movs	r0, r2
 8002312:	0019      	movs	r1, r3
 8002314:	f7fe fc7c 	bl	8000c10 <__aeabi_d2f>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	00da      	lsls	r2, r3, #3
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	18d3      	adds	r3, r2, r3
 8002320:	4d36      	ldr	r5, [pc, #216]	@ (80023fc <setup+0x118>)
 8002322:	001c      	movs	r4, r3
 8002324:	0064      	lsls	r4, r4, #1
 8002326:	18e4      	adds	r4, r4, r3
 8002328:	4b35      	ldr	r3, [pc, #212]	@ (8002400 <setup+0x11c>)
 800232a:	781a      	ldrb	r2, [r3, #0]
 800232c:	7859      	ldrb	r1, [r3, #1]
 800232e:	0209      	lsls	r1, r1, #8
 8002330:	430a      	orrs	r2, r1
 8002332:	789b      	ldrb	r3, [r3, #2]
 8002334:	041b      	lsls	r3, r3, #16
 8002336:	431a      	orrs	r2, r3
 8002338:	2300      	movs	r3, #0
 800233a:	0212      	lsls	r2, r2, #8
 800233c:	0a12      	lsrs	r2, r2, #8
 800233e:	0e1b      	lsrs	r3, r3, #24
 8002340:	061b      	lsls	r3, r3, #24
 8002342:	4313      	orrs	r3, r2
 8002344:	1c01      	adds	r1, r0, #0
 8002346:	0018      	movs	r0, r3
 8002348:	f7ff ff32 	bl	80021b0 <_Z9color_mul14WS2812_color_tf>
 800234c:	0003      	movs	r3, r0
 800234e:	1c1a      	adds	r2, r3, #0
 8002350:	5562      	strb	r2, [r4, r5]
 8002352:	041a      	lsls	r2, r3, #16
 8002354:	0e11      	lsrs	r1, r2, #24
 8002356:	192a      	adds	r2, r5, r4
 8002358:	7051      	strb	r1, [r2, #1]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	0e1a      	lsrs	r2, r3, #24
 800235e:	192b      	adds	r3, r5, r4
 8002360:	709a      	strb	r2, [r3, #2]
            ws2812_data[(i + 1) * 8 - j - 1] = color_mul(violet, 0.33 * (float)j);
 8002362:	6838      	ldr	r0, [r7, #0]
 8002364:	f7fe f8b6 	bl	80004d4 <__aeabi_i2f>
 8002368:	1c03      	adds	r3, r0, #0
 800236a:	1c18      	adds	r0, r3, #0
 800236c:	f7fe fc08 	bl	8000b80 <__aeabi_f2d>
 8002370:	4a20      	ldr	r2, [pc, #128]	@ (80023f4 <setup+0x110>)
 8002372:	4b21      	ldr	r3, [pc, #132]	@ (80023f8 <setup+0x114>)
 8002374:	f7fe f93c 	bl	80005f0 <__aeabi_dmul>
 8002378:	0002      	movs	r2, r0
 800237a:	000b      	movs	r3, r1
 800237c:	0010      	movs	r0, r2
 800237e:	0019      	movs	r1, r3
 8002380:	f7fe fc46 	bl	8000c10 <__aeabi_d2f>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3301      	adds	r3, #1
 8002388:	00da      	lsls	r2, r3, #3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	4d1a      	ldr	r5, [pc, #104]	@ (80023fc <setup+0x118>)
 8002392:	001c      	movs	r4, r3
 8002394:	0064      	lsls	r4, r4, #1
 8002396:	18e4      	adds	r4, r4, r3
 8002398:	4b19      	ldr	r3, [pc, #100]	@ (8002400 <setup+0x11c>)
 800239a:	781a      	ldrb	r2, [r3, #0]
 800239c:	7859      	ldrb	r1, [r3, #1]
 800239e:	0209      	lsls	r1, r1, #8
 80023a0:	430a      	orrs	r2, r1
 80023a2:	789b      	ldrb	r3, [r3, #2]
 80023a4:	041b      	lsls	r3, r3, #16
 80023a6:	431a      	orrs	r2, r3
 80023a8:	2300      	movs	r3, #0
 80023aa:	0212      	lsls	r2, r2, #8
 80023ac:	0a12      	lsrs	r2, r2, #8
 80023ae:	0e1b      	lsrs	r3, r3, #24
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	4313      	orrs	r3, r2
 80023b4:	1c01      	adds	r1, r0, #0
 80023b6:	0018      	movs	r0, r3
 80023b8:	f7ff fefa 	bl	80021b0 <_Z9color_mul14WS2812_color_tf>
 80023bc:	0003      	movs	r3, r0
 80023be:	1c1a      	adds	r2, r3, #0
 80023c0:	5562      	strb	r2, [r4, r5]
 80023c2:	041a      	lsls	r2, r3, #16
 80023c4:	0e11      	lsrs	r1, r2, #24
 80023c6:	192a      	adds	r2, r5, r4
 80023c8:	7051      	strb	r1, [r2, #1]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	0e1a      	lsrs	r2, r3, #24
 80023ce:	192b      	adds	r3, r5, r4
 80023d0:	709a      	strb	r2, [r3, #2]
        for(int j = 0; j < 4; j++){
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b03      	cmp	r3, #3
 80023dc:	dd8b      	ble.n	80022f6 <setup+0x12>
    for(int i = 0; i < 24; i++){
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3301      	adds	r3, #1
 80023e2:	607b      	str	r3, [r7, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b17      	cmp	r3, #23
 80023e8:	dd82      	ble.n	80022f0 <setup+0xc>
//	for(int i = 0; i < WS2812_LEN; i++)
//	{
//		ws2812_data[i] = violet;
//	}

}
 80023ea:	46c0      	nop			@ (mov r8, r8)
 80023ec:	46c0      	nop			@ (mov r8, r8)
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b002      	add	sp, #8
 80023f2:	bdb0      	pop	{r4, r5, r7, pc}
 80023f4:	51eb851f 	.word	0x51eb851f
 80023f8:	3fd51eb8 	.word	0x3fd51eb8
 80023fc:	20000098 	.word	0x20000098
 8002400:	2000000c 	.word	0x2000000c

08002404 <loop>:

void loop(){
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	LED_flow_set();
 8002408:	f7ff ff34 	bl	8002274 <_Z12LED_flow_setv>
	HAL_Delay(delay_t);
 800240c:	4b03      	ldr	r3, [pc, #12]	@ (800241c <loop+0x18>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	0018      	movs	r0, r3
 8002412:	f7fe fe43 	bl	800109c <HAL_Delay>
}
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000010 	.word	0x20000010

08002420 <task_handler>:


void task_handler(){ //1ms中断
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
    if(HAL_GetTick() % 10 == 0) WS2812_Handler();
 8002424:	f7fe fe34 	bl	8001090 <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	210a      	movs	r1, #10
 800242c:	0018      	movs	r0, r3
 800242e:	f7fd feed 	bl	800020c <__aeabi_uidivmod>
 8002432:	000b      	movs	r3, r1
 8002434:	425a      	negs	r2, r3
 8002436:	4153      	adcs	r3, r2
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <task_handler+0x22>
 800243e:	f7ff fe8b 	bl	8002158 <_Z14WS2812_Handlerv>
}
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <memset>:
 8002448:	0003      	movs	r3, r0
 800244a:	1882      	adds	r2, r0, r2
 800244c:	4293      	cmp	r3, r2
 800244e:	d100      	bne.n	8002452 <memset+0xa>
 8002450:	4770      	bx	lr
 8002452:	7019      	strb	r1, [r3, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	e7f9      	b.n	800244c <memset+0x4>

08002458 <__libc_init_array>:
 8002458:	b570      	push	{r4, r5, r6, lr}
 800245a:	2600      	movs	r6, #0
 800245c:	4c0c      	ldr	r4, [pc, #48]	@ (8002490 <__libc_init_array+0x38>)
 800245e:	4d0d      	ldr	r5, [pc, #52]	@ (8002494 <__libc_init_array+0x3c>)
 8002460:	1b64      	subs	r4, r4, r5
 8002462:	10a4      	asrs	r4, r4, #2
 8002464:	42a6      	cmp	r6, r4
 8002466:	d109      	bne.n	800247c <__libc_init_array+0x24>
 8002468:	2600      	movs	r6, #0
 800246a:	f000 f823 	bl	80024b4 <_init>
 800246e:	4c0a      	ldr	r4, [pc, #40]	@ (8002498 <__libc_init_array+0x40>)
 8002470:	4d0a      	ldr	r5, [pc, #40]	@ (800249c <__libc_init_array+0x44>)
 8002472:	1b64      	subs	r4, r4, r5
 8002474:	10a4      	asrs	r4, r4, #2
 8002476:	42a6      	cmp	r6, r4
 8002478:	d105      	bne.n	8002486 <__libc_init_array+0x2e>
 800247a:	bd70      	pop	{r4, r5, r6, pc}
 800247c:	00b3      	lsls	r3, r6, #2
 800247e:	58eb      	ldr	r3, [r5, r3]
 8002480:	4798      	blx	r3
 8002482:	3601      	adds	r6, #1
 8002484:	e7ee      	b.n	8002464 <__libc_init_array+0xc>
 8002486:	00b3      	lsls	r3, r6, #2
 8002488:	58eb      	ldr	r3, [r5, r3]
 800248a:	4798      	blx	r3
 800248c:	3601      	adds	r6, #1
 800248e:	e7f2      	b.n	8002476 <__libc_init_array+0x1e>
 8002490:	0800250c 	.word	0x0800250c
 8002494:	0800250c 	.word	0x0800250c
 8002498:	08002510 	.word	0x08002510
 800249c:	0800250c 	.word	0x0800250c

080024a0 <memcpy>:
 80024a0:	2300      	movs	r3, #0
 80024a2:	b510      	push	{r4, lr}
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d100      	bne.n	80024aa <memcpy+0xa>
 80024a8:	bd10      	pop	{r4, pc}
 80024aa:	5ccc      	ldrb	r4, [r1, r3]
 80024ac:	54c4      	strb	r4, [r0, r3]
 80024ae:	3301      	adds	r3, #1
 80024b0:	e7f8      	b.n	80024a4 <memcpy+0x4>
	...

080024b4 <_init>:
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	46c0      	nop			@ (mov r8, r8)
 80024b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ba:	bc08      	pop	{r3}
 80024bc:	469e      	mov	lr, r3
 80024be:	4770      	bx	lr

080024c0 <_fini>:
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	46c0      	nop			@ (mov r8, r8)
 80024c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c6:	bc08      	pop	{r3}
 80024c8:	469e      	mov	lr, r3
 80024ca:	4770      	bx	lr
