
project1_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fc4  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800107c  0800107c  0000207c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010bc  080010bc  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  080010bc  080010bc  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010bc  080010bc  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010bc  080010bc  000020bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080010c0  080010c0  000020c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080010c4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080010d0  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080010d0  00003090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006887  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a6d  00000000  00000000  000098bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  0000b328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005af  00000000  00000000  0000b960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013724  00000000  00000000  0000bf0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7ae  00000000  00000000  0001f633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007849a  00000000  00000000  00029de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a227b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e9c  00000000  00000000  000a22c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000025aa  00000000  00000000  000a315c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  000a5706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08001064 	.word	0x08001064

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08001064 	.word	0x08001064

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000218:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021a:	2401      	movs	r4, #1
{
 800021c:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	2214      	movs	r2, #20
 8000220:	2100      	movs	r1, #0
 8000222:	a802      	add	r0, sp, #8
 8000224:	f000 fef2 	bl	800100c <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000228:	4b15      	ldr	r3, [pc, #84]	@ (8000280 <MX_GPIO_Init+0x68>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800022a:	25a0      	movs	r5, #160	@ 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800022c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800022e:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000230:	4322      	orrs	r2, r4
 8000232:	635a      	str	r2, [r3, #52]	@ 0x34
 8000234:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000236:	0028      	movs	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000238:	4022      	ands	r2, r4
 800023a:	9200      	str	r2, [sp, #0]
 800023c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800023e:	2202      	movs	r2, #2
 8000240:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000242:	4311      	orrs	r1, r2
 8000244:	6359      	str	r1, [r3, #52]	@ 0x34
 8000246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000248:	2170      	movs	r1, #112	@ 0x70
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800024a:	401a      	ands	r2, r3
 800024c:	9201      	str	r2, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800024e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000250:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000252:	f000 fa8b 	bl	800076c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|LED1_Pin|LED2_Pin;
 8000256:	2370      	movs	r3, #112	@ 0x70
 8000258:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025a:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800025c:	0028      	movs	r0, r5
 800025e:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000260:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000262:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000264:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000266:	f000 f98f 	bl	8000588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800026a:	2203      	movs	r2, #3
 800026c:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800026e:	4805      	ldr	r0, [pc, #20]	@ (8000284 <MX_GPIO_Init+0x6c>)
 8000270:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000272:	9202      	str	r2, [sp, #8]
 8000274:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000276:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000278:	f000 f986 	bl	8000588 <HAL_GPIO_Init>

}
 800027c:	b009      	add	sp, #36	@ 0x24
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	40021000 	.word	0x40021000
 8000284:	50000400 	.word	0x50000400

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b500      	push	{lr}
 800028a:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028c:	2234      	movs	r2, #52	@ 0x34
 800028e:	2100      	movs	r1, #0
 8000290:	a805      	add	r0, sp, #20
 8000292:	f000 febb 	bl	800100c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000296:	2210      	movs	r2, #16
 8000298:	2100      	movs	r1, #0
 800029a:	4668      	mov	r0, sp
 800029c:	f000 feb6 	bl	800100c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a0:	2080      	movs	r0, #128	@ 0x80
 80002a2:	0080      	lsls	r0, r0, #2
 80002a4:	f000 fa68 	bl	8000778 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a8:	2302      	movs	r3, #2
 80002aa:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ac:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ae:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80002b0:	330e      	adds	r3, #14
 80002b2:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 25;
 80002b4:	3309      	adds	r3, #9
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b6:	2280      	movs	r2, #128	@ 0x80
  RCC_OscInitStruct.PLL.PLLN = 25;
 80002b8:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ba:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002bc:	0052      	lsls	r2, r2, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002be:	029b      	lsls	r3, r3, #10
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002c2:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002c4:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80002c6:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002c8:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80002ca:	05db      	lsls	r3, r3, #23
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002cc:	3240      	adds	r2, #64	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d0:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80002d2:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f000 fa80 	bl	80007d8 <HAL_RCC_OscConfig>
 80002d8:	2800      	cmp	r0, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x58>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002dc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002de:	e7fe      	b.n	80002de <SystemClock_Config+0x56>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	2207      	movs	r2, #7
 80002e2:	2302      	movs	r3, #2
 80002e4:	9200      	str	r2, [sp, #0]
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	2200      	movs	r2, #0
 80002ea:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ec:	2102      	movs	r1, #2
 80002ee:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	9202      	str	r2, [sp, #8]
 80002f2:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f4:	f000 fd1c 	bl	8000d30 <HAL_RCC_ClockConfig>
 80002f8:	2800      	cmp	r0, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x78>
 80002fc:	b672      	cpsid	i
  while (1)
 80002fe:	e7fe      	b.n	80002fe <SystemClock_Config+0x76>
}
 8000300:	b013      	add	sp, #76	@ 0x4c
 8000302:	bd00      	pop	{pc}

08000304 <main>:
{
 8000304:	b510      	push	{r4, lr}
  HAL_Init();
 8000306:	f000 f8d5 	bl	80004b4 <HAL_Init>
  SystemClock_Config();
 800030a:	f7ff ffbd 	bl	8000288 <SystemClock_Config>
  MX_GPIO_Init();
 800030e:	f7ff ff83 	bl	8000218 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000312:	f000 f803 	bl	800031c <MX_SPI1_Init>
  while (1)
 8000316:	e7fe      	b.n	8000316 <main+0x12>

08000318 <Error_Handler>:
 8000318:	b672      	cpsid	i
  while (1)
 800031a:	e7fe      	b.n	800031a <Error_Handler+0x2>

0800031c <MX_SPI1_Init>:

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800031c:	22e0      	movs	r2, #224	@ 0xe0
  hspi1.Instance = SPI1;
 800031e:	4811      	ldr	r0, [pc, #68]	@ (8000364 <MX_SPI1_Init+0x48>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000320:	00d2      	lsls	r2, r2, #3
{
 8000322:	b510      	push	{r4, lr}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000324:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000326:	2201      	movs	r2, #1
  hspi1.Instance = SPI1;
 8000328:	4b0f      	ldr	r3, [pc, #60]	@ (8000368 <MX_SPI1_Init+0x4c>)
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800032a:	6142      	str	r2, [r0, #20]
  hspi1.Instance = SPI1;
 800032c:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800032e:	2382      	movs	r3, #130	@ 0x82
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000330:	2280      	movs	r2, #128	@ 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000332:	005b      	lsls	r3, r3, #1
 8000334:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000336:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000338:	0092      	lsls	r2, r2, #2
 800033a:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800033c:	3ae9      	subs	r2, #233	@ 0xe9
 800033e:	3aff      	subs	r2, #255	@ 0xff
 8000340:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8000342:	3a11      	subs	r2, #17
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000344:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000346:	6103      	str	r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000348:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800034a:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800034c:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800034e:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000350:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000352:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000354:	f000 fdb4 	bl	8000ec0 <HAL_SPI_Init>
 8000358:	2800      	cmp	r0, #0
 800035a:	d100      	bne.n	800035e <MX_SPI1_Init+0x42>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800035c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800035e:	f7ff ffdb 	bl	8000318 <Error_Handler>
}
 8000362:	e7fb      	b.n	800035c <MX_SPI1_Init+0x40>
 8000364:	20000028 	.word	0x20000028
 8000368:	40013000 	.word	0x40013000

0800036c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800036c:	b510      	push	{r4, lr}
 800036e:	0004      	movs	r4, r0
 8000370:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	2214      	movs	r2, #20
 8000374:	2100      	movs	r1, #0
 8000376:	a802      	add	r0, sp, #8
 8000378:	f000 fe48 	bl	800100c <memset>
  if(spiHandle->Instance==SPI1)
 800037c:	4b10      	ldr	r3, [pc, #64]	@ (80003c0 <HAL_SPI_MspInit+0x54>)
 800037e:	6822      	ldr	r2, [r4, #0]
 8000380:	429a      	cmp	r2, r3
 8000382:	d001      	beq.n	8000388 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000384:	b008      	add	sp, #32
 8000386:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000388:	2180      	movs	r1, #128	@ 0x80
 800038a:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <HAL_SPI_MspInit+0x58>)
 800038c:	0149      	lsls	r1, r1, #5
 800038e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000390:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000392:	430a      	orrs	r2, r1
 8000394:	641a      	str	r2, [r3, #64]	@ 0x40
 8000396:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000398:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 800039a:	400a      	ands	r2, r1
 800039c:	9200      	str	r2, [sp, #0]
 800039e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a0:	2201      	movs	r2, #1
 80003a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80003a4:	4311      	orrs	r1, r2
 80003a6:	6359      	str	r1, [r3, #52]	@ 0x34
 80003a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003aa:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	401a      	ands	r2, r3
 80003ae:	9201      	str	r2, [sp, #4]
 80003b0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SCK_Pin|DIN_Pin;
 80003b2:	2282      	movs	r2, #130	@ 0x82
 80003b4:	2302      	movs	r3, #2
 80003b6:	9202      	str	r2, [sp, #8]
 80003b8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ba:	f000 f8e5 	bl	8000588 <HAL_GPIO_Init>
}
 80003be:	e7e1      	b.n	8000384 <HAL_SPI_MspInit+0x18>
 80003c0:	40013000 	.word	0x40013000
 80003c4:	40021000 	.word	0x40021000

080003c8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c8:	2201      	movs	r2, #1
 80003ca:	4b0a      	ldr	r3, [pc, #40]	@ (80003f4 <HAL_MspInit+0x2c>)
{
 80003cc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ce:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80003d0:	4311      	orrs	r1, r2
 80003d2:	6419      	str	r1, [r3, #64]	@ 0x40
 80003d4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80003d6:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d8:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003da:	9200      	str	r2, [sp, #0]
 80003dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80003e0:	0549      	lsls	r1, r1, #21
 80003e2:	430a      	orrs	r2, r1
 80003e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80003e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003e8:	400b      	ands	r3, r1
 80003ea:	9301      	str	r3, [sp, #4]
 80003ec:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ee:	b002      	add	sp, #8
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)
 80003f4:	40021000 	.word	0x40021000

080003f8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003f8:	e7fe      	b.n	80003f8 <NMI_Handler>
 80003fa:	46c0      	nop			@ (mov r8, r8)

080003fc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003fc:	e7fe      	b.n	80003fc <HardFault_Handler>
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000408:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800040a:	f000 f867 	bl	80004dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800040e:	bd10      	pop	{r4, pc}

08000410 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000414:	480d      	ldr	r0, [pc, #52]	@ (800044c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000416:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000418:	f7ff fffa 	bl	8000410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800041c:	480c      	ldr	r0, [pc, #48]	@ (8000450 <LoopForever+0x6>)
  ldr r1, =_edata
 800041e:	490d      	ldr	r1, [pc, #52]	@ (8000454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000420:	4a0d      	ldr	r2, [pc, #52]	@ (8000458 <LoopForever+0xe>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000424:	e002      	b.n	800042c <LoopCopyDataInit>

08000426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042a:	3304      	adds	r3, #4

0800042c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800042c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000430:	d3f9      	bcc.n	8000426 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000432:	4a0a      	ldr	r2, [pc, #40]	@ (800045c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000434:	4c0a      	ldr	r4, [pc, #40]	@ (8000460 <LoopForever+0x16>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000438:	e001      	b.n	800043e <LoopFillZerobss>

0800043a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800043c:	3204      	adds	r2, #4

0800043e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000440:	d3fb      	bcc.n	800043a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000442:	f000 fdeb 	bl	800101c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000446:	f7ff ff5d 	bl	8000304 <main>

0800044a <LoopForever>:

LoopForever:
  b LoopForever
 800044a:	e7fe      	b.n	800044a <LoopForever>
  ldr   r0, =_estack
 800044c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000458:	080010c4 	.word	0x080010c4
  ldr r2, =_sbss
 800045c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000460:	20000090 	.word	0x20000090

08000464 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC1_IRQHandler>
	...

08000468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000468:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800046a:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <HAL_InitTick+0x40>)
{
 800046c:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 800046e:	7819      	ldrb	r1, [r3, #0]
 8000470:	2900      	cmp	r1, #0
 8000472:	d101      	bne.n	8000478 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8000474:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8000476:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000478:	20fa      	movs	r0, #250	@ 0xfa
 800047a:	0080      	lsls	r0, r0, #2
 800047c:	f7ff fe40 	bl	8000100 <__udivsi3>
 8000480:	4d0a      	ldr	r5, [pc, #40]	@ (80004ac <HAL_InitTick+0x44>)
 8000482:	0001      	movs	r1, r0
 8000484:	6828      	ldr	r0, [r5, #0]
 8000486:	f7ff fe3b 	bl	8000100 <__udivsi3>
 800048a:	f000 f863 	bl	8000554 <HAL_SYSTICK_Config>
 800048e:	2800      	cmp	r0, #0
 8000490:	d1f0      	bne.n	8000474 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000492:	2c03      	cmp	r4, #3
 8000494:	d8ee      	bhi.n	8000474 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000496:	3801      	subs	r0, #1
 8000498:	2200      	movs	r2, #0
 800049a:	0021      	movs	r1, r4
 800049c:	f000 f830 	bl	8000500 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004a0:	4b03      	ldr	r3, [pc, #12]	@ (80004b0 <HAL_InitTick+0x48>)
 80004a2:	2000      	movs	r0, #0
 80004a4:	601c      	str	r4, [r3, #0]
  return status;
 80004a6:	e7e6      	b.n	8000476 <HAL_InitTick+0xe>
 80004a8:	20000004 	.word	0x20000004
 80004ac:	20000000 	.word	0x20000000
 80004b0:	20000008 	.word	0x20000008

080004b4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004b4:	2380      	movs	r3, #128	@ 0x80
 80004b6:	4a08      	ldr	r2, [pc, #32]	@ (80004d8 <HAL_Init+0x24>)
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	6811      	ldr	r1, [r2, #0]
{
 80004bc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004be:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004c0:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004c2:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004c4:	f7ff ffd0 	bl	8000468 <HAL_InitTick>
 80004c8:	1e04      	subs	r4, r0, #0
 80004ca:	d002      	beq.n	80004d2 <HAL_Init+0x1e>
    status = HAL_ERROR;
 80004cc:	2401      	movs	r4, #1
}
 80004ce:	0020      	movs	r0, r4
 80004d0:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 80004d2:	f7ff ff79 	bl	80003c8 <HAL_MspInit>
 80004d6:	e7fa      	b.n	80004ce <HAL_Init+0x1a>
 80004d8:	40022000 	.word	0x40022000

080004dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80004dc:	4a03      	ldr	r2, [pc, #12]	@ (80004ec <HAL_IncTick+0x10>)
 80004de:	4b04      	ldr	r3, [pc, #16]	@ (80004f0 <HAL_IncTick+0x14>)
 80004e0:	6811      	ldr	r1, [r2, #0]
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	185b      	adds	r3, r3, r1
 80004e6:	6013      	str	r3, [r2, #0]
}
 80004e8:	4770      	bx	lr
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	2000008c 	.word	0x2000008c
 80004f0:	20000004 	.word	0x20000004

080004f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004f4:	4b01      	ldr	r3, [pc, #4]	@ (80004fc <HAL_GetTick+0x8>)
 80004f6:	6818      	ldr	r0, [r3, #0]
}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	2000008c 	.word	0x2000008c

08000500 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000500:	22ff      	movs	r2, #255	@ 0xff
 8000502:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000504:	b510      	push	{r4, lr}
 8000506:	0014      	movs	r4, r2
 8000508:	4003      	ands	r3, r0
 800050a:	00db      	lsls	r3, r3, #3
 800050c:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800050e:	0189      	lsls	r1, r1, #6
 8000510:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000512:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000514:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8000516:	2800      	cmp	r0, #0
 8000518:	db0b      	blt.n	8000532 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800051a:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <HAL_NVIC_SetPriority+0x4c>)
 800051c:	21c0      	movs	r1, #192	@ 0xc0
 800051e:	469c      	mov	ip, r3
 8000520:	0880      	lsrs	r0, r0, #2
 8000522:	0080      	lsls	r0, r0, #2
 8000524:	4460      	add	r0, ip
 8000526:	0089      	lsls	r1, r1, #2
 8000528:	5843      	ldr	r3, [r0, r1]
 800052a:	4023      	ands	r3, r4
 800052c:	4313      	orrs	r3, r2
 800052e:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000530:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000532:	230f      	movs	r3, #15
 8000534:	4906      	ldr	r1, [pc, #24]	@ (8000550 <HAL_NVIC_SetPriority+0x50>)
 8000536:	4003      	ands	r3, r0
 8000538:	468c      	mov	ip, r1
 800053a:	3b08      	subs	r3, #8
 800053c:	089b      	lsrs	r3, r3, #2
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	4463      	add	r3, ip
 8000542:	69d9      	ldr	r1, [r3, #28]
 8000544:	400c      	ands	r4, r1
 8000546:	4314      	orrs	r4, r2
 8000548:	61dc      	str	r4, [r3, #28]
 800054a:	e7f1      	b.n	8000530 <HAL_NVIC_SetPriority+0x30>
 800054c:	e000e100 	.word	0xe000e100
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000554:	2280      	movs	r2, #128	@ 0x80
 8000556:	1e43      	subs	r3, r0, #1
 8000558:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800055a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800055c:	4293      	cmp	r3, r2
 800055e:	d20e      	bcs.n	800057e <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000560:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000562:	4a07      	ldr	r2, [pc, #28]	@ (8000580 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000564:	4807      	ldr	r0, [pc, #28]	@ (8000584 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000566:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000568:	6a03      	ldr	r3, [r0, #32]
 800056a:	0609      	lsls	r1, r1, #24
 800056c:	021b      	lsls	r3, r3, #8
 800056e:	0a1b      	lsrs	r3, r3, #8
 8000570:	430b      	orrs	r3, r1
 8000572:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000574:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000576:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000578:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800057a:	3307      	adds	r3, #7
 800057c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800057e:	4770      	bx	lr
 8000580:	e000e010 	.word	0xe000e010
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	46de      	mov	lr, fp
 800058c:	4657      	mov	r7, sl
 800058e:	464e      	mov	r6, r9
 8000590:	4645      	mov	r5, r8
 8000592:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000594:	680c      	ldr	r4, [r1, #0]
{
 8000596:	468b      	mov	fp, r1
  uint32_t position = 0x00u;
 8000598:	2300      	movs	r3, #0
{
 800059a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800059c:	2c00      	cmp	r4, #0
 800059e:	d068      	beq.n	8000672 <HAL_GPIO_Init+0xea>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80005a0:	2201      	movs	r2, #1
 80005a2:	409a      	lsls	r2, r3
 80005a4:	4694      	mov	ip, r2
 80005a6:	4022      	ands	r2, r4
 80005a8:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 80005aa:	4662      	mov	r2, ip
 80005ac:	4214      	tst	r4, r2
 80005ae:	d05c      	beq.n	800066a <HAL_GPIO_Init+0xe2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80005b0:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80005b2:	465a      	mov	r2, fp
 80005b4:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80005b6:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80005b8:	6855      	ldr	r5, [r2, #4]
 80005ba:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80005bc:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80005be:	402a      	ands	r2, r5
 80005c0:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80005c2:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80005c4:	2e01      	cmp	r6, #1
 80005c6:	d95b      	bls.n	8000680 <HAL_GPIO_Init+0xf8>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80005c8:	2a03      	cmp	r2, #3
 80005ca:	d000      	beq.n	80005ce <HAL_GPIO_Init+0x46>
 80005cc:	e0ad      	b.n	800072a <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80005ce:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80005d0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80005d2:	9900      	ldr	r1, [sp, #0]
 80005d4:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80005d6:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 80005d8:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80005da:	22c0      	movs	r2, #192	@ 0xc0
 80005dc:	0292      	lsls	r2, r2, #10
 80005de:	4215      	tst	r5, r2
 80005e0:	d043      	beq.n	800066a <HAL_GPIO_Init+0xe2>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80005e2:	2703      	movs	r7, #3
 80005e4:	260f      	movs	r6, #15
 80005e6:	495d      	ldr	r1, [pc, #372]	@ (800075c <HAL_GPIO_Init+0x1d4>)
 80005e8:	401f      	ands	r7, r3
 80005ea:	468c      	mov	ip, r1
 80005ec:	00ff      	lsls	r7, r7, #3
 80005ee:	40be      	lsls	r6, r7
        temp = EXTI->EXTICR[position >> 2u];
 80005f0:	089a      	lsrs	r2, r3, #2
 80005f2:	0092      	lsls	r2, r2, #2
 80005f4:	4462      	add	r2, ip
 80005f6:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80005f8:	43b1      	bics	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80005fa:	26a0      	movs	r6, #160	@ 0xa0
 80005fc:	05f6      	lsls	r6, r6, #23
 80005fe:	42b0      	cmp	r0, r6
 8000600:	d00e      	beq.n	8000620 <HAL_GPIO_Init+0x98>
 8000602:	4e57      	ldr	r6, [pc, #348]	@ (8000760 <HAL_GPIO_Init+0x1d8>)
 8000604:	42b0      	cmp	r0, r6
 8000606:	d100      	bne.n	800060a <HAL_GPIO_Init+0x82>
 8000608:	e0a0      	b.n	800074c <HAL_GPIO_Init+0x1c4>
 800060a:	4e56      	ldr	r6, [pc, #344]	@ (8000764 <HAL_GPIO_Init+0x1dc>)
 800060c:	42b0      	cmp	r0, r6
 800060e:	d100      	bne.n	8000612 <HAL_GPIO_Init+0x8a>
 8000610:	e0a0      	b.n	8000754 <HAL_GPIO_Init+0x1cc>
 8000612:	4e55      	ldr	r6, [pc, #340]	@ (8000768 <HAL_GPIO_Init+0x1e0>)
 8000614:	42b0      	cmp	r0, r6
 8000616:	d100      	bne.n	800061a <HAL_GPIO_Init+0x92>
 8000618:	e094      	b.n	8000744 <HAL_GPIO_Init+0x1bc>
 800061a:	2605      	movs	r6, #5
 800061c:	40be      	lsls	r6, r7
 800061e:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000620:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 8000622:	6611      	str	r1, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 8000624:	4651      	mov	r1, sl
        temp = EXTI->RTSR1;
 8000626:	4a4d      	ldr	r2, [pc, #308]	@ (800075c <HAL_GPIO_Init+0x1d4>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000628:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 800062a:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR1;
 800062c:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800062e:	4235      	tst	r5, r6
 8000630:	d000      	beq.n	8000634 <HAL_GPIO_Init+0xac>
 8000632:	e077      	b.n	8000724 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8000634:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8000636:	4e49      	ldr	r6, [pc, #292]	@ (800075c <HAL_GPIO_Init+0x1d4>)
 8000638:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 800063a:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800063c:	2680      	movs	r6, #128	@ 0x80
 800063e:	03b6      	lsls	r6, r6, #14
 8000640:	4235      	tst	r5, r6
 8000642:	d16c      	bne.n	800071e <HAL_GPIO_Init+0x196>
        temp &= ~(iocurrent);
 8000644:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8000646:	4e45      	ldr	r6, [pc, #276]	@ (800075c <HAL_GPIO_Init+0x1d4>)
 8000648:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800064a:	2284      	movs	r2, #132	@ 0x84
 800064c:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800064e:	03af      	lsls	r7, r5, #14
 8000650:	d462      	bmi.n	8000718 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 8000652:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8000654:	2784      	movs	r7, #132	@ 0x84
 8000656:	4e41      	ldr	r6, [pc, #260]	@ (800075c <HAL_GPIO_Init+0x1d4>)
 8000658:	51f2      	str	r2, [r6, r7]

        temp = EXTI->IMR1;
 800065a:	2280      	movs	r2, #128	@ 0x80
 800065c:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800065e:	03ed      	lsls	r5, r5, #15
 8000660:	d456      	bmi.n	8000710 <HAL_GPIO_Init+0x188>
        temp &= ~(iocurrent);
 8000662:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8000664:	2180      	movs	r1, #128	@ 0x80
 8000666:	4d3d      	ldr	r5, [pc, #244]	@ (800075c <HAL_GPIO_Init+0x1d4>)
 8000668:	506a      	str	r2, [r5, r1]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800066a:	0022      	movs	r2, r4
      }
    }

    position++;
 800066c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800066e:	40da      	lsrs	r2, r3
 8000670:	d196      	bne.n	80005a0 <HAL_GPIO_Init+0x18>
  }
}
 8000672:	b003      	add	sp, #12
 8000674:	bcf0      	pop	{r4, r5, r6, r7}
 8000676:	46bb      	mov	fp, r7
 8000678:	46b2      	mov	sl, r6
 800067a:	46a9      	mov	r9, r5
 800067c:	46a0      	mov	r8, r4
 800067e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8000680:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000682:	000e      	movs	r6, r1
 8000684:	9900      	ldr	r1, [sp, #0]
 8000686:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000688:	4659      	mov	r1, fp
 800068a:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800068c:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800068e:	000e      	movs	r6, r1
 8000690:	40be      	lsls	r6, r7
 8000692:	46b0      	mov	r8, r6
 8000694:	464e      	mov	r6, r9
 8000696:	4641      	mov	r1, r8
 8000698:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 800069a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800069c:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800069e:	000e      	movs	r6, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006a4:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006a6:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006a8:	000e      	movs	r6, r1
 80006aa:	2101      	movs	r1, #1
 80006ac:	400e      	ands	r6, r1
 80006ae:	409e      	lsls	r6, r3
 80006b0:	46b4      	mov	ip, r6
 80006b2:	4646      	mov	r6, r8
 80006b4:	4661      	mov	r1, ip
 80006b6:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 80006b8:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80006ba:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80006bc:	000e      	movs	r6, r1
 80006be:	9900      	ldr	r1, [sp, #0]
 80006c0:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80006c2:	4659      	mov	r1, fp
 80006c4:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80006c6:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80006c8:	000e      	movs	r6, r1
 80006ca:	40be      	lsls	r6, r7
 80006cc:	46b4      	mov	ip, r6
 80006ce:	4646      	mov	r6, r8
 80006d0:	4661      	mov	r1, ip
 80006d2:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 80006d4:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80006d6:	2a02      	cmp	r2, #2
 80006d8:	d000      	beq.n	80006dc <HAL_GPIO_Init+0x154>
 80006da:	e778      	b.n	80005ce <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 80006dc:	08d9      	lsrs	r1, r3, #3
 80006de:	0089      	lsls	r1, r1, #2
 80006e0:	468c      	mov	ip, r1
 80006e2:	4484      	add	ip, r0
 80006e4:	4661      	mov	r1, ip
 80006e6:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006e8:	2107      	movs	r1, #7
 80006ea:	4019      	ands	r1, r3
 80006ec:	0089      	lsls	r1, r1, #2
 80006ee:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 80006f0:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006f2:	210f      	movs	r1, #15
 80006f4:	4646      	mov	r6, r8
 80006f6:	40b1      	lsls	r1, r6
 80006f8:	9e01      	ldr	r6, [sp, #4]
 80006fa:	438e      	bics	r6, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80006fc:	4659      	mov	r1, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006fe:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000700:	4646      	mov	r6, r8
 8000702:	6909      	ldr	r1, [r1, #16]
 8000704:	40b1      	lsls	r1, r6
 8000706:	9e01      	ldr	r6, [sp, #4]
 8000708:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 800070a:	4661      	mov	r1, ip
 800070c:	620e      	str	r6, [r1, #32]
 800070e:	e75e      	b.n	80005ce <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 8000710:	4651      	mov	r1, sl
 8000712:	4311      	orrs	r1, r2
 8000714:	000a      	movs	r2, r1
 8000716:	e7a5      	b.n	8000664 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8000718:	4656      	mov	r6, sl
 800071a:	4332      	orrs	r2, r6
 800071c:	e79a      	b.n	8000654 <HAL_GPIO_Init+0xcc>
          temp |= iocurrent;
 800071e:	4656      	mov	r6, sl
 8000720:	4332      	orrs	r2, r6
 8000722:	e790      	b.n	8000646 <HAL_GPIO_Init+0xbe>
          temp |= iocurrent;
 8000724:	4656      	mov	r6, sl
 8000726:	4332      	orrs	r2, r6
 8000728:	e785      	b.n	8000636 <HAL_GPIO_Init+0xae>
        temp = GPIOx->PUPDR;
 800072a:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800072c:	9e00      	ldr	r6, [sp, #0]
 800072e:	4031      	ands	r1, r6
 8000730:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000732:	4659      	mov	r1, fp
 8000734:	6889      	ldr	r1, [r1, #8]
 8000736:	40b9      	lsls	r1, r7
 8000738:	468c      	mov	ip, r1
 800073a:	4641      	mov	r1, r8
 800073c:	4666      	mov	r6, ip
 800073e:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8000740:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000742:	e744      	b.n	80005ce <HAL_GPIO_Init+0x46>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000744:	2603      	movs	r6, #3
 8000746:	40be      	lsls	r6, r7
 8000748:	4331      	orrs	r1, r6
 800074a:	e769      	b.n	8000620 <HAL_GPIO_Init+0x98>
 800074c:	2601      	movs	r6, #1
 800074e:	40be      	lsls	r6, r7
 8000750:	4331      	orrs	r1, r6
 8000752:	e765      	b.n	8000620 <HAL_GPIO_Init+0x98>
 8000754:	2602      	movs	r6, #2
 8000756:	40be      	lsls	r6, r7
 8000758:	4331      	orrs	r1, r6
 800075a:	e761      	b.n	8000620 <HAL_GPIO_Init+0x98>
 800075c:	40021800 	.word	0x40021800
 8000760:	50000400 	.word	0x50000400
 8000764:	50000800 	.word	0x50000800
 8000768:	50000c00 	.word	0x50000c00

0800076c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800076c:	2a00      	cmp	r2, #0
 800076e:	d001      	beq.n	8000774 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000770:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000772:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000774:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8000776:	e7fc      	b.n	8000772 <HAL_GPIO_WritePin+0x6>

08000778 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000778:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800077a:	4c13      	ldr	r4, [pc, #76]	@ (80007c8 <HAL_PWREx_ControlVoltageScaling+0x50>)
 800077c:	4a13      	ldr	r2, [pc, #76]	@ (80007cc <HAL_PWREx_ControlVoltageScaling+0x54>)
 800077e:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000780:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000782:	4013      	ands	r3, r2
 8000784:	4303      	orrs	r3, r0
 8000786:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000788:	2380      	movs	r3, #128	@ 0x80
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4298      	cmp	r0, r3
 800078e:	d001      	beq.n	8000794 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8000790:	0028      	movs	r0, r5
 8000792:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000794:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8000796:	490f      	ldr	r1, [pc, #60]	@ (80007d4 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	0058      	lsls	r0, r3, #1
 800079c:	18c0      	adds	r0, r0, r3
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	f7ff fcae 	bl	8000100 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80007a4:	2280      	movs	r2, #128	@ 0x80
 80007a6:	6963      	ldr	r3, [r4, #20]
 80007a8:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80007aa:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80007ac:	4213      	tst	r3, r2
 80007ae:	d102      	bne.n	80007b6 <HAL_PWREx_ControlVoltageScaling+0x3e>
 80007b0:	e7ee      	b.n	8000790 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 80007b2:	2800      	cmp	r0, #0
 80007b4:	d005      	beq.n	80007c2 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80007b6:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 80007b8:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80007ba:	4213      	tst	r3, r2
 80007bc:	d1f9      	bne.n	80007b2 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 80007be:	2500      	movs	r5, #0
 80007c0:	e7e6      	b.n	8000790 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 80007c2:	2503      	movs	r5, #3
 80007c4:	e7e4      	b.n	8000790 <HAL_PWREx_ControlVoltageScaling+0x18>
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	40007000 	.word	0x40007000
 80007cc:	fffff9ff 	.word	0xfffff9ff
 80007d0:	20000000 	.word	0x20000000
 80007d4:	000f4240 	.word	0x000f4240

080007d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007da:	46ce      	mov	lr, r9
 80007dc:	4647      	mov	r7, r8
 80007de:	b580      	push	{r7, lr}
 80007e0:	0004      	movs	r4, r0
 80007e2:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80007e4:	2800      	cmp	r0, #0
 80007e6:	d027      	beq.n	8000838 <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007e8:	6803      	ldr	r3, [r0, #0]
 80007ea:	07da      	lsls	r2, r3, #31
 80007ec:	d511      	bpl.n	8000812 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80007ee:	2238      	movs	r2, #56	@ 0x38
 80007f0:	49c0      	ldr	r1, [pc, #768]	@ (8000af4 <HAL_RCC_OscConfig+0x31c>)
 80007f2:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80007f4:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80007f6:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80007f8:	2a10      	cmp	r2, #16
 80007fa:	d100      	bne.n	80007fe <HAL_RCC_OscConfig+0x26>
 80007fc:	e0cc      	b.n	8000998 <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80007fe:	2a08      	cmp	r2, #8
 8000800:	d000      	beq.n	8000804 <HAL_RCC_OscConfig+0x2c>
 8000802:	e0cd      	b.n	80009a0 <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000804:	4abb      	ldr	r2, [pc, #748]	@ (8000af4 <HAL_RCC_OscConfig+0x31c>)
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	0392      	lsls	r2, r2, #14
 800080a:	d502      	bpl.n	8000812 <HAL_RCC_OscConfig+0x3a>
 800080c:	6862      	ldr	r2, [r4, #4]
 800080e:	2a00      	cmp	r2, #0
 8000810:	d012      	beq.n	8000838 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000812:	079a      	lsls	r2, r3, #30
 8000814:	d532      	bpl.n	800087c <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000816:	2338      	movs	r3, #56	@ 0x38
 8000818:	4ab6      	ldr	r2, [pc, #728]	@ (8000af4 <HAL_RCC_OscConfig+0x31c>)
 800081a:	6891      	ldr	r1, [r2, #8]
 800081c:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800081e:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000820:	2b10      	cmp	r3, #16
 8000822:	d100      	bne.n	8000826 <HAL_RCC_OscConfig+0x4e>
 8000824:	e10b      	b.n	8000a3e <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000826:	2b00      	cmp	r3, #0
 8000828:	d000      	beq.n	800082c <HAL_RCC_OscConfig+0x54>
 800082a:	e10d      	b.n	8000a48 <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800082c:	6813      	ldr	r3, [r2, #0]
 800082e:	055b      	lsls	r3, r3, #21
 8000830:	d508      	bpl.n	8000844 <HAL_RCC_OscConfig+0x6c>
 8000832:	68e3      	ldr	r3, [r4, #12]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d105      	bne.n	8000844 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8000838:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 800083a:	b003      	add	sp, #12
 800083c:	bcc0      	pop	{r6, r7}
 800083e:	46b9      	mov	r9, r7
 8000840:	46b0      	mov	r8, r6
 8000842:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000844:	6851      	ldr	r1, [r2, #4]
 8000846:	6963      	ldr	r3, [r4, #20]
 8000848:	48ab      	ldr	r0, [pc, #684]	@ (8000af8 <HAL_RCC_OscConfig+0x320>)
 800084a:	021b      	lsls	r3, r3, #8
 800084c:	4001      	ands	r1, r0
 800084e:	430b      	orrs	r3, r1
 8000850:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000852:	4aa8      	ldr	r2, [pc, #672]	@ (8000af4 <HAL_RCC_OscConfig+0x31c>)
 8000854:	49a9      	ldr	r1, [pc, #676]	@ (8000afc <HAL_RCC_OscConfig+0x324>)
 8000856:	6813      	ldr	r3, [r2, #0]
 8000858:	400b      	ands	r3, r1
 800085a:	6921      	ldr	r1, [r4, #16]
 800085c:	430b      	orrs	r3, r1
 800085e:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000860:	6813      	ldr	r3, [r2, #0]
 8000862:	4aa7      	ldr	r2, [pc, #668]	@ (8000b00 <HAL_RCC_OscConfig+0x328>)
 8000864:	049b      	lsls	r3, r3, #18
 8000866:	0f5b      	lsrs	r3, r3, #29
 8000868:	40da      	lsrs	r2, r3
 800086a:	49a6      	ldr	r1, [pc, #664]	@ (8000b04 <HAL_RCC_OscConfig+0x32c>)
 800086c:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800086e:	4ba6      	ldr	r3, [pc, #664]	@ (8000b08 <HAL_RCC_OscConfig+0x330>)
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	f7ff fdf9 	bl	8000468 <HAL_InitTick>
 8000876:	2800      	cmp	r0, #0
 8000878:	d1de      	bne.n	8000838 <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800087a:	6823      	ldr	r3, [r4, #0]
 800087c:	071a      	lsls	r2, r3, #28
 800087e:	d46d      	bmi.n	800095c <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000880:	075b      	lsls	r3, r3, #29
 8000882:	d545      	bpl.n	8000910 <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000884:	2338      	movs	r3, #56	@ 0x38
 8000886:	4a9b      	ldr	r2, [pc, #620]	@ (8000af4 <HAL_RCC_OscConfig+0x31c>)
 8000888:	6891      	ldr	r1, [r2, #8]
 800088a:	400b      	ands	r3, r1
 800088c:	2b20      	cmp	r3, #32
 800088e:	d100      	bne.n	8000892 <HAL_RCC_OscConfig+0xba>
 8000890:	e0cc      	b.n	8000a2c <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000892:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000894:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000896:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000898:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800089a:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800089c:	4219      	tst	r1, r3
 800089e:	d108      	bne.n	80008b2 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 80008a0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80008a2:	4319      	orrs	r1, r3
 80008a4:	63d1      	str	r1, [r2, #60]	@ 0x3c
 80008a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80008a8:	4013      	ands	r3, r2
 80008aa:	9301      	str	r3, [sp, #4]
 80008ac:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 80008ae:	2301      	movs	r3, #1
 80008b0:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80008b2:	2780      	movs	r7, #128	@ 0x80
 80008b4:	4e95      	ldr	r6, [pc, #596]	@ (8000b0c <HAL_RCC_OscConfig+0x334>)
 80008b6:	007f      	lsls	r7, r7, #1
 80008b8:	6833      	ldr	r3, [r6, #0]
 80008ba:	423b      	tst	r3, r7
 80008bc:	d100      	bne.n	80008c0 <HAL_RCC_OscConfig+0xe8>
 80008be:	e0ff      	b.n	8000ac0 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008c0:	68a3      	ldr	r3, [r4, #8]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d100      	bne.n	80008c8 <HAL_RCC_OscConfig+0xf0>
 80008c6:	e0e5      	b.n	8000a94 <HAL_RCC_OscConfig+0x2bc>
 80008c8:	2b05      	cmp	r3, #5
 80008ca:	d100      	bne.n	80008ce <HAL_RCC_OscConfig+0xf6>
 80008cc:	e1c8      	b.n	8000c60 <HAL_RCC_OscConfig+0x488>
 80008ce:	2101      	movs	r1, #1
 80008d0:	4e88      	ldr	r6, [pc, #544]	@ (8000af4 <HAL_RCC_OscConfig+0x31c>)
 80008d2:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 80008d4:	438a      	bics	r2, r1
 80008d6:	65f2      	str	r2, [r6, #92]	@ 0x5c
 80008d8:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 80008da:	3103      	adds	r1, #3
 80008dc:	438a      	bics	r2, r1
 80008de:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d000      	beq.n	80008e6 <HAL_RCC_OscConfig+0x10e>
 80008e4:	e0da      	b.n	8000a9c <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 80008e6:	f7ff fe05 	bl	80004f4 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80008ea:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 80008ec:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80008ee:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80008f0:	4d87      	ldr	r5, [pc, #540]	@ (8000b10 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80008f2:	e005      	b.n	8000900 <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80008f4:	f7ff fdfe 	bl	80004f4 <HAL_GetTick>
 80008f8:	1bc0      	subs	r0, r0, r7
 80008fa:	42a8      	cmp	r0, r5
 80008fc:	d900      	bls.n	8000900 <HAL_RCC_OscConfig+0x128>
 80008fe:	e0ee      	b.n	8000ade <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000900:	4642      	mov	r2, r8
 8000902:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8000904:	421a      	tst	r2, r3
 8000906:	d1f5      	bne.n	80008f4 <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 8000908:	464b      	mov	r3, r9
 800090a:	2b01      	cmp	r3, #1
 800090c:	d100      	bne.n	8000910 <HAL_RCC_OscConfig+0x138>
 800090e:	e163      	b.n	8000bd8 <HAL_RCC_OscConfig+0x400>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000910:	69e3      	ldr	r3, [r4, #28]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d020      	beq.n	8000958 <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000916:	2238      	movs	r2, #56	@ 0x38
 8000918:	4d76      	ldr	r5, [pc, #472]	@ (8000af4 <HAL_RCC_OscConfig+0x31c>)
 800091a:	68a9      	ldr	r1, [r5, #8]
 800091c:	400a      	ands	r2, r1
 800091e:	2a10      	cmp	r2, #16
 8000920:	d100      	bne.n	8000924 <HAL_RCC_OscConfig+0x14c>
 8000922:	e11d      	b.n	8000b60 <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000924:	2b02      	cmp	r3, #2
 8000926:	d100      	bne.n	800092a <HAL_RCC_OscConfig+0x152>
 8000928:	e15c      	b.n	8000be4 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_PLL_DISABLE();
 800092a:	682b      	ldr	r3, [r5, #0]
 800092c:	4a79      	ldr	r2, [pc, #484]	@ (8000b14 <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800092e:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8000930:	4013      	ands	r3, r2
 8000932:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000934:	f7ff fdde 	bl	80004f4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000938:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800093a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800093c:	e005      	b.n	800094a <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800093e:	f7ff fdd9 	bl	80004f4 <HAL_GetTick>
 8000942:	1b00      	subs	r0, r0, r4
 8000944:	2802      	cmp	r0, #2
 8000946:	d900      	bls.n	800094a <HAL_RCC_OscConfig+0x172>
 8000948:	e0c9      	b.n	8000ade <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800094a:	682b      	ldr	r3, [r5, #0]
 800094c:	4233      	tst	r3, r6
 800094e:	d1f6      	bne.n	800093e <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8000950:	68eb      	ldr	r3, [r5, #12]
 8000952:	4a71      	ldr	r2, [pc, #452]	@ (8000b18 <HAL_RCC_OscConfig+0x340>)
 8000954:	4013      	ands	r3, r2
 8000956:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8000958:	2000      	movs	r0, #0
 800095a:	e76e      	b.n	800083a <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800095c:	2238      	movs	r2, #56	@ 0x38
 800095e:	4d65      	ldr	r5, [pc, #404]	@ (8000af4 <HAL_RCC_OscConfig+0x31c>)
 8000960:	68a9      	ldr	r1, [r5, #8]
 8000962:	400a      	ands	r2, r1
 8000964:	2a18      	cmp	r2, #24
 8000966:	d043      	beq.n	80009f0 <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000968:	69a3      	ldr	r3, [r4, #24]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d100      	bne.n	8000970 <HAL_RCC_OscConfig+0x198>
 800096e:	e0b8      	b.n	8000ae2 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 8000970:	2201      	movs	r2, #1
 8000972:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000974:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8000976:	4313      	orrs	r3, r2
 8000978:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800097a:	f7ff fdbb 	bl	80004f4 <HAL_GetTick>
 800097e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000980:	e005      	b.n	800098e <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000982:	f7ff fdb7 	bl	80004f4 <HAL_GetTick>
 8000986:	1b80      	subs	r0, r0, r6
 8000988:	2802      	cmp	r0, #2
 800098a:	d900      	bls.n	800098e <HAL_RCC_OscConfig+0x1b6>
 800098c:	e0a7      	b.n	8000ade <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800098e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8000990:	421f      	tst	r7, r3
 8000992:	d0f6      	beq.n	8000982 <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000994:	6823      	ldr	r3, [r4, #0]
 8000996:	e773      	b.n	8000880 <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000998:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800099a:	0789      	lsls	r1, r1, #30
 800099c:	d100      	bne.n	80009a0 <HAL_RCC_OscConfig+0x1c8>
 800099e:	e731      	b.n	8000804 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009a0:	2280      	movs	r2, #128	@ 0x80
 80009a2:	6863      	ldr	r3, [r4, #4]
 80009a4:	0252      	lsls	r2, r2, #9
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d02b      	beq.n	8000a02 <HAL_RCC_OscConfig+0x22a>
 80009aa:	21a0      	movs	r1, #160	@ 0xa0
 80009ac:	02c9      	lsls	r1, r1, #11
 80009ae:	428b      	cmp	r3, r1
 80009b0:	d100      	bne.n	80009b4 <HAL_RCC_OscConfig+0x1dc>
 80009b2:	e0fc      	b.n	8000bae <HAL_RCC_OscConfig+0x3d6>
 80009b4:	4d4f      	ldr	r5, [pc, #316]	@ (8000af4 <HAL_RCC_OscConfig+0x31c>)
 80009b6:	4959      	ldr	r1, [pc, #356]	@ (8000b1c <HAL_RCC_OscConfig+0x344>)
 80009b8:	682a      	ldr	r2, [r5, #0]
 80009ba:	400a      	ands	r2, r1
 80009bc:	602a      	str	r2, [r5, #0]
 80009be:	682a      	ldr	r2, [r5, #0]
 80009c0:	4957      	ldr	r1, [pc, #348]	@ (8000b20 <HAL_RCC_OscConfig+0x348>)
 80009c2:	400a      	ands	r2, r1
 80009c4:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d11f      	bne.n	8000a0a <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 80009ca:	f7ff fd93 	bl	80004f4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80009ce:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80009d0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80009d2:	02bf      	lsls	r7, r7, #10
 80009d4:	e004      	b.n	80009e0 <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009d6:	f7ff fd8d 	bl	80004f4 <HAL_GetTick>
 80009da:	1b80      	subs	r0, r0, r6
 80009dc:	2864      	cmp	r0, #100	@ 0x64
 80009de:	d87e      	bhi.n	8000ade <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80009e0:	682b      	ldr	r3, [r5, #0]
 80009e2:	423b      	tst	r3, r7
 80009e4:	d1f7      	bne.n	80009d6 <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009e6:	6823      	ldr	r3, [r4, #0]
 80009e8:	079a      	lsls	r2, r3, #30
 80009ea:	d400      	bmi.n	80009ee <HAL_RCC_OscConfig+0x216>
 80009ec:	e746      	b.n	800087c <HAL_RCC_OscConfig+0xa4>
 80009ee:	e712      	b.n	8000816 <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80009f0:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 80009f2:	0792      	lsls	r2, r2, #30
 80009f4:	d400      	bmi.n	80009f8 <HAL_RCC_OscConfig+0x220>
 80009f6:	e743      	b.n	8000880 <HAL_RCC_OscConfig+0xa8>
 80009f8:	69a2      	ldr	r2, [r4, #24]
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	d000      	beq.n	8000a00 <HAL_RCC_OscConfig+0x228>
 80009fe:	e73f      	b.n	8000880 <HAL_RCC_OscConfig+0xa8>
 8000a00:	e71a      	b.n	8000838 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a02:	4a3c      	ldr	r2, [pc, #240]	@ (8000af4 <HAL_RCC_OscConfig+0x31c>)
 8000a04:	6811      	ldr	r1, [r2, #0]
 8000a06:	430b      	orrs	r3, r1
 8000a08:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000a0a:	f7ff fd73 	bl	80004f4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a0e:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000a10:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a12:	4f38      	ldr	r7, [pc, #224]	@ (8000af4 <HAL_RCC_OscConfig+0x31c>)
 8000a14:	02b6      	lsls	r6, r6, #10
 8000a16:	e004      	b.n	8000a22 <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a18:	f7ff fd6c 	bl	80004f4 <HAL_GetTick>
 8000a1c:	1b40      	subs	r0, r0, r5
 8000a1e:	2864      	cmp	r0, #100	@ 0x64
 8000a20:	d85d      	bhi.n	8000ade <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	4233      	tst	r3, r6
 8000a26:	d0f7      	beq.n	8000a18 <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a28:	6823      	ldr	r3, [r4, #0]
 8000a2a:	e7dd      	b.n	80009e8 <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000a2c:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8000a2e:	079b      	lsls	r3, r3, #30
 8000a30:	d400      	bmi.n	8000a34 <HAL_RCC_OscConfig+0x25c>
 8000a32:	e76d      	b.n	8000910 <HAL_RCC_OscConfig+0x138>
 8000a34:	68a3      	ldr	r3, [r4, #8]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d000      	beq.n	8000a3c <HAL_RCC_OscConfig+0x264>
 8000a3a:	e769      	b.n	8000910 <HAL_RCC_OscConfig+0x138>
 8000a3c:	e6fc      	b.n	8000838 <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a3e:	3b0d      	subs	r3, #13
 8000a40:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d100      	bne.n	8000a48 <HAL_RCC_OscConfig+0x270>
 8000a46:	e0bc      	b.n	8000bc2 <HAL_RCC_OscConfig+0x3ea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a48:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000a4a:	4d2a      	ldr	r5, [pc, #168]	@ (8000af4 <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d073      	beq.n	8000b38 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000a50:	682b      	ldr	r3, [r5, #0]
 8000a52:	4a2a      	ldr	r2, [pc, #168]	@ (8000afc <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000a54:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000a56:	4013      	ands	r3, r2
 8000a58:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000a5a:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8000a60:	2380      	movs	r3, #128	@ 0x80
 8000a62:	682a      	ldr	r2, [r5, #0]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4313      	orrs	r3, r2
 8000a68:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a6a:	f7ff fd43 	bl	80004f4 <HAL_GetTick>
 8000a6e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000a70:	e004      	b.n	8000a7c <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a72:	f7ff fd3f 	bl	80004f4 <HAL_GetTick>
 8000a76:	1b80      	subs	r0, r0, r6
 8000a78:	2802      	cmp	r0, #2
 8000a7a:	d830      	bhi.n	8000ade <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000a7c:	682b      	ldr	r3, [r5, #0]
 8000a7e:	423b      	tst	r3, r7
 8000a80:	d0f7      	beq.n	8000a72 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a82:	686a      	ldr	r2, [r5, #4]
 8000a84:	6963      	ldr	r3, [r4, #20]
 8000a86:	491c      	ldr	r1, [pc, #112]	@ (8000af8 <HAL_RCC_OscConfig+0x320>)
 8000a88:	021b      	lsls	r3, r3, #8
 8000a8a:	400a      	ands	r2, r1
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a90:	6823      	ldr	r3, [r4, #0]
 8000a92:	e6f3      	b.n	800087c <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a94:	4917      	ldr	r1, [pc, #92]	@ (8000af4 <HAL_RCC_OscConfig+0x31c>)
 8000a96:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8000a9c:	f7ff fd2a 	bl	80004f4 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000aa0:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8000aa2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000aa4:	4698      	mov	r8, r3
 8000aa6:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aa8:	4d19      	ldr	r5, [pc, #100]	@ (8000b10 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000aaa:	e004      	b.n	8000ab6 <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aac:	f7ff fd22 	bl	80004f4 <HAL_GetTick>
 8000ab0:	1b80      	subs	r0, r0, r6
 8000ab2:	42a8      	cmp	r0, r5
 8000ab4:	d813      	bhi.n	8000ade <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000ab6:	4643      	mov	r3, r8
 8000ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000aba:	421f      	tst	r7, r3
 8000abc:	d0f6      	beq.n	8000aac <HAL_RCC_OscConfig+0x2d4>
 8000abe:	e723      	b.n	8000908 <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ac0:	6833      	ldr	r3, [r6, #0]
 8000ac2:	433b      	orrs	r3, r7
 8000ac4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000ac6:	f7ff fd15 	bl	80004f4 <HAL_GetTick>
 8000aca:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000acc:	6833      	ldr	r3, [r6, #0]
 8000ace:	423b      	tst	r3, r7
 8000ad0:	d000      	beq.n	8000ad4 <HAL_RCC_OscConfig+0x2fc>
 8000ad2:	e6f5      	b.n	80008c0 <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ad4:	f7ff fd0e 	bl	80004f4 <HAL_GetTick>
 8000ad8:	1b40      	subs	r0, r0, r5
 8000ada:	2802      	cmp	r0, #2
 8000adc:	d9f6      	bls.n	8000acc <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 8000ade:	2003      	movs	r0, #3
 8000ae0:	e6ab      	b.n	800083a <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ae6:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8000ae8:	4393      	bics	r3, r2
 8000aea:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000aec:	f7ff fd02 	bl	80004f4 <HAL_GetTick>
 8000af0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000af2:	e01c      	b.n	8000b2e <HAL_RCC_OscConfig+0x356>
 8000af4:	40021000 	.word	0x40021000
 8000af8:	ffff80ff 	.word	0xffff80ff
 8000afc:	ffffc7ff 	.word	0xffffc7ff
 8000b00:	00f42400 	.word	0x00f42400
 8000b04:	20000000 	.word	0x20000000
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	40007000 	.word	0x40007000
 8000b10:	00001388 	.word	0x00001388
 8000b14:	feffffff 	.word	0xfeffffff
 8000b18:	effefffc 	.word	0xeffefffc
 8000b1c:	fffeffff 	.word	0xfffeffff
 8000b20:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b24:	f7ff fce6 	bl	80004f4 <HAL_GetTick>
 8000b28:	1b80      	subs	r0, r0, r6
 8000b2a:	2802      	cmp	r0, #2
 8000b2c:	d8d7      	bhi.n	8000ade <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000b2e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8000b30:	421f      	tst	r7, r3
 8000b32:	d1f7      	bne.n	8000b24 <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b34:	6823      	ldr	r3, [r4, #0]
 8000b36:	e6a3      	b.n	8000880 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 8000b38:	682b      	ldr	r3, [r5, #0]
 8000b3a:	4a50      	ldr	r2, [pc, #320]	@ (8000c7c <HAL_RCC_OscConfig+0x4a4>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b3c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8000b3e:	4013      	ands	r3, r2
 8000b40:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b42:	f7ff fcd7 	bl	80004f4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b46:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8000b48:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b4a:	e004      	b.n	8000b56 <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b4c:	f7ff fcd2 	bl	80004f4 <HAL_GetTick>
 8000b50:	1b80      	subs	r0, r0, r6
 8000b52:	2802      	cmp	r0, #2
 8000b54:	d8c3      	bhi.n	8000ade <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b56:	682b      	ldr	r3, [r5, #0]
 8000b58:	423b      	tst	r3, r7
 8000b5a:	d1f7      	bne.n	8000b4c <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b5c:	6823      	ldr	r3, [r4, #0]
 8000b5e:	e68d      	b.n	800087c <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d100      	bne.n	8000b66 <HAL_RCC_OscConfig+0x38e>
 8000b64:	e668      	b.n	8000838 <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b66:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8000b68:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b6a:	6a21      	ldr	r1, [r4, #32]
 8000b6c:	4002      	ands	r2, r0
 8000b6e:	428a      	cmp	r2, r1
 8000b70:	d000      	beq.n	8000b74 <HAL_RCC_OscConfig+0x39c>
 8000b72:	e661      	b.n	8000838 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b74:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b76:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b78:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b7a:	428a      	cmp	r2, r1
 8000b7c:	d000      	beq.n	8000b80 <HAL_RCC_OscConfig+0x3a8>
 8000b7e:	e65b      	b.n	8000838 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000b80:	21fe      	movs	r1, #254	@ 0xfe
 8000b82:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000b84:	01c9      	lsls	r1, r1, #7
 8000b86:	4001      	ands	r1, r0
 8000b88:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b8a:	4291      	cmp	r1, r2
 8000b8c:	d000      	beq.n	8000b90 <HAL_RCC_OscConfig+0x3b8>
 8000b8e:	e653      	b.n	8000838 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b90:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000b92:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b94:	0392      	lsls	r2, r2, #14
 8000b96:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	d000      	beq.n	8000b9e <HAL_RCC_OscConfig+0x3c6>
 8000b9c:	e64c      	b.n	8000838 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8000ba0:	0f40      	lsrs	r0, r0, #29
 8000ba2:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000ba4:	1ac0      	subs	r0, r0, r3
 8000ba6:	1e43      	subs	r3, r0, #1
 8000ba8:	4198      	sbcs	r0, r3
 8000baa:	b2c0      	uxtb	r0, r0
 8000bac:	e645      	b.n	800083a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bae:	2180      	movs	r1, #128	@ 0x80
 8000bb0:	4b33      	ldr	r3, [pc, #204]	@ (8000c80 <HAL_RCC_OscConfig+0x4a8>)
 8000bb2:	02c9      	lsls	r1, r1, #11
 8000bb4:	6818      	ldr	r0, [r3, #0]
 8000bb6:	4301      	orrs	r1, r0
 8000bb8:	6019      	str	r1, [r3, #0]
 8000bba:	6819      	ldr	r1, [r3, #0]
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bc0:	e723      	b.n	8000a0a <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000bc2:	6813      	ldr	r3, [r2, #0]
 8000bc4:	055b      	lsls	r3, r3, #21
 8000bc6:	d455      	bmi.n	8000c74 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bc8:	6851      	ldr	r1, [r2, #4]
 8000bca:	6963      	ldr	r3, [r4, #20]
 8000bcc:	482d      	ldr	r0, [pc, #180]	@ (8000c84 <HAL_RCC_OscConfig+0x4ac>)
 8000bce:	021b      	lsls	r3, r3, #8
 8000bd0:	4001      	ands	r1, r0
 8000bd2:	430b      	orrs	r3, r1
 8000bd4:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bd6:	e64a      	b.n	800086e <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 8000bd8:	4a29      	ldr	r2, [pc, #164]	@ (8000c80 <HAL_RCC_OscConfig+0x4a8>)
 8000bda:	492b      	ldr	r1, [pc, #172]	@ (8000c88 <HAL_RCC_OscConfig+0x4b0>)
 8000bdc:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8000bde:	400b      	ands	r3, r1
 8000be0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000be2:	e695      	b.n	8000910 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 8000be4:	682b      	ldr	r3, [r5, #0]
 8000be6:	4a29      	ldr	r2, [pc, #164]	@ (8000c8c <HAL_RCC_OscConfig+0x4b4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000be8:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8000bea:	4013      	ands	r3, r2
 8000bec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bee:	f7ff fc81 	bl	80004f4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000bf2:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8000bf4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000bf6:	e005      	b.n	8000c04 <HAL_RCC_OscConfig+0x42c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bf8:	f7ff fc7c 	bl	80004f4 <HAL_GetTick>
 8000bfc:	1b80      	subs	r0, r0, r6
 8000bfe:	2802      	cmp	r0, #2
 8000c00:	d900      	bls.n	8000c04 <HAL_RCC_OscConfig+0x42c>
 8000c02:	e76c      	b.n	8000ade <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000c04:	682b      	ldr	r3, [r5, #0]
 8000c06:	423b      	tst	r3, r7
 8000c08:	d1f6      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c0a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000c0c:	6a23      	ldr	r3, [r4, #32]
 8000c0e:	68ea      	ldr	r2, [r5, #12]
 8000c10:	430b      	orrs	r3, r1
 8000c12:	491f      	ldr	r1, [pc, #124]	@ (8000c90 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000c14:	4e1a      	ldr	r6, [pc, #104]	@ (8000c80 <HAL_RCC_OscConfig+0x4a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c16:	400a      	ands	r2, r1
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8000c20:	4313      	orrs	r3, r2
 8000c22:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000c24:	0212      	lsls	r2, r2, #8
 8000c26:	4313      	orrs	r3, r2
 8000c28:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8000c2a:	2380      	movs	r3, #128	@ 0x80
 8000c2c:	682a      	ldr	r2, [r5, #0]
 8000c2e:	045b      	lsls	r3, r3, #17
 8000c30:	4313      	orrs	r3, r2
 8000c32:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8000c34:	2380      	movs	r3, #128	@ 0x80
 8000c36:	68ea      	ldr	r2, [r5, #12]
 8000c38:	055b      	lsls	r3, r3, #21
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8000c3e:	f7ff fc59 	bl	80004f4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000c42:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000c44:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000c46:	04ad      	lsls	r5, r5, #18
 8000c48:	e005      	b.n	8000c56 <HAL_RCC_OscConfig+0x47e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c4a:	f7ff fc53 	bl	80004f4 <HAL_GetTick>
 8000c4e:	1b00      	subs	r0, r0, r4
 8000c50:	2802      	cmp	r0, #2
 8000c52:	d900      	bls.n	8000c56 <HAL_RCC_OscConfig+0x47e>
 8000c54:	e743      	b.n	8000ade <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000c56:	6833      	ldr	r3, [r6, #0]
 8000c58:	422b      	tst	r3, r5
 8000c5a:	d0f6      	beq.n	8000c4a <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	e5ec      	b.n	800083a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c60:	2104      	movs	r1, #4
 8000c62:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <HAL_RCC_OscConfig+0x4a8>)
 8000c64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000c66:	430a      	orrs	r2, r1
 8000c68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000c6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000c6c:	3903      	subs	r1, #3
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c72:	e713      	b.n	8000a9c <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c74:	68e3      	ldr	r3, [r4, #12]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1a6      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x3f0>
 8000c7a:	e5dd      	b.n	8000838 <HAL_RCC_OscConfig+0x60>
 8000c7c:	fffffeff 	.word	0xfffffeff
 8000c80:	40021000 	.word	0x40021000
 8000c84:	ffff80ff 	.word	0xffff80ff
 8000c88:	efffffff 	.word	0xefffffff
 8000c8c:	feffffff 	.word	0xfeffffff
 8000c90:	1fc1808c 	.word	0x1fc1808c

08000c94 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c94:	2338      	movs	r3, #56	@ 0x38
 8000c96:	4a22      	ldr	r2, [pc, #136]	@ (8000d20 <HAL_RCC_GetSysClockFreq+0x8c>)
{
 8000c98:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c9a:	6891      	ldr	r1, [r2, #8]
 8000c9c:	420b      	tst	r3, r1
 8000c9e:	d105      	bne.n	8000cac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8000ca0:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8000ca2:	4820      	ldr	r0, [pc, #128]	@ (8000d24 <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8000ca4:	049b      	lsls	r3, r3, #18
 8000ca6:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8000ca8:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8000caa:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cac:	6891      	ldr	r1, [r2, #8]
 8000cae:	4019      	ands	r1, r3
 8000cb0:	2908      	cmp	r1, #8
 8000cb2:	d014      	beq.n	8000cde <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cb4:	6891      	ldr	r1, [r2, #8]
 8000cb6:	4019      	ands	r1, r3
 8000cb8:	2910      	cmp	r1, #16
 8000cba:	d012      	beq.n	8000ce2 <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000cbc:	6891      	ldr	r1, [r2, #8]
 8000cbe:	4019      	ands	r1, r3
 8000cc0:	2920      	cmp	r1, #32
 8000cc2:	d024      	beq.n	8000d0e <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000cc4:	6890      	ldr	r0, [r2, #8]
 8000cc6:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8000cc8:	3818      	subs	r0, #24
 8000cca:	1e43      	subs	r3, r0, #1
 8000ccc:	4198      	sbcs	r0, r3
 8000cce:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <HAL_RCC_GetSysClockFreq+0x94>)
 8000cd0:	4240      	negs	r0, r0
 8000cd2:	4018      	ands	r0, r3
 8000cd4:	23fa      	movs	r3, #250	@ 0xfa
 8000cd6:	01db      	lsls	r3, r3, #7
 8000cd8:	469c      	mov	ip, r3
 8000cda:	4460      	add	r0, ip
 8000cdc:	e7e5      	b.n	8000caa <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8000cde:	4813      	ldr	r0, [pc, #76]	@ (8000d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8000ce0:	e7e3      	b.n	8000caa <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000ce2:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000ce4:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000ce6:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000ce8:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000cea:	0649      	lsls	r1, r1, #25
 8000cec:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000cee:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000cf0:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000cf2:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 8000cf4:	079b      	lsls	r3, r3, #30
 8000cf6:	d00d      	beq.n	8000d14 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000cf8:	480a      	ldr	r0, [pc, #40]	@ (8000d24 <HAL_RCC_GetSysClockFreq+0x90>)
 8000cfa:	f7ff fa01 	bl	8000100 <__udivsi3>
 8000cfe:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000d02:	68d9      	ldr	r1, [r3, #12]
 8000d04:	0f49      	lsrs	r1, r1, #29
 8000d06:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8000d08:	f7ff f9fa 	bl	8000100 <__udivsi3>
 8000d0c:	e7cd      	b.n	8000caa <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8000d0e:	2080      	movs	r0, #128	@ 0x80
 8000d10:	0200      	lsls	r0, r0, #8
 8000d12:	e7ca      	b.n	8000caa <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000d14:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8000d16:	f7ff f9f3 	bl	8000100 <__udivsi3>
 8000d1a:	4360      	muls	r0, r4
        break;
 8000d1c:	e7f0      	b.n	8000d00 <HAL_RCC_GetSysClockFreq+0x6c>
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	40021000 	.word	0x40021000
 8000d24:	00f42400 	.word	0x00f42400
 8000d28:	ffff8300 	.word	0xffff8300
 8000d2c:	007a1200 	.word	0x007a1200

08000d30 <HAL_RCC_ClockConfig>:
{
 8000d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d32:	46ce      	mov	lr, r9
 8000d34:	4647      	mov	r7, r8
 8000d36:	0005      	movs	r5, r0
 8000d38:	000c      	movs	r4, r1
 8000d3a:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8000d3c:	2800      	cmp	r0, #0
 8000d3e:	d026      	beq.n	8000d8e <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d40:	2207      	movs	r2, #7
 8000d42:	4e57      	ldr	r6, [pc, #348]	@ (8000ea0 <HAL_RCC_ClockConfig+0x170>)
 8000d44:	6833      	ldr	r3, [r6, #0]
 8000d46:	4013      	ands	r3, r2
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d35e      	bcc.n	8000e0a <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d4c:	682b      	ldr	r3, [r5, #0]
 8000d4e:	079a      	lsls	r2, r3, #30
 8000d50:	d50e      	bpl.n	8000d70 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d52:	075a      	lsls	r2, r3, #29
 8000d54:	d505      	bpl.n	8000d62 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000d56:	22e0      	movs	r2, #224	@ 0xe0
 8000d58:	4952      	ldr	r1, [pc, #328]	@ (8000ea4 <HAL_RCC_ClockConfig+0x174>)
 8000d5a:	01d2      	lsls	r2, r2, #7
 8000d5c:	6888      	ldr	r0, [r1, #8]
 8000d5e:	4302      	orrs	r2, r0
 8000d60:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d62:	4950      	ldr	r1, [pc, #320]	@ (8000ea4 <HAL_RCC_ClockConfig+0x174>)
 8000d64:	4850      	ldr	r0, [pc, #320]	@ (8000ea8 <HAL_RCC_ClockConfig+0x178>)
 8000d66:	688a      	ldr	r2, [r1, #8]
 8000d68:	4002      	ands	r2, r0
 8000d6a:	68a8      	ldr	r0, [r5, #8]
 8000d6c:	4302      	orrs	r2, r0
 8000d6e:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d70:	07db      	lsls	r3, r3, #31
 8000d72:	d52b      	bpl.n	8000dcc <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d74:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d76:	4a4b      	ldr	r2, [pc, #300]	@ (8000ea4 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d100      	bne.n	8000d7e <HAL_RCC_ClockConfig+0x4e>
 8000d7c:	e07c      	b.n	8000e78 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d007      	beq.n	8000d92 <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d000      	beq.n	8000d88 <HAL_RCC_ClockConfig+0x58>
 8000d86:	e07d      	b.n	8000e84 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d88:	6812      	ldr	r2, [r2, #0]
 8000d8a:	0552      	lsls	r2, r2, #21
 8000d8c:	d404      	bmi.n	8000d98 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8000d8e:	2001      	movs	r0, #1
 8000d90:	e037      	b.n	8000e02 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000d92:	6812      	ldr	r2, [r2, #0]
 8000d94:	0192      	lsls	r2, r2, #6
 8000d96:	d5fa      	bpl.n	8000d8e <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000d98:	2107      	movs	r1, #7
 8000d9a:	4e42      	ldr	r6, [pc, #264]	@ (8000ea4 <HAL_RCC_ClockConfig+0x174>)
 8000d9c:	68b2      	ldr	r2, [r6, #8]
 8000d9e:	438a      	bics	r2, r1
 8000da0:	4313      	orrs	r3, r2
 8000da2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000da4:	f7ff fba6 	bl	80004f4 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000da8:	2338      	movs	r3, #56	@ 0x38
 8000daa:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dac:	4b3f      	ldr	r3, [pc, #252]	@ (8000eac <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8000dae:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000db0:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000db2:	e004      	b.n	8000dbe <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000db4:	f7ff fb9e 	bl	80004f4 <HAL_GetTick>
 8000db8:	1bc0      	subs	r0, r0, r7
 8000dba:	4548      	cmp	r0, r9
 8000dbc:	d83b      	bhi.n	8000e36 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dbe:	4643      	mov	r3, r8
 8000dc0:	68b2      	ldr	r2, [r6, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	686b      	ldr	r3, [r5, #4]
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d1f3      	bne.n	8000db4 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000dcc:	2207      	movs	r2, #7
 8000dce:	4e34      	ldr	r6, [pc, #208]	@ (8000ea0 <HAL_RCC_ClockConfig+0x170>)
 8000dd0:	6833      	ldr	r3, [r6, #0]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	42a3      	cmp	r3, r4
 8000dd6:	d838      	bhi.n	8000e4a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dd8:	682b      	ldr	r3, [r5, #0]
 8000dda:	075b      	lsls	r3, r3, #29
 8000ddc:	d42d      	bmi.n	8000e3a <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000dde:	f7ff ff59 	bl	8000c94 <HAL_RCC_GetSysClockFreq>
 8000de2:	4b30      	ldr	r3, [pc, #192]	@ (8000ea4 <HAL_RCC_ClockConfig+0x174>)
 8000de4:	4a32      	ldr	r2, [pc, #200]	@ (8000eb0 <HAL_RCC_ClockConfig+0x180>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	4932      	ldr	r1, [pc, #200]	@ (8000eb4 <HAL_RCC_ClockConfig+0x184>)
 8000dea:	051b      	lsls	r3, r3, #20
 8000dec:	0f1b      	lsrs	r3, r3, #28
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	589b      	ldr	r3, [r3, r2]
 8000df2:	221f      	movs	r2, #31
 8000df4:	4013      	ands	r3, r2
 8000df6:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 8000df8:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb8 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000dfa:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	f7ff fb33 	bl	8000468 <HAL_InitTick>
}
 8000e02:	bcc0      	pop	{r6, r7}
 8000e04:	46b9      	mov	r9, r7
 8000e06:	46b0      	mov	r8, r6
 8000e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e0a:	6833      	ldr	r3, [r6, #0]
 8000e0c:	4393      	bics	r3, r2
 8000e0e:	430b      	orrs	r3, r1
 8000e10:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8000e12:	f7ff fb6f 	bl	80004f4 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e16:	2307      	movs	r3, #7
 8000e18:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e1a:	4b24      	ldr	r3, [pc, #144]	@ (8000eac <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8000e1c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e1e:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e20:	4642      	mov	r2, r8
 8000e22:	6833      	ldr	r3, [r6, #0]
 8000e24:	4013      	ands	r3, r2
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d100      	bne.n	8000e2c <HAL_RCC_ClockConfig+0xfc>
 8000e2a:	e78f      	b.n	8000d4c <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e2c:	f7ff fb62 	bl	80004f4 <HAL_GetTick>
 8000e30:	1bc0      	subs	r0, r0, r7
 8000e32:	4548      	cmp	r0, r9
 8000e34:	d9f4      	bls.n	8000e20 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8000e36:	2003      	movs	r0, #3
 8000e38:	e7e3      	b.n	8000e02 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000e3a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ea4 <HAL_RCC_ClockConfig+0x174>)
 8000e3c:	491f      	ldr	r1, [pc, #124]	@ (8000ebc <HAL_RCC_ClockConfig+0x18c>)
 8000e3e:	6893      	ldr	r3, [r2, #8]
 8000e40:	400b      	ands	r3, r1
 8000e42:	68e9      	ldr	r1, [r5, #12]
 8000e44:	430b      	orrs	r3, r1
 8000e46:	6093      	str	r3, [r2, #8]
 8000e48:	e7c9      	b.n	8000dde <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e4a:	6833      	ldr	r3, [r6, #0]
 8000e4c:	4393      	bics	r3, r2
 8000e4e:	4323      	orrs	r3, r4
 8000e50:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8000e52:	f7ff fb4f 	bl	80004f4 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e56:	2307      	movs	r3, #7
 8000e58:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e5a:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8000e5c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e5e:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e60:	4642      	mov	r2, r8
 8000e62:	6833      	ldr	r3, [r6, #0]
 8000e64:	4013      	ands	r3, r2
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d0b6      	beq.n	8000dd8 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e6a:	f7ff fb43 	bl	80004f4 <HAL_GetTick>
 8000e6e:	1bc0      	subs	r0, r0, r7
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d9f5      	bls.n	8000e60 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8000e74:	2003      	movs	r0, #3
 8000e76:	e7c4      	b.n	8000e02 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e78:	6812      	ldr	r2, [r2, #0]
 8000e7a:	0392      	lsls	r2, r2, #14
 8000e7c:	d500      	bpl.n	8000e80 <HAL_RCC_ClockConfig+0x150>
 8000e7e:	e78b      	b.n	8000d98 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8000e80:	2001      	movs	r0, #1
 8000e82:	e7be      	b.n	8000e02 <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d005      	beq.n	8000e94 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e88:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000e8a:	0792      	lsls	r2, r2, #30
 8000e8c:	d500      	bpl.n	8000e90 <HAL_RCC_ClockConfig+0x160>
 8000e8e:	e783      	b.n	8000d98 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8000e90:	2001      	movs	r0, #1
 8000e92:	e7b6      	b.n	8000e02 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e94:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8000e96:	0792      	lsls	r2, r2, #30
 8000e98:	d500      	bpl.n	8000e9c <HAL_RCC_ClockConfig+0x16c>
 8000e9a:	e77d      	b.n	8000d98 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	e7b0      	b.n	8000e02 <HAL_RCC_ClockConfig+0xd2>
 8000ea0:	40022000 	.word	0x40022000
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	fffff0ff 	.word	0xfffff0ff
 8000eac:	00001388 	.word	0x00001388
 8000eb0:	0800107c 	.word	0x0800107c
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	ffff8fff 	.word	0xffff8fff

08000ec0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec2:	46de      	mov	lr, fp
 8000ec4:	4657      	mov	r7, sl
 8000ec6:	464e      	mov	r6, r9
 8000ec8:	4645      	mov	r5, r8
 8000eca:	0004      	movs	r4, r0
 8000ecc:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d100      	bne.n	8000ed4 <HAL_SPI_Init+0x14>
 8000ed2:	e093      	b.n	8000ffc <HAL_SPI_Init+0x13c>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8000ed4:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8000ed6:	2d00      	cmp	r5, #0
 8000ed8:	d069      	beq.n	8000fae <HAL_SPI_Init+0xee>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8000ede:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000ee4:	335d      	adds	r3, #93	@ 0x5d
 8000ee6:	5ce3      	ldrb	r3, [r4, r3]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d06c      	beq.n	8000fc8 <HAL_SPI_Init+0x108>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000eee:	235d      	movs	r3, #93	@ 0x5d
 8000ef0:	2202      	movs	r2, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000ef2:	2140      	movs	r1, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8000ef4:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8000ef6:	6822      	ldr	r2, [r4, #0]
 8000ef8:	6813      	ldr	r3, [r2, #0]
 8000efa:	438b      	bics	r3, r1
 8000efc:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000efe:	23e0      	movs	r3, #224	@ 0xe0
 8000f00:	68e1      	ldr	r1, [r4, #12]
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	4299      	cmp	r1, r3
 8000f06:	d866      	bhi.n	8000fd6 <HAL_SPI_Init+0x116>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000f08:	d000      	beq.n	8000f0c <HAL_SPI_Init+0x4c>
 8000f0a:	e070      	b.n	8000fee <HAL_SPI_Init+0x12e>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000f0c:	2380      	movs	r3, #128	@ 0x80
 8000f0e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8000f10:	019b      	lsls	r3, r3, #6
 8000f12:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000f14:	2380      	movs	r3, #128	@ 0x80
 8000f16:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000f18:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000f1a:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000f1c:	2682      	movs	r6, #130	@ 0x82
 8000f1e:	2784      	movs	r7, #132	@ 0x84
 8000f20:	6863      	ldr	r3, [r4, #4]
 8000f22:	0076      	lsls	r6, r6, #1
 8000f24:	4033      	ands	r3, r6
 8000f26:	68a6      	ldr	r6, [r4, #8]
 8000f28:	023f      	lsls	r7, r7, #8
 8000f2a:	403e      	ands	r6, r7
 8000f2c:	2702      	movs	r7, #2
 8000f2e:	4333      	orrs	r3, r6
 8000f30:	6926      	ldr	r6, [r4, #16]
 8000f32:	69a0      	ldr	r0, [r4, #24]
 8000f34:	403e      	ands	r6, r7
 8000f36:	4333      	orrs	r3, r6
 8000f38:	2601      	movs	r6, #1
 8000f3a:	6967      	ldr	r7, [r4, #20]
 8000f3c:	46b2      	mov	sl, r6
 8000f3e:	4037      	ands	r7, r6
 8000f40:	433b      	orrs	r3, r7
 8000f42:	2780      	movs	r7, #128	@ 0x80
 8000f44:	00bf      	lsls	r7, r7, #2
 8000f46:	4007      	ands	r7, r0
 8000f48:	433b      	orrs	r3, r7
 8000f4a:	69e7      	ldr	r7, [r4, #28]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8000f4c:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000f4e:	46b8      	mov	r8, r7
 8000f50:	2738      	movs	r7, #56	@ 0x38
 8000f52:	46b9      	mov	r9, r7
 8000f54:	4647      	mov	r7, r8
 8000f56:	464e      	mov	r6, r9
 8000f58:	4037      	ands	r7, r6
 8000f5a:	6a26      	ldr	r6, [r4, #32]
 8000f5c:	433b      	orrs	r3, r7
 8000f5e:	46b0      	mov	r8, r6
 8000f60:	2680      	movs	r6, #128	@ 0x80
 8000f62:	4647      	mov	r7, r8
 8000f64:	4037      	ands	r7, r6
 8000f66:	4666      	mov	r6, ip
 8000f68:	433b      	orrs	r3, r7
 8000f6a:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8000f6c:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000f6e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8000f70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000f72:	4033      	ands	r3, r6
 8000f74:	26f0      	movs	r6, #240	@ 0xf0
 8000f76:	0136      	lsls	r6, r6, #4
 8000f78:	4031      	ands	r1, r6
 8000f7a:	4319      	orrs	r1, r3
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	4003      	ands	r3, r0
 8000f80:	4319      	orrs	r1, r3
 8000f82:	2310      	movs	r3, #16
 8000f84:	402b      	ands	r3, r5
 8000f86:	4319      	orrs	r1, r3
 8000f88:	465b      	mov	r3, fp
 8000f8a:	4319      	orrs	r1, r3
 8000f8c:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000f8e:	69d3      	ldr	r3, [r2, #28]
 8000f90:	491d      	ldr	r1, [pc, #116]	@ (8001008 <HAL_SPI_Init+0x148>)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
 8000f92:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000f94:	400b      	ands	r3, r1
 8000f96:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f98:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000f9a:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f9c:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000f9e:	335d      	adds	r3, #93	@ 0x5d
 8000fa0:	54e2      	strb	r2, [r4, r3]
}
 8000fa2:	bcf0      	pop	{r4, r5, r6, r7}
 8000fa4:	46bb      	mov	fp, r7
 8000fa6:	46b2      	mov	sl, r6
 8000fa8:	46a9      	mov	r9, r5
 8000faa:	46a0      	mov	r8, r4
 8000fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000fae:	2382      	movs	r3, #130	@ 0x82
 8000fb0:	6842      	ldr	r2, [r0, #4]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d093      	beq.n	8000ee0 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fb8:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fba:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fbc:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000fbe:	335d      	adds	r3, #93	@ 0x5d
 8000fc0:	5ce3      	ldrb	r3, [r4, r3]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d192      	bne.n	8000eee <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 8000fc8:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8000fca:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8000fcc:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8000fce:	f7ff f9cd 	bl	800036c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8000fd2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8000fd4:	e78b      	b.n	8000eee <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000fd6:	23f0      	movs	r3, #240	@ 0xf0
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	4299      	cmp	r1, r3
 8000fdc:	d110      	bne.n	8001000 <HAL_SPI_Init+0x140>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000fde:	2380      	movs	r3, #128	@ 0x80
 8000fe0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8000fe2:	019b      	lsls	r3, r3, #6
 8000fe4:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000fe6:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000fe8:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000fea:	469b      	mov	fp, r3
 8000fec:	e796      	b.n	8000f1c <HAL_SPI_Init+0x5c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000fee:	2380      	movs	r3, #128	@ 0x80
 8000ff0:	015b      	lsls	r3, r3, #5
 8000ff2:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	469c      	mov	ip, r3
 8000ff8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000ffa:	e78f      	b.n	8000f1c <HAL_SPI_Init+0x5c>
    return HAL_ERROR;
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	e7d0      	b.n	8000fa2 <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001000:	2300      	movs	r3, #0
 8001002:	469b      	mov	fp, r3
 8001004:	e7f6      	b.n	8000ff4 <HAL_SPI_Init+0x134>
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	fffff7ff 	.word	0xfffff7ff

0800100c <memset>:
 800100c:	0003      	movs	r3, r0
 800100e:	1882      	adds	r2, r0, r2
 8001010:	4293      	cmp	r3, r2
 8001012:	d100      	bne.n	8001016 <memset+0xa>
 8001014:	4770      	bx	lr
 8001016:	7019      	strb	r1, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	e7f9      	b.n	8001010 <memset+0x4>

0800101c <__libc_init_array>:
 800101c:	b570      	push	{r4, r5, r6, lr}
 800101e:	2600      	movs	r6, #0
 8001020:	4c0c      	ldr	r4, [pc, #48]	@ (8001054 <__libc_init_array+0x38>)
 8001022:	4d0d      	ldr	r5, [pc, #52]	@ (8001058 <__libc_init_array+0x3c>)
 8001024:	1b64      	subs	r4, r4, r5
 8001026:	10a4      	asrs	r4, r4, #2
 8001028:	42a6      	cmp	r6, r4
 800102a:	d109      	bne.n	8001040 <__libc_init_array+0x24>
 800102c:	2600      	movs	r6, #0
 800102e:	f000 f819 	bl	8001064 <_init>
 8001032:	4c0a      	ldr	r4, [pc, #40]	@ (800105c <__libc_init_array+0x40>)
 8001034:	4d0a      	ldr	r5, [pc, #40]	@ (8001060 <__libc_init_array+0x44>)
 8001036:	1b64      	subs	r4, r4, r5
 8001038:	10a4      	asrs	r4, r4, #2
 800103a:	42a6      	cmp	r6, r4
 800103c:	d105      	bne.n	800104a <__libc_init_array+0x2e>
 800103e:	bd70      	pop	{r4, r5, r6, pc}
 8001040:	00b3      	lsls	r3, r6, #2
 8001042:	58eb      	ldr	r3, [r5, r3]
 8001044:	4798      	blx	r3
 8001046:	3601      	adds	r6, #1
 8001048:	e7ee      	b.n	8001028 <__libc_init_array+0xc>
 800104a:	00b3      	lsls	r3, r6, #2
 800104c:	58eb      	ldr	r3, [r5, r3]
 800104e:	4798      	blx	r3
 8001050:	3601      	adds	r6, #1
 8001052:	e7f2      	b.n	800103a <__libc_init_array+0x1e>
 8001054:	080010bc 	.word	0x080010bc
 8001058:	080010bc 	.word	0x080010bc
 800105c:	080010c0 	.word	0x080010c0
 8001060:	080010bc 	.word	0x080010bc

08001064 <_init>:
 8001064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106a:	bc08      	pop	{r3}
 800106c:	469e      	mov	lr, r3
 800106e:	4770      	bx	lr

08001070 <_fini>:
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001076:	bc08      	pop	{r3}
 8001078:	469e      	mov	lr, r3
 800107a:	4770      	bx	lr
