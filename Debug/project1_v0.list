
project1_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001484  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800153c  0800153c  0000253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001584  08001584  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001584  08001584  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001584  08001584  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001584  08001584  00002584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001588  08001588  00002588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800158c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08001598  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001598  00003090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e02  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b8  00000000  00000000  00009e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000268c  00000000  00000000  0000b6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000608  00000000  00000000  0000dd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005dc  00000000  00000000  0000e388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013342  00000000  00000000  0000e964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009a55  00000000  00000000  00021ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007847a  00000000  00000000  0002b6fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a3b75  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ea0  00000000  00000000  000a3bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  000a4a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08001524 	.word	0x08001524

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08001524 	.word	0x08001524

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <ws2812_send>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void ws2812_send(uint8_t grb[3])
{
 8000218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021a:	464e      	mov	r6, r9
 800021c:	46de      	mov	lr, fp
 800021e:	4657      	mov	r7, sl
 8000220:	4645      	mov	r5, r8
 8000222:	b5e0      	push	{r5, r6, r7, lr}
 8000224:	b085      	sub	sp, #20
 8000226:	ab01      	add	r3, sp, #4
 8000228:	4698      	mov	r8, r3
	uint8_t buffer[12];
	for(int i = 0; i!= 3; ++i)
 800022a:	2300      	movs	r3, #0
 800022c:	469c      	mov	ip, r3
	{
		for(int j = 0; j!= 4; ++j)
		{
			buffer[4*i+j] = (grb[i] & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 800022e:	333f      	adds	r3, #63	@ 0x3f
{
 8000230:	4681      	mov	r9, r0
			buffer[4*i+j] = (grb[i] & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 8000232:	2601      	movs	r6, #1
 8000234:	469b      	mov	fp, r3
			buffer[4*i+j] |= grb[i] & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 8000236:	2703      	movs	r7, #3
			buffer[4*i+j] = (grb[i] & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 8000238:	464b      	mov	r3, r9
 800023a:	4662      	mov	r2, ip
 800023c:	4644      	mov	r4, r8
 800023e:	2107      	movs	r1, #7
 8000240:	5c9d      	ldrb	r5, [r3, r2]
 8000242:	002b      	movs	r3, r5
 8000244:	410b      	asrs	r3, r1
 8000246:	465a      	mov	r2, fp
			buffer[4*i+j] |= grb[i] & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 8000248:	0028      	movs	r0, r5
			buffer[4*i+j] = (grb[i] & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 800024a:	4033      	ands	r3, r6
 800024c:	3b01      	subs	r3, #1
 800024e:	4393      	bics	r3, r2
			buffer[4*i+j] |= grb[i] & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 8000250:	1e4a      	subs	r2, r1, #1
 8000252:	4110      	asrs	r0, r2
 8000254:	0002      	movs	r2, r0
 8000256:	4032      	ands	r2, r6
 8000258:	3a01      	subs	r2, #1
 800025a:	43ba      	bics	r2, r7
			buffer[4*i+j] = (grb[i] & 1 << (7 - 2*j) ? 0b1100 : 0b1000)  << 4;
 800025c:	33c0      	adds	r3, #192	@ 0xc0
			buffer[4*i+j] |= grb[i] & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 800025e:	320c      	adds	r2, #12
 8000260:	4313      	orrs	r3, r2
		for(int j = 0; j!= 4; ++j)
 8000262:	3902      	subs	r1, #2
			buffer[4*i+j] |= grb[i] & 1 << (6 - 2*j) ? 0b1100 : 0b1000;
 8000264:	7023      	strb	r3, [r4, #0]
		for(int j = 0; j!= 4; ++j)
 8000266:	3401      	adds	r4, #1
 8000268:	1c4b      	adds	r3, r1, #1
 800026a:	d1ea      	bne.n	8000242 <ws2812_send+0x2a>
	for(int i = 0; i!= 3; ++i)
 800026c:	2301      	movs	r3, #1
 800026e:	469a      	mov	sl, r3
 8000270:	3303      	adds	r3, #3
 8000272:	44d4      	add	ip, sl
 8000274:	469a      	mov	sl, r3
 8000276:	4663      	mov	r3, ip
 8000278:	44d0      	add	r8, sl
 800027a:	2b03      	cmp	r3, #3
 800027c:	d1dc      	bne.n	8000238 <ws2812_send+0x20>
		}
	}
	HAL_SPI_Transmit(&hspi1, buffer, 12, 10);
 800027e:	220c      	movs	r2, #12
 8000280:	3307      	adds	r3, #7
 8000282:	a901      	add	r1, sp, #4
 8000284:	4804      	ldr	r0, [pc, #16]	@ (8000298 <ws2812_send+0x80>)
 8000286:	f001 f84b 	bl	8001320 <HAL_SPI_Transmit>
}
 800028a:	b005      	add	sp, #20
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
 800028e:	46bb      	mov	fp, r7
 8000290:	46b2      	mov	sl, r6
 8000292:	46a9      	mov	r9, r5
 8000294:	46a0      	mov	r8, r4
 8000296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000298:	20000028 	.word	0x20000028

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b500      	push	{lr}
 800029e:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a0:	2234      	movs	r2, #52	@ 0x34
 80002a2:	2100      	movs	r1, #0
 80002a4:	a805      	add	r0, sp, #20
 80002a6:	f001 f911 	bl	80014cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002aa:	2210      	movs	r2, #16
 80002ac:	2100      	movs	r1, #0
 80002ae:	4668      	mov	r0, sp
 80002b0:	f001 f90c 	bl	80014cc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002b4:	2080      	movs	r0, #128	@ 0x80
 80002b6:	0080      	lsls	r0, r0, #2
 80002b8:	f000 fade 	bl	8000878 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002bc:	2302      	movs	r3, #2
 80002be:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c2:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80002c4:	330e      	adds	r3, #14
 80002c6:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 25;
 80002c8:	3309      	adds	r3, #9
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ca:	2280      	movs	r2, #128	@ 0x80
  RCC_OscInitStruct.PLL.PLLN = 25;
 80002cc:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ce:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d0:	0052      	lsls	r2, r2, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002d2:	029b      	lsls	r3, r3, #10
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d4:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002d6:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002d8:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80002da:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002dc:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80002de:	05db      	lsls	r3, r3, #23
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e0:	3240      	adds	r2, #64	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e4:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80002e6:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e8:	f000 faf6 	bl	80008d8 <HAL_RCC_OscConfig>
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x58>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002f2:	e7fe      	b.n	80002f2 <SystemClock_Config+0x56>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f4:	2207      	movs	r2, #7
 80002f6:	2302      	movs	r3, #2
 80002f8:	9200      	str	r2, [sp, #0]
 80002fa:	9301      	str	r3, [sp, #4]
 80002fc:	2200      	movs	r2, #0
 80002fe:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000300:	2102      	movs	r1, #2
 8000302:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000304:	9202      	str	r2, [sp, #8]
 8000306:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000308:	f000 fd92 	bl	8000e30 <HAL_RCC_ClockConfig>
 800030c:	2800      	cmp	r0, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x78>
 8000310:	b672      	cpsid	i
  while (1)
 8000312:	e7fe      	b.n	8000312 <SystemClock_Config+0x76>
}
 8000314:	b013      	add	sp, #76	@ 0x4c
 8000316:	bd00      	pop	{pc}

08000318 <main>:
{
 8000318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800031a:	46c6      	mov	lr, r8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031c:	2501      	movs	r5, #1
{
 800031e:	b500      	push	{lr}
 8000320:	b0b6      	sub	sp, #216	@ 0xd8
  HAL_Init();
 8000322:	f000 f935 	bl	8000590 <HAL_Init>
  SystemClock_Config();
 8000326:	f7ff ffb9 	bl	800029c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032a:	2214      	movs	r2, #20
 800032c:	2100      	movs	r1, #0
 800032e:	a804      	add	r0, sp, #16
 8000330:	f001 f8cc 	bl	80014cc <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000334:	4b3e      	ldr	r3, [pc, #248]	@ (8000430 <main+0x118>)
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000336:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800033a:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033c:	432a      	orrs	r2, r5
 800033e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000340:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000344:	402a      	ands	r2, r5
 8000346:	9202      	str	r2, [sp, #8]
 8000348:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800034a:	2202      	movs	r2, #2
 800034c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800034e:	4311      	orrs	r1, r2
 8000350:	6359      	str	r1, [r3, #52]	@ 0x34
 8000352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000354:	2170      	movs	r1, #112	@ 0x70
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000356:	401a      	ands	r2, r3
 8000358:	9203      	str	r2, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800035c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800035e:	f000 fa85 	bl	800086c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000362:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = CS_Pin|LED1_Pin|LED2_Pin;
 8000364:	2370      	movs	r3, #112	@ 0x70
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000366:	a904      	add	r1, sp, #16
 8000368:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = CS_Pin|LED1_Pin|LED2_Pin;
 800036a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000370:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000372:	f000 f989 	bl	8000688 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000376:	2300      	movs	r3, #0
 8000378:	2203      	movs	r2, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037a:	482e      	ldr	r0, [pc, #184]	@ (8000434 <main+0x11c>)
 800037c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800037e:	9204      	str	r2, [sp, #16]
 8000380:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000382:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000384:	f000 f980 	bl	8000688 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 8000388:	4f2b      	ldr	r7, [pc, #172]	@ (8000438 <main+0x120>)
 800038a:	4b2c      	ldr	r3, [pc, #176]	@ (800043c <main+0x124>)
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800038c:	0038      	movs	r0, r7
  hspi1.Instance = SPI1;
 800038e:	603b      	str	r3, [r7, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000390:	2382      	movs	r3, #130	@ 0x82
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	607b      	str	r3, [r7, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000396:	23e0      	movs	r3, #224	@ 0xe0
 8000398:	00db      	lsls	r3, r3, #3
 800039a:	60fb      	str	r3, [r7, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800039c:	2380      	movs	r3, #128	@ 0x80
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	61bb      	str	r3, [r7, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003a2:	3be9      	subs	r3, #233	@ 0xe9
 80003a4:	3bff      	subs	r3, #255	@ 0xff
 80003a6:	61fb      	str	r3, [r7, #28]
  hspi1.Init.CRCPolynomial = 7;
 80003a8:	3b11      	subs	r3, #17
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003aa:	60bc      	str	r4, [r7, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003ac:	613c      	str	r4, [r7, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80003ae:	617d      	str	r5, [r7, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003b0:	623c      	str	r4, [r7, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b2:	627c      	str	r4, [r7, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b4:	62bc      	str	r4, [r7, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003b8:	633c      	str	r4, [r7, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003ba:	637c      	str	r4, [r7, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003bc:	f000 ff0a 	bl	80011d4 <HAL_SPI_Init>
 80003c0:	2800      	cmp	r0, #0
 80003c2:	d001      	beq.n	80003c8 <main+0xb0>
 80003c4:	b672      	cpsid	i
  while (1)
 80003c6:	e7fe      	b.n	80003c6 <main+0xae>
  uint8_t zero[] = {0,0,0};
 80003c8:	4669      	mov	r1, sp
 80003ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000440 <main+0x128>)
  uint8_t j = 1;
 80003cc:	2601      	movs	r6, #1
  uint8_t zero[] = {0,0,0};
 80003ce:	881a      	ldrh	r2, [r3, #0]
 80003d0:	800a      	strh	r2, [r1, #0]
 80003d2:	789b      	ldrb	r3, [r3, #2]
 80003d4:	708b      	strb	r3, [r1, #2]
  uint8_t violet[] = {238,20,255};
 80003d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000444 <main+0x12c>)
 80003d8:	881a      	ldrh	r2, [r3, #0]
 80003da:	808a      	strh	r2, [r1, #4]
 80003dc:	789b      	ldrb	r3, [r3, #2]
 80003de:	718b      	strb	r3, [r1, #6]
	uint8_t buffer[200] = {0};
 80003e0:	2300      	movs	r3, #0
 80003e2:	4698      	mov	r8, r3
 	 for(uint8_t i = 0;i < j - 1; i++)
 80003e4:	2400      	movs	r4, #0
 80003e6:	1e75      	subs	r5, r6, #1
 80003e8:	2e01      	cmp	r6, #1
 80003ea:	d905      	bls.n	80003f8 <main+0xe0>
 		 ws2812_send(zero);
 80003ec:	4668      	mov	r0, sp
 	 for(uint8_t i = 0;i < j - 1; i++)
 80003ee:	3401      	adds	r4, #1
 		 ws2812_send(zero);
 80003f0:	f7ff ff12 	bl	8000218 <ws2812_send>
 	 for(uint8_t i = 0;i < j - 1; i++)
 80003f4:	42ac      	cmp	r4, r5
 80003f6:	dbf9      	blt.n	80003ec <main+0xd4>
 	  ws2812_send(violet);
 80003f8:	a801      	add	r0, sp, #4
 80003fa:	f7ff ff0d 	bl	8000218 <ws2812_send>
	uint8_t buffer[200] = {0};
 80003fe:	4643      	mov	r3, r8
 8000400:	22c4      	movs	r2, #196	@ 0xc4
 8000402:	2100      	movs	r1, #0
 8000404:	a805      	add	r0, sp, #20
 	  j++;
 8000406:	3601      	adds	r6, #1
	uint8_t buffer[200] = {0};
 8000408:	9304      	str	r3, [sp, #16]
 	  j++;
 800040a:	b2f6      	uxtb	r6, r6
	uint8_t buffer[200] = {0};
 800040c:	f001 f85e 	bl	80014cc <memset>
	HAL_SPI_Transmit(&hspi1, buffer, 200, 10);
 8000410:	230a      	movs	r3, #10
 8000412:	22c8      	movs	r2, #200	@ 0xc8
 8000414:	0038      	movs	r0, r7
 8000416:	a904      	add	r1, sp, #16
 8000418:	f000 ff82 	bl	8001320 <HAL_SPI_Transmit>
 	  HAL_Delay(50);
 800041c:	2032      	movs	r0, #50	@ 0x32
 	  if(j == 194)j = 1;
 800041e:	2ec2      	cmp	r6, #194	@ 0xc2
 8000420:	d103      	bne.n	800042a <main+0x112>
 	  HAL_Delay(50);
 8000422:	f000 f8db 	bl	80005dc <HAL_Delay>
 	  if(j == 194)j = 1;
 8000426:	3ec1      	subs	r6, #193	@ 0xc1
 8000428:	e7e6      	b.n	80003f8 <main+0xe0>
 	  HAL_Delay(50);
 800042a:	f000 f8d7 	bl	80005dc <HAL_Delay>
 	 for(uint8_t i = 0;i < j - 1; i++)
 800042e:	e7d9      	b.n	80003e4 <main+0xcc>
 8000430:	40021000 	.word	0x40021000
 8000434:	50000400 	.word	0x50000400
 8000438:	20000028 	.word	0x20000028
 800043c:	40013000 	.word	0x40013000
 8000440:	0800153c 	.word	0x0800153c
 8000444:	08001540 	.word	0x08001540

08000448 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000448:	2201      	movs	r2, #1
 800044a:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <HAL_MspInit+0x2c>)
{
 800044c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000450:	4311      	orrs	r1, r2
 8000452:	6419      	str	r1, [r3, #64]	@ 0x40
 8000454:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000456:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000458:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045a:	9200      	str	r2, [sp, #0]
 800045c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000460:	0549      	lsls	r1, r1, #21
 8000462:	430a      	orrs	r2, r1
 8000464:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000468:	400b      	ands	r3, r1
 800046a:	9301      	str	r3, [sp, #4]
 800046c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046e:	b002      	add	sp, #8
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	40021000 	.word	0x40021000

08000478 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000478:	b510      	push	{r4, lr}
 800047a:	0004      	movs	r4, r0
 800047c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	2214      	movs	r2, #20
 8000480:	2100      	movs	r1, #0
 8000482:	a802      	add	r0, sp, #8
 8000484:	f001 f822 	bl	80014cc <memset>
  if(hspi->Instance==SPI1)
 8000488:	4b10      	ldr	r3, [pc, #64]	@ (80004cc <HAL_SPI_MspInit+0x54>)
 800048a:	6822      	ldr	r2, [r4, #0]
 800048c:	429a      	cmp	r2, r3
 800048e:	d001      	beq.n	8000494 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000490:	b008      	add	sp, #32
 8000492:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000494:	2180      	movs	r1, #128	@ 0x80
 8000496:	4b0e      	ldr	r3, [pc, #56]	@ (80004d0 <HAL_SPI_MspInit+0x58>)
 8000498:	0149      	lsls	r1, r1, #5
 800049a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049c:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 800049e:	430a      	orrs	r2, r1
 80004a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80004a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004a6:	400a      	ands	r2, r1
 80004a8:	9200      	str	r2, [sp, #0]
 80004aa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ac:	2201      	movs	r2, #1
 80004ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80004b0:	4311      	orrs	r1, r2
 80004b2:	6359      	str	r1, [r3, #52]	@ 0x34
 80004b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	401a      	ands	r2, r3
 80004ba:	9201      	str	r2, [sp, #4]
 80004bc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SCK_Pin|DIN_Pin;
 80004be:	2282      	movs	r2, #130	@ 0x82
 80004c0:	2302      	movs	r3, #2
 80004c2:	9202      	str	r2, [sp, #8]
 80004c4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c6:	f000 f8df 	bl	8000688 <HAL_GPIO_Init>
}
 80004ca:	e7e1      	b.n	8000490 <HAL_SPI_MspInit+0x18>
 80004cc:	40013000 	.word	0x40013000
 80004d0:	40021000 	.word	0x40021000

080004d4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004d4:	e7fe      	b.n	80004d4 <NMI_Handler>
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <HardFault_Handler>
 80004da:	46c0      	nop			@ (mov r8, r8)

080004dc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004dc:	4770      	bx	lr
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e6:	f000 f867 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ea:	bd10      	pop	{r4, pc}

080004ec <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ec:	4770      	bx	lr
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f0:	480d      	ldr	r0, [pc, #52]	@ (8000528 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80004f4:	f7ff fffa 	bl	80004ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f8:	480c      	ldr	r0, [pc, #48]	@ (800052c <LoopForever+0x6>)
  ldr r1, =_edata
 80004fa:	490d      	ldr	r1, [pc, #52]	@ (8000530 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000534 <LoopForever+0xe>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000500:	e002      	b.n	8000508 <LoopCopyDataInit>

08000502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000506:	3304      	adds	r3, #4

08000508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800050c:	d3f9      	bcc.n	8000502 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050e:	4a0a      	ldr	r2, [pc, #40]	@ (8000538 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000510:	4c0a      	ldr	r4, [pc, #40]	@ (800053c <LoopForever+0x16>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000514:	e001      	b.n	800051a <LoopFillZerobss>

08000516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000518:	3204      	adds	r2, #4

0800051a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800051c:	d3fb      	bcc.n	8000516 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800051e:	f000 ffdd 	bl	80014dc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000522:	f7ff fef9 	bl	8000318 <main>

08000526 <LoopForever>:

LoopForever:
  b LoopForever
 8000526:	e7fe      	b.n	8000526 <LoopForever>
  ldr   r0, =_estack
 8000528:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800052c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000530:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000534:	0800158c 	.word	0x0800158c
  ldr r2, =_sbss
 8000538:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800053c:	20000090 	.word	0x20000090

08000540 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC1_IRQHandler>
	...

08000544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000544:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000546:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <HAL_InitTick+0x40>)
{
 8000548:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 800054a:	7819      	ldrb	r1, [r3, #0]
 800054c:	2900      	cmp	r1, #0
 800054e:	d101      	bne.n	8000554 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8000550:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8000552:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000554:	20fa      	movs	r0, #250	@ 0xfa
 8000556:	0080      	lsls	r0, r0, #2
 8000558:	f7ff fdd2 	bl	8000100 <__udivsi3>
 800055c:	4d0a      	ldr	r5, [pc, #40]	@ (8000588 <HAL_InitTick+0x44>)
 800055e:	0001      	movs	r1, r0
 8000560:	6828      	ldr	r0, [r5, #0]
 8000562:	f7ff fdcd 	bl	8000100 <__udivsi3>
 8000566:	f000 f875 	bl	8000654 <HAL_SYSTICK_Config>
 800056a:	2800      	cmp	r0, #0
 800056c:	d1f0      	bne.n	8000550 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	2c03      	cmp	r4, #3
 8000570:	d8ee      	bhi.n	8000550 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000572:	3801      	subs	r0, #1
 8000574:	2200      	movs	r2, #0
 8000576:	0021      	movs	r1, r4
 8000578:	f000 f842 	bl	8000600 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800057c:	4b03      	ldr	r3, [pc, #12]	@ (800058c <HAL_InitTick+0x48>)
 800057e:	2000      	movs	r0, #0
 8000580:	601c      	str	r4, [r3, #0]
  return status;
 8000582:	e7e6      	b.n	8000552 <HAL_InitTick+0xe>
 8000584:	20000004 	.word	0x20000004
 8000588:	20000000 	.word	0x20000000
 800058c:	20000008 	.word	0x20000008

08000590 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	4a08      	ldr	r2, [pc, #32]	@ (80005b4 <HAL_Init+0x24>)
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	6811      	ldr	r1, [r2, #0]
{
 8000598:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059a:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800059c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059e:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005a0:	f7ff ffd0 	bl	8000544 <HAL_InitTick>
 80005a4:	1e04      	subs	r4, r0, #0
 80005a6:	d002      	beq.n	80005ae <HAL_Init+0x1e>
    status = HAL_ERROR;
 80005a8:	2401      	movs	r4, #1
}
 80005aa:	0020      	movs	r0, r4
 80005ac:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 80005ae:	f7ff ff4b 	bl	8000448 <HAL_MspInit>
 80005b2:	e7fa      	b.n	80005aa <HAL_Init+0x1a>
 80005b4:	40022000 	.word	0x40022000

080005b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80005b8:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <HAL_IncTick+0x10>)
 80005ba:	4b04      	ldr	r3, [pc, #16]	@ (80005cc <HAL_IncTick+0x14>)
 80005bc:	6811      	ldr	r1, [r2, #0]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	185b      	adds	r3, r3, r1
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	4770      	bx	lr
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	2000008c 	.word	0x2000008c
 80005cc:	20000004 	.word	0x20000004

080005d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005d0:	4b01      	ldr	r3, [pc, #4]	@ (80005d8 <HAL_GetTick+0x8>)
 80005d2:	6818      	ldr	r0, [r3, #0]
}
 80005d4:	4770      	bx	lr
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	2000008c 	.word	0x2000008c

080005dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005e0:	f7ff fff6 	bl	80005d0 <HAL_GetTick>
 80005e4:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e6:	1c63      	adds	r3, r4, #1
 80005e8:	d002      	beq.n	80005f0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ea:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <HAL_Delay+0x20>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	1b40      	subs	r0, r0, r5
 80005f6:	42a0      	cmp	r0, r4
 80005f8:	d3fa      	bcc.n	80005f0 <HAL_Delay+0x14>
  {
  }
}
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	20000004 	.word	0x20000004

08000600 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000600:	22ff      	movs	r2, #255	@ 0xff
 8000602:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000604:	b510      	push	{r4, lr}
 8000606:	0014      	movs	r4, r2
 8000608:	4003      	ands	r3, r0
 800060a:	00db      	lsls	r3, r3, #3
 800060c:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800060e:	0189      	lsls	r1, r1, #6
 8000610:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000612:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000614:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8000616:	2800      	cmp	r0, #0
 8000618:	db0b      	blt.n	8000632 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800061a:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <HAL_NVIC_SetPriority+0x4c>)
 800061c:	21c0      	movs	r1, #192	@ 0xc0
 800061e:	469c      	mov	ip, r3
 8000620:	0880      	lsrs	r0, r0, #2
 8000622:	0080      	lsls	r0, r0, #2
 8000624:	4460      	add	r0, ip
 8000626:	0089      	lsls	r1, r1, #2
 8000628:	5843      	ldr	r3, [r0, r1]
 800062a:	4023      	ands	r3, r4
 800062c:	4313      	orrs	r3, r2
 800062e:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000630:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000632:	230f      	movs	r3, #15
 8000634:	4906      	ldr	r1, [pc, #24]	@ (8000650 <HAL_NVIC_SetPriority+0x50>)
 8000636:	4003      	ands	r3, r0
 8000638:	468c      	mov	ip, r1
 800063a:	3b08      	subs	r3, #8
 800063c:	089b      	lsrs	r3, r3, #2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4463      	add	r3, ip
 8000642:	69d9      	ldr	r1, [r3, #28]
 8000644:	400c      	ands	r4, r1
 8000646:	4314      	orrs	r4, r2
 8000648:	61dc      	str	r4, [r3, #28]
 800064a:	e7f1      	b.n	8000630 <HAL_NVIC_SetPriority+0x30>
 800064c:	e000e100 	.word	0xe000e100
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000654:	2280      	movs	r2, #128	@ 0x80
 8000656:	1e43      	subs	r3, r0, #1
 8000658:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800065a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800065c:	4293      	cmp	r3, r2
 800065e:	d20e      	bcs.n	800067e <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000660:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000662:	4a07      	ldr	r2, [pc, #28]	@ (8000680 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000664:	4807      	ldr	r0, [pc, #28]	@ (8000684 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000666:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000668:	6a03      	ldr	r3, [r0, #32]
 800066a:	0609      	lsls	r1, r1, #24
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	0a1b      	lsrs	r3, r3, #8
 8000670:	430b      	orrs	r3, r1
 8000672:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000674:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000676:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000678:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800067a:	3307      	adds	r3, #7
 800067c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800067e:	4770      	bx	lr
 8000680:	e000e010 	.word	0xe000e010
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068a:	46de      	mov	lr, fp
 800068c:	4657      	mov	r7, sl
 800068e:	464e      	mov	r6, r9
 8000690:	4645      	mov	r5, r8
 8000692:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000694:	680c      	ldr	r4, [r1, #0]
{
 8000696:	468b      	mov	fp, r1
  uint32_t position = 0x00u;
 8000698:	2300      	movs	r3, #0
{
 800069a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800069c:	2c00      	cmp	r4, #0
 800069e:	d068      	beq.n	8000772 <HAL_GPIO_Init+0xea>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80006a0:	2201      	movs	r2, #1
 80006a2:	409a      	lsls	r2, r3
 80006a4:	4694      	mov	ip, r2
 80006a6:	4022      	ands	r2, r4
 80006a8:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 80006aa:	4662      	mov	r2, ip
 80006ac:	4214      	tst	r4, r2
 80006ae:	d05c      	beq.n	800076a <HAL_GPIO_Init+0xe2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80006b0:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80006b2:	465a      	mov	r2, fp
 80006b4:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80006b6:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80006b8:	6855      	ldr	r5, [r2, #4]
 80006ba:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80006bc:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80006be:	402a      	ands	r2, r5
 80006c0:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80006c2:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80006c4:	2e01      	cmp	r6, #1
 80006c6:	d95b      	bls.n	8000780 <HAL_GPIO_Init+0xf8>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80006c8:	2a03      	cmp	r2, #3
 80006ca:	d000      	beq.n	80006ce <HAL_GPIO_Init+0x46>
 80006cc:	e0ad      	b.n	800082a <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006ce:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80006d0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006d2:	9900      	ldr	r1, [sp, #0]
 80006d4:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006d6:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 80006d8:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80006da:	22c0      	movs	r2, #192	@ 0xc0
 80006dc:	0292      	lsls	r2, r2, #10
 80006de:	4215      	tst	r5, r2
 80006e0:	d043      	beq.n	800076a <HAL_GPIO_Init+0xe2>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80006e2:	2703      	movs	r7, #3
 80006e4:	260f      	movs	r6, #15
 80006e6:	495d      	ldr	r1, [pc, #372]	@ (800085c <HAL_GPIO_Init+0x1d4>)
 80006e8:	401f      	ands	r7, r3
 80006ea:	468c      	mov	ip, r1
 80006ec:	00ff      	lsls	r7, r7, #3
 80006ee:	40be      	lsls	r6, r7
        temp = EXTI->EXTICR[position >> 2u];
 80006f0:	089a      	lsrs	r2, r3, #2
 80006f2:	0092      	lsls	r2, r2, #2
 80006f4:	4462      	add	r2, ip
 80006f6:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80006f8:	43b1      	bics	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80006fa:	26a0      	movs	r6, #160	@ 0xa0
 80006fc:	05f6      	lsls	r6, r6, #23
 80006fe:	42b0      	cmp	r0, r6
 8000700:	d00e      	beq.n	8000720 <HAL_GPIO_Init+0x98>
 8000702:	4e57      	ldr	r6, [pc, #348]	@ (8000860 <HAL_GPIO_Init+0x1d8>)
 8000704:	42b0      	cmp	r0, r6
 8000706:	d100      	bne.n	800070a <HAL_GPIO_Init+0x82>
 8000708:	e0a0      	b.n	800084c <HAL_GPIO_Init+0x1c4>
 800070a:	4e56      	ldr	r6, [pc, #344]	@ (8000864 <HAL_GPIO_Init+0x1dc>)
 800070c:	42b0      	cmp	r0, r6
 800070e:	d100      	bne.n	8000712 <HAL_GPIO_Init+0x8a>
 8000710:	e0a0      	b.n	8000854 <HAL_GPIO_Init+0x1cc>
 8000712:	4e55      	ldr	r6, [pc, #340]	@ (8000868 <HAL_GPIO_Init+0x1e0>)
 8000714:	42b0      	cmp	r0, r6
 8000716:	d100      	bne.n	800071a <HAL_GPIO_Init+0x92>
 8000718:	e094      	b.n	8000844 <HAL_GPIO_Init+0x1bc>
 800071a:	2605      	movs	r6, #5
 800071c:	40be      	lsls	r6, r7
 800071e:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000720:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 8000722:	6611      	str	r1, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 8000724:	4651      	mov	r1, sl
        temp = EXTI->RTSR1;
 8000726:	4a4d      	ldr	r2, [pc, #308]	@ (800085c <HAL_GPIO_Init+0x1d4>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000728:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 800072a:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR1;
 800072c:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800072e:	4235      	tst	r5, r6
 8000730:	d000      	beq.n	8000734 <HAL_GPIO_Init+0xac>
 8000732:	e077      	b.n	8000824 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8000734:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8000736:	4e49      	ldr	r6, [pc, #292]	@ (800085c <HAL_GPIO_Init+0x1d4>)
 8000738:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 800073a:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800073c:	2680      	movs	r6, #128	@ 0x80
 800073e:	03b6      	lsls	r6, r6, #14
 8000740:	4235      	tst	r5, r6
 8000742:	d16c      	bne.n	800081e <HAL_GPIO_Init+0x196>
        temp &= ~(iocurrent);
 8000744:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8000746:	4e45      	ldr	r6, [pc, #276]	@ (800085c <HAL_GPIO_Init+0x1d4>)
 8000748:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800074a:	2284      	movs	r2, #132	@ 0x84
 800074c:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800074e:	03af      	lsls	r7, r5, #14
 8000750:	d462      	bmi.n	8000818 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 8000752:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8000754:	2784      	movs	r7, #132	@ 0x84
 8000756:	4e41      	ldr	r6, [pc, #260]	@ (800085c <HAL_GPIO_Init+0x1d4>)
 8000758:	51f2      	str	r2, [r6, r7]

        temp = EXTI->IMR1;
 800075a:	2280      	movs	r2, #128	@ 0x80
 800075c:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800075e:	03ed      	lsls	r5, r5, #15
 8000760:	d456      	bmi.n	8000810 <HAL_GPIO_Init+0x188>
        temp &= ~(iocurrent);
 8000762:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8000764:	2180      	movs	r1, #128	@ 0x80
 8000766:	4d3d      	ldr	r5, [pc, #244]	@ (800085c <HAL_GPIO_Init+0x1d4>)
 8000768:	506a      	str	r2, [r5, r1]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800076a:	0022      	movs	r2, r4
      }
    }

    position++;
 800076c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800076e:	40da      	lsrs	r2, r3
 8000770:	d196      	bne.n	80006a0 <HAL_GPIO_Init+0x18>
  }
}
 8000772:	b003      	add	sp, #12
 8000774:	bcf0      	pop	{r4, r5, r6, r7}
 8000776:	46bb      	mov	fp, r7
 8000778:	46b2      	mov	sl, r6
 800077a:	46a9      	mov	r9, r5
 800077c:	46a0      	mov	r8, r4
 800077e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8000780:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000782:	000e      	movs	r6, r1
 8000784:	9900      	ldr	r1, [sp, #0]
 8000786:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000788:	4659      	mov	r1, fp
 800078a:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800078c:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800078e:	000e      	movs	r6, r1
 8000790:	40be      	lsls	r6, r7
 8000792:	46b0      	mov	r8, r6
 8000794:	464e      	mov	r6, r9
 8000796:	4641      	mov	r1, r8
 8000798:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 800079a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800079c:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800079e:	000e      	movs	r6, r1
 80007a0:	4661      	mov	r1, ip
 80007a2:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007a4:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007a6:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007a8:	000e      	movs	r6, r1
 80007aa:	2101      	movs	r1, #1
 80007ac:	400e      	ands	r6, r1
 80007ae:	409e      	lsls	r6, r3
 80007b0:	46b4      	mov	ip, r6
 80007b2:	4646      	mov	r6, r8
 80007b4:	4661      	mov	r1, ip
 80007b6:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 80007b8:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80007ba:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80007bc:	000e      	movs	r6, r1
 80007be:	9900      	ldr	r1, [sp, #0]
 80007c0:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80007c2:	4659      	mov	r1, fp
 80007c4:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80007c6:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80007c8:	000e      	movs	r6, r1
 80007ca:	40be      	lsls	r6, r7
 80007cc:	46b4      	mov	ip, r6
 80007ce:	4646      	mov	r6, r8
 80007d0:	4661      	mov	r1, ip
 80007d2:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 80007d4:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007d6:	2a02      	cmp	r2, #2
 80007d8:	d000      	beq.n	80007dc <HAL_GPIO_Init+0x154>
 80007da:	e778      	b.n	80006ce <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 80007dc:	08d9      	lsrs	r1, r3, #3
 80007de:	0089      	lsls	r1, r1, #2
 80007e0:	468c      	mov	ip, r1
 80007e2:	4484      	add	ip, r0
 80007e4:	4661      	mov	r1, ip
 80007e6:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007e8:	2107      	movs	r1, #7
 80007ea:	4019      	ands	r1, r3
 80007ec:	0089      	lsls	r1, r1, #2
 80007ee:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 80007f0:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007f2:	210f      	movs	r1, #15
 80007f4:	4646      	mov	r6, r8
 80007f6:	40b1      	lsls	r1, r6
 80007f8:	9e01      	ldr	r6, [sp, #4]
 80007fa:	438e      	bics	r6, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007fc:	4659      	mov	r1, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007fe:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000800:	4646      	mov	r6, r8
 8000802:	6909      	ldr	r1, [r1, #16]
 8000804:	40b1      	lsls	r1, r6
 8000806:	9e01      	ldr	r6, [sp, #4]
 8000808:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 800080a:	4661      	mov	r1, ip
 800080c:	620e      	str	r6, [r1, #32]
 800080e:	e75e      	b.n	80006ce <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 8000810:	4651      	mov	r1, sl
 8000812:	4311      	orrs	r1, r2
 8000814:	000a      	movs	r2, r1
 8000816:	e7a5      	b.n	8000764 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8000818:	4656      	mov	r6, sl
 800081a:	4332      	orrs	r2, r6
 800081c:	e79a      	b.n	8000754 <HAL_GPIO_Init+0xcc>
          temp |= iocurrent;
 800081e:	4656      	mov	r6, sl
 8000820:	4332      	orrs	r2, r6
 8000822:	e790      	b.n	8000746 <HAL_GPIO_Init+0xbe>
          temp |= iocurrent;
 8000824:	4656      	mov	r6, sl
 8000826:	4332      	orrs	r2, r6
 8000828:	e785      	b.n	8000736 <HAL_GPIO_Init+0xae>
        temp = GPIOx->PUPDR;
 800082a:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800082c:	9e00      	ldr	r6, [sp, #0]
 800082e:	4031      	ands	r1, r6
 8000830:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000832:	4659      	mov	r1, fp
 8000834:	6889      	ldr	r1, [r1, #8]
 8000836:	40b9      	lsls	r1, r7
 8000838:	468c      	mov	ip, r1
 800083a:	4641      	mov	r1, r8
 800083c:	4666      	mov	r6, ip
 800083e:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8000840:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000842:	e744      	b.n	80006ce <HAL_GPIO_Init+0x46>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000844:	2603      	movs	r6, #3
 8000846:	40be      	lsls	r6, r7
 8000848:	4331      	orrs	r1, r6
 800084a:	e769      	b.n	8000720 <HAL_GPIO_Init+0x98>
 800084c:	2601      	movs	r6, #1
 800084e:	40be      	lsls	r6, r7
 8000850:	4331      	orrs	r1, r6
 8000852:	e765      	b.n	8000720 <HAL_GPIO_Init+0x98>
 8000854:	2602      	movs	r6, #2
 8000856:	40be      	lsls	r6, r7
 8000858:	4331      	orrs	r1, r6
 800085a:	e761      	b.n	8000720 <HAL_GPIO_Init+0x98>
 800085c:	40021800 	.word	0x40021800
 8000860:	50000400 	.word	0x50000400
 8000864:	50000800 	.word	0x50000800
 8000868:	50000c00 	.word	0x50000c00

0800086c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800086c:	2a00      	cmp	r2, #0
 800086e:	d001      	beq.n	8000874 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000870:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000872:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000874:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8000876:	e7fc      	b.n	8000872 <HAL_GPIO_WritePin+0x6>

08000878 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000878:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800087a:	4c13      	ldr	r4, [pc, #76]	@ (80008c8 <HAL_PWREx_ControlVoltageScaling+0x50>)
 800087c:	4a13      	ldr	r2, [pc, #76]	@ (80008cc <HAL_PWREx_ControlVoltageScaling+0x54>)
 800087e:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000880:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000882:	4013      	ands	r3, r2
 8000884:	4303      	orrs	r3, r0
 8000886:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000888:	2380      	movs	r3, #128	@ 0x80
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	4298      	cmp	r0, r3
 800088e:	d001      	beq.n	8000894 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8000890:	0028      	movs	r0, r5
 8000892:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000894:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8000896:	490f      	ldr	r1, [pc, #60]	@ (80008d4 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	0058      	lsls	r0, r3, #1
 800089c:	18c0      	adds	r0, r0, r3
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	f7ff fc2e 	bl	8000100 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80008a4:	2280      	movs	r2, #128	@ 0x80
 80008a6:	6963      	ldr	r3, [r4, #20]
 80008a8:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80008aa:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80008ac:	4213      	tst	r3, r2
 80008ae:	d102      	bne.n	80008b6 <HAL_PWREx_ControlVoltageScaling+0x3e>
 80008b0:	e7ee      	b.n	8000890 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 80008b2:	2800      	cmp	r0, #0
 80008b4:	d005      	beq.n	80008c2 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80008b6:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 80008b8:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80008ba:	4213      	tst	r3, r2
 80008bc:	d1f9      	bne.n	80008b2 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 80008be:	2500      	movs	r5, #0
 80008c0:	e7e6      	b.n	8000890 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 80008c2:	2503      	movs	r5, #3
 80008c4:	e7e4      	b.n	8000890 <HAL_PWREx_ControlVoltageScaling+0x18>
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	40007000 	.word	0x40007000
 80008cc:	fffff9ff 	.word	0xfffff9ff
 80008d0:	20000000 	.word	0x20000000
 80008d4:	000f4240 	.word	0x000f4240

080008d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008da:	46ce      	mov	lr, r9
 80008dc:	4647      	mov	r7, r8
 80008de:	b580      	push	{r7, lr}
 80008e0:	0004      	movs	r4, r0
 80008e2:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d027      	beq.n	8000938 <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008e8:	6803      	ldr	r3, [r0, #0]
 80008ea:	07da      	lsls	r2, r3, #31
 80008ec:	d511      	bpl.n	8000912 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80008ee:	2238      	movs	r2, #56	@ 0x38
 80008f0:	49c0      	ldr	r1, [pc, #768]	@ (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 80008f2:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80008f4:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80008f6:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80008f8:	2a10      	cmp	r2, #16
 80008fa:	d100      	bne.n	80008fe <HAL_RCC_OscConfig+0x26>
 80008fc:	e0cc      	b.n	8000a98 <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80008fe:	2a08      	cmp	r2, #8
 8000900:	d000      	beq.n	8000904 <HAL_RCC_OscConfig+0x2c>
 8000902:	e0cd      	b.n	8000aa0 <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000904:	4abb      	ldr	r2, [pc, #748]	@ (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000906:	6812      	ldr	r2, [r2, #0]
 8000908:	0392      	lsls	r2, r2, #14
 800090a:	d502      	bpl.n	8000912 <HAL_RCC_OscConfig+0x3a>
 800090c:	6862      	ldr	r2, [r4, #4]
 800090e:	2a00      	cmp	r2, #0
 8000910:	d012      	beq.n	8000938 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000912:	079a      	lsls	r2, r3, #30
 8000914:	d532      	bpl.n	800097c <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000916:	2338      	movs	r3, #56	@ 0x38
 8000918:	4ab6      	ldr	r2, [pc, #728]	@ (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 800091a:	6891      	ldr	r1, [r2, #8]
 800091c:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800091e:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000920:	2b10      	cmp	r3, #16
 8000922:	d100      	bne.n	8000926 <HAL_RCC_OscConfig+0x4e>
 8000924:	e10b      	b.n	8000b3e <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000926:	2b00      	cmp	r3, #0
 8000928:	d000      	beq.n	800092c <HAL_RCC_OscConfig+0x54>
 800092a:	e10d      	b.n	8000b48 <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800092c:	6813      	ldr	r3, [r2, #0]
 800092e:	055b      	lsls	r3, r3, #21
 8000930:	d508      	bpl.n	8000944 <HAL_RCC_OscConfig+0x6c>
 8000932:	68e3      	ldr	r3, [r4, #12]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d105      	bne.n	8000944 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8000938:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 800093a:	b003      	add	sp, #12
 800093c:	bcc0      	pop	{r6, r7}
 800093e:	46b9      	mov	r9, r7
 8000940:	46b0      	mov	r8, r6
 8000942:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000944:	6851      	ldr	r1, [r2, #4]
 8000946:	6963      	ldr	r3, [r4, #20]
 8000948:	48ab      	ldr	r0, [pc, #684]	@ (8000bf8 <HAL_RCC_OscConfig+0x320>)
 800094a:	021b      	lsls	r3, r3, #8
 800094c:	4001      	ands	r1, r0
 800094e:	430b      	orrs	r3, r1
 8000950:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000952:	4aa8      	ldr	r2, [pc, #672]	@ (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000954:	49a9      	ldr	r1, [pc, #676]	@ (8000bfc <HAL_RCC_OscConfig+0x324>)
 8000956:	6813      	ldr	r3, [r2, #0]
 8000958:	400b      	ands	r3, r1
 800095a:	6921      	ldr	r1, [r4, #16]
 800095c:	430b      	orrs	r3, r1
 800095e:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000960:	6813      	ldr	r3, [r2, #0]
 8000962:	4aa7      	ldr	r2, [pc, #668]	@ (8000c00 <HAL_RCC_OscConfig+0x328>)
 8000964:	049b      	lsls	r3, r3, #18
 8000966:	0f5b      	lsrs	r3, r3, #29
 8000968:	40da      	lsrs	r2, r3
 800096a:	49a6      	ldr	r1, [pc, #664]	@ (8000c04 <HAL_RCC_OscConfig+0x32c>)
 800096c:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800096e:	4ba6      	ldr	r3, [pc, #664]	@ (8000c08 <HAL_RCC_OscConfig+0x330>)
 8000970:	6818      	ldr	r0, [r3, #0]
 8000972:	f7ff fde7 	bl	8000544 <HAL_InitTick>
 8000976:	2800      	cmp	r0, #0
 8000978:	d1de      	bne.n	8000938 <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800097a:	6823      	ldr	r3, [r4, #0]
 800097c:	071a      	lsls	r2, r3, #28
 800097e:	d46d      	bmi.n	8000a5c <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000980:	075b      	lsls	r3, r3, #29
 8000982:	d545      	bpl.n	8000a10 <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000984:	2338      	movs	r3, #56	@ 0x38
 8000986:	4a9b      	ldr	r2, [pc, #620]	@ (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000988:	6891      	ldr	r1, [r2, #8]
 800098a:	400b      	ands	r3, r1
 800098c:	2b20      	cmp	r3, #32
 800098e:	d100      	bne.n	8000992 <HAL_RCC_OscConfig+0xba>
 8000990:	e0cc      	b.n	8000b2c <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000992:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000994:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000996:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000998:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800099a:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800099c:	4219      	tst	r1, r3
 800099e:	d108      	bne.n	80009b2 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80009a2:	4319      	orrs	r1, r3
 80009a4:	63d1      	str	r1, [r2, #60]	@ 0x3c
 80009a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80009a8:	4013      	ands	r3, r2
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 80009ae:	2301      	movs	r3, #1
 80009b0:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80009b2:	2780      	movs	r7, #128	@ 0x80
 80009b4:	4e95      	ldr	r6, [pc, #596]	@ (8000c0c <HAL_RCC_OscConfig+0x334>)
 80009b6:	007f      	lsls	r7, r7, #1
 80009b8:	6833      	ldr	r3, [r6, #0]
 80009ba:	423b      	tst	r3, r7
 80009bc:	d100      	bne.n	80009c0 <HAL_RCC_OscConfig+0xe8>
 80009be:	e0ff      	b.n	8000bc0 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009c0:	68a3      	ldr	r3, [r4, #8]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d100      	bne.n	80009c8 <HAL_RCC_OscConfig+0xf0>
 80009c6:	e0e5      	b.n	8000b94 <HAL_RCC_OscConfig+0x2bc>
 80009c8:	2b05      	cmp	r3, #5
 80009ca:	d100      	bne.n	80009ce <HAL_RCC_OscConfig+0xf6>
 80009cc:	e1c8      	b.n	8000d60 <HAL_RCC_OscConfig+0x488>
 80009ce:	2101      	movs	r1, #1
 80009d0:	4e88      	ldr	r6, [pc, #544]	@ (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 80009d2:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 80009d4:	438a      	bics	r2, r1
 80009d6:	65f2      	str	r2, [r6, #92]	@ 0x5c
 80009d8:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 80009da:	3103      	adds	r1, #3
 80009dc:	438a      	bics	r2, r1
 80009de:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d000      	beq.n	80009e6 <HAL_RCC_OscConfig+0x10e>
 80009e4:	e0da      	b.n	8000b9c <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 80009e6:	f7ff fdf3 	bl	80005d0 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80009ea:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 80009ec:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80009ee:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009f0:	4d87      	ldr	r5, [pc, #540]	@ (8000c10 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80009f2:	e005      	b.n	8000a00 <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009f4:	f7ff fdec 	bl	80005d0 <HAL_GetTick>
 80009f8:	1bc0      	subs	r0, r0, r7
 80009fa:	42a8      	cmp	r0, r5
 80009fc:	d900      	bls.n	8000a00 <HAL_RCC_OscConfig+0x128>
 80009fe:	e0ee      	b.n	8000bde <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000a00:	4642      	mov	r2, r8
 8000a02:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8000a04:	421a      	tst	r2, r3
 8000a06:	d1f5      	bne.n	80009f4 <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 8000a08:	464b      	mov	r3, r9
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d100      	bne.n	8000a10 <HAL_RCC_OscConfig+0x138>
 8000a0e:	e163      	b.n	8000cd8 <HAL_RCC_OscConfig+0x400>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000a10:	69e3      	ldr	r3, [r4, #28]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d020      	beq.n	8000a58 <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a16:	2238      	movs	r2, #56	@ 0x38
 8000a18:	4d76      	ldr	r5, [pc, #472]	@ (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000a1a:	68a9      	ldr	r1, [r5, #8]
 8000a1c:	400a      	ands	r2, r1
 8000a1e:	2a10      	cmp	r2, #16
 8000a20:	d100      	bne.n	8000a24 <HAL_RCC_OscConfig+0x14c>
 8000a22:	e11d      	b.n	8000c60 <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d100      	bne.n	8000a2a <HAL_RCC_OscConfig+0x152>
 8000a28:	e15c      	b.n	8000ce4 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_PLL_DISABLE();
 8000a2a:	682b      	ldr	r3, [r5, #0]
 8000a2c:	4a79      	ldr	r2, [pc, #484]	@ (8000c14 <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000a2e:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8000a30:	4013      	ands	r3, r2
 8000a32:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a34:	f7ff fdcc 	bl	80005d0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000a38:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8000a3a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000a3c:	e005      	b.n	8000a4a <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a3e:	f7ff fdc7 	bl	80005d0 <HAL_GetTick>
 8000a42:	1b00      	subs	r0, r0, r4
 8000a44:	2802      	cmp	r0, #2
 8000a46:	d900      	bls.n	8000a4a <HAL_RCC_OscConfig+0x172>
 8000a48:	e0c9      	b.n	8000bde <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000a4a:	682b      	ldr	r3, [r5, #0]
 8000a4c:	4233      	tst	r3, r6
 8000a4e:	d1f6      	bne.n	8000a3e <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8000a50:	68eb      	ldr	r3, [r5, #12]
 8000a52:	4a71      	ldr	r2, [pc, #452]	@ (8000c18 <HAL_RCC_OscConfig+0x340>)
 8000a54:	4013      	ands	r3, r2
 8000a56:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8000a58:	2000      	movs	r0, #0
 8000a5a:	e76e      	b.n	800093a <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000a5c:	2238      	movs	r2, #56	@ 0x38
 8000a5e:	4d65      	ldr	r5, [pc, #404]	@ (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000a60:	68a9      	ldr	r1, [r5, #8]
 8000a62:	400a      	ands	r2, r1
 8000a64:	2a18      	cmp	r2, #24
 8000a66:	d043      	beq.n	8000af0 <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a68:	69a3      	ldr	r3, [r4, #24]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d100      	bne.n	8000a70 <HAL_RCC_OscConfig+0x198>
 8000a6e:	e0b8      	b.n	8000be2 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 8000a70:	2201      	movs	r2, #1
 8000a72:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000a74:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8000a76:	4313      	orrs	r3, r2
 8000a78:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000a7a:	f7ff fda9 	bl	80005d0 <HAL_GetTick>
 8000a7e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000a80:	e005      	b.n	8000a8e <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a82:	f7ff fda5 	bl	80005d0 <HAL_GetTick>
 8000a86:	1b80      	subs	r0, r0, r6
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d900      	bls.n	8000a8e <HAL_RCC_OscConfig+0x1b6>
 8000a8c:	e0a7      	b.n	8000bde <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000a8e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8000a90:	421f      	tst	r7, r3
 8000a92:	d0f6      	beq.n	8000a82 <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a94:	6823      	ldr	r3, [r4, #0]
 8000a96:	e773      	b.n	8000980 <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a98:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000a9a:	0789      	lsls	r1, r1, #30
 8000a9c:	d100      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x1c8>
 8000a9e:	e731      	b.n	8000904 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aa0:	2280      	movs	r2, #128	@ 0x80
 8000aa2:	6863      	ldr	r3, [r4, #4]
 8000aa4:	0252      	lsls	r2, r2, #9
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d02b      	beq.n	8000b02 <HAL_RCC_OscConfig+0x22a>
 8000aaa:	21a0      	movs	r1, #160	@ 0xa0
 8000aac:	02c9      	lsls	r1, r1, #11
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d100      	bne.n	8000ab4 <HAL_RCC_OscConfig+0x1dc>
 8000ab2:	e0fc      	b.n	8000cae <HAL_RCC_OscConfig+0x3d6>
 8000ab4:	4d4f      	ldr	r5, [pc, #316]	@ (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000ab6:	4959      	ldr	r1, [pc, #356]	@ (8000c1c <HAL_RCC_OscConfig+0x344>)
 8000ab8:	682a      	ldr	r2, [r5, #0]
 8000aba:	400a      	ands	r2, r1
 8000abc:	602a      	str	r2, [r5, #0]
 8000abe:	682a      	ldr	r2, [r5, #0]
 8000ac0:	4957      	ldr	r1, [pc, #348]	@ (8000c20 <HAL_RCC_OscConfig+0x348>)
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d11f      	bne.n	8000b0a <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 8000aca:	f7ff fd81 	bl	80005d0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ace:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000ad0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ad2:	02bf      	lsls	r7, r7, #10
 8000ad4:	e004      	b.n	8000ae0 <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ad6:	f7ff fd7b 	bl	80005d0 <HAL_GetTick>
 8000ada:	1b80      	subs	r0, r0, r6
 8000adc:	2864      	cmp	r0, #100	@ 0x64
 8000ade:	d87e      	bhi.n	8000bde <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ae0:	682b      	ldr	r3, [r5, #0]
 8000ae2:	423b      	tst	r3, r7
 8000ae4:	d1f7      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ae6:	6823      	ldr	r3, [r4, #0]
 8000ae8:	079a      	lsls	r2, r3, #30
 8000aea:	d400      	bmi.n	8000aee <HAL_RCC_OscConfig+0x216>
 8000aec:	e746      	b.n	800097c <HAL_RCC_OscConfig+0xa4>
 8000aee:	e712      	b.n	8000916 <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000af0:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8000af2:	0792      	lsls	r2, r2, #30
 8000af4:	d400      	bmi.n	8000af8 <HAL_RCC_OscConfig+0x220>
 8000af6:	e743      	b.n	8000980 <HAL_RCC_OscConfig+0xa8>
 8000af8:	69a2      	ldr	r2, [r4, #24]
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d000      	beq.n	8000b00 <HAL_RCC_OscConfig+0x228>
 8000afe:	e73f      	b.n	8000980 <HAL_RCC_OscConfig+0xa8>
 8000b00:	e71a      	b.n	8000938 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b02:	4a3c      	ldr	r2, [pc, #240]	@ (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000b04:	6811      	ldr	r1, [r2, #0]
 8000b06:	430b      	orrs	r3, r1
 8000b08:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000b0a:	f7ff fd61 	bl	80005d0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b0e:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000b10:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b12:	4f38      	ldr	r7, [pc, #224]	@ (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000b14:	02b6      	lsls	r6, r6, #10
 8000b16:	e004      	b.n	8000b22 <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b18:	f7ff fd5a 	bl	80005d0 <HAL_GetTick>
 8000b1c:	1b40      	subs	r0, r0, r5
 8000b1e:	2864      	cmp	r0, #100	@ 0x64
 8000b20:	d85d      	bhi.n	8000bde <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	4233      	tst	r3, r6
 8000b26:	d0f7      	beq.n	8000b18 <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	e7dd      	b.n	8000ae8 <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000b2c:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8000b2e:	079b      	lsls	r3, r3, #30
 8000b30:	d400      	bmi.n	8000b34 <HAL_RCC_OscConfig+0x25c>
 8000b32:	e76d      	b.n	8000a10 <HAL_RCC_OscConfig+0x138>
 8000b34:	68a3      	ldr	r3, [r4, #8]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d000      	beq.n	8000b3c <HAL_RCC_OscConfig+0x264>
 8000b3a:	e769      	b.n	8000a10 <HAL_RCC_OscConfig+0x138>
 8000b3c:	e6fc      	b.n	8000938 <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b3e:	3b0d      	subs	r3, #13
 8000b40:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d100      	bne.n	8000b48 <HAL_RCC_OscConfig+0x270>
 8000b46:	e0bc      	b.n	8000cc2 <HAL_RCC_OscConfig+0x3ea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b48:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000b4a:	4d2a      	ldr	r5, [pc, #168]	@ (8000bf4 <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d073      	beq.n	8000c38 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000b50:	682b      	ldr	r3, [r5, #0]
 8000b52:	4a2a      	ldr	r2, [pc, #168]	@ (8000bfc <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000b54:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000b56:	4013      	ands	r3, r2
 8000b58:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000b5a:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8000b60:	2380      	movs	r3, #128	@ 0x80
 8000b62:	682a      	ldr	r2, [r5, #0]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	4313      	orrs	r3, r2
 8000b68:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b6a:	f7ff fd31 	bl	80005d0 <HAL_GetTick>
 8000b6e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000b70:	e004      	b.n	8000b7c <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b72:	f7ff fd2d 	bl	80005d0 <HAL_GetTick>
 8000b76:	1b80      	subs	r0, r0, r6
 8000b78:	2802      	cmp	r0, #2
 8000b7a:	d830      	bhi.n	8000bde <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000b7c:	682b      	ldr	r3, [r5, #0]
 8000b7e:	423b      	tst	r3, r7
 8000b80:	d0f7      	beq.n	8000b72 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b82:	686a      	ldr	r2, [r5, #4]
 8000b84:	6963      	ldr	r3, [r4, #20]
 8000b86:	491c      	ldr	r1, [pc, #112]	@ (8000bf8 <HAL_RCC_OscConfig+0x320>)
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	400a      	ands	r2, r1
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b90:	6823      	ldr	r3, [r4, #0]
 8000b92:	e6f3      	b.n	800097c <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b94:	4917      	ldr	r1, [pc, #92]	@ (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000b96:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8000b9c:	f7ff fd18 	bl	80005d0 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000ba0:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8000ba2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ba8:	4d19      	ldr	r5, [pc, #100]	@ (8000c10 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000baa:	e004      	b.n	8000bb6 <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bac:	f7ff fd10 	bl	80005d0 <HAL_GetTick>
 8000bb0:	1b80      	subs	r0, r0, r6
 8000bb2:	42a8      	cmp	r0, r5
 8000bb4:	d813      	bhi.n	8000bde <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bba:	421f      	tst	r7, r3
 8000bbc:	d0f6      	beq.n	8000bac <HAL_RCC_OscConfig+0x2d4>
 8000bbe:	e723      	b.n	8000a08 <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000bc0:	6833      	ldr	r3, [r6, #0]
 8000bc2:	433b      	orrs	r3, r7
 8000bc4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bc6:	f7ff fd03 	bl	80005d0 <HAL_GetTick>
 8000bca:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000bcc:	6833      	ldr	r3, [r6, #0]
 8000bce:	423b      	tst	r3, r7
 8000bd0:	d000      	beq.n	8000bd4 <HAL_RCC_OscConfig+0x2fc>
 8000bd2:	e6f5      	b.n	80009c0 <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000bd4:	f7ff fcfc 	bl	80005d0 <HAL_GetTick>
 8000bd8:	1b40      	subs	r0, r0, r5
 8000bda:	2802      	cmp	r0, #2
 8000bdc:	d9f6      	bls.n	8000bcc <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 8000bde:	2003      	movs	r0, #3
 8000be0:	e6ab      	b.n	800093a <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 8000be2:	2201      	movs	r2, #1
 8000be4:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000be6:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8000be8:	4393      	bics	r3, r2
 8000bea:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000bec:	f7ff fcf0 	bl	80005d0 <HAL_GetTick>
 8000bf0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000bf2:	e01c      	b.n	8000c2e <HAL_RCC_OscConfig+0x356>
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	ffff80ff 	.word	0xffff80ff
 8000bfc:	ffffc7ff 	.word	0xffffc7ff
 8000c00:	00f42400 	.word	0x00f42400
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	40007000 	.word	0x40007000
 8000c10:	00001388 	.word	0x00001388
 8000c14:	feffffff 	.word	0xfeffffff
 8000c18:	effefffc 	.word	0xeffefffc
 8000c1c:	fffeffff 	.word	0xfffeffff
 8000c20:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c24:	f7ff fcd4 	bl	80005d0 <HAL_GetTick>
 8000c28:	1b80      	subs	r0, r0, r6
 8000c2a:	2802      	cmp	r0, #2
 8000c2c:	d8d7      	bhi.n	8000bde <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000c2e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8000c30:	421f      	tst	r7, r3
 8000c32:	d1f7      	bne.n	8000c24 <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c34:	6823      	ldr	r3, [r4, #0]
 8000c36:	e6a3      	b.n	8000980 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 8000c38:	682b      	ldr	r3, [r5, #0]
 8000c3a:	4a50      	ldr	r2, [pc, #320]	@ (8000d7c <HAL_RCC_OscConfig+0x4a4>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c3c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8000c3e:	4013      	ands	r3, r2
 8000c40:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c42:	f7ff fcc5 	bl	80005d0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c46:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8000c48:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c4a:	e004      	b.n	8000c56 <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c4c:	f7ff fcc0 	bl	80005d0 <HAL_GetTick>
 8000c50:	1b80      	subs	r0, r0, r6
 8000c52:	2802      	cmp	r0, #2
 8000c54:	d8c3      	bhi.n	8000bde <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c56:	682b      	ldr	r3, [r5, #0]
 8000c58:	423b      	tst	r3, r7
 8000c5a:	d1f7      	bne.n	8000c4c <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c5c:	6823      	ldr	r3, [r4, #0]
 8000c5e:	e68d      	b.n	800097c <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d100      	bne.n	8000c66 <HAL_RCC_OscConfig+0x38e>
 8000c64:	e668      	b.n	8000938 <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c66:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8000c68:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c6a:	6a21      	ldr	r1, [r4, #32]
 8000c6c:	4002      	ands	r2, r0
 8000c6e:	428a      	cmp	r2, r1
 8000c70:	d000      	beq.n	8000c74 <HAL_RCC_OscConfig+0x39c>
 8000c72:	e661      	b.n	8000938 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c74:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c76:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c78:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c7a:	428a      	cmp	r2, r1
 8000c7c:	d000      	beq.n	8000c80 <HAL_RCC_OscConfig+0x3a8>
 8000c7e:	e65b      	b.n	8000938 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000c80:	21fe      	movs	r1, #254	@ 0xfe
 8000c82:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000c84:	01c9      	lsls	r1, r1, #7
 8000c86:	4001      	ands	r1, r0
 8000c88:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c8a:	4291      	cmp	r1, r2
 8000c8c:	d000      	beq.n	8000c90 <HAL_RCC_OscConfig+0x3b8>
 8000c8e:	e653      	b.n	8000938 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c90:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000c92:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c94:	0392      	lsls	r2, r2, #14
 8000c96:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	d000      	beq.n	8000c9e <HAL_RCC_OscConfig+0x3c6>
 8000c9c:	e64c      	b.n	8000938 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8000ca0:	0f40      	lsrs	r0, r0, #29
 8000ca2:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000ca4:	1ac0      	subs	r0, r0, r3
 8000ca6:	1e43      	subs	r3, r0, #1
 8000ca8:	4198      	sbcs	r0, r3
 8000caa:	b2c0      	uxtb	r0, r0
 8000cac:	e645      	b.n	800093a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cae:	2180      	movs	r1, #128	@ 0x80
 8000cb0:	4b33      	ldr	r3, [pc, #204]	@ (8000d80 <HAL_RCC_OscConfig+0x4a8>)
 8000cb2:	02c9      	lsls	r1, r1, #11
 8000cb4:	6818      	ldr	r0, [r3, #0]
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	6019      	str	r1, [r3, #0]
 8000cba:	6819      	ldr	r1, [r3, #0]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cc0:	e723      	b.n	8000b0a <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000cc2:	6813      	ldr	r3, [r2, #0]
 8000cc4:	055b      	lsls	r3, r3, #21
 8000cc6:	d455      	bmi.n	8000d74 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc8:	6851      	ldr	r1, [r2, #4]
 8000cca:	6963      	ldr	r3, [r4, #20]
 8000ccc:	482d      	ldr	r0, [pc, #180]	@ (8000d84 <HAL_RCC_OscConfig+0x4ac>)
 8000cce:	021b      	lsls	r3, r3, #8
 8000cd0:	4001      	ands	r1, r0
 8000cd2:	430b      	orrs	r3, r1
 8000cd4:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cd6:	e64a      	b.n	800096e <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 8000cd8:	4a29      	ldr	r2, [pc, #164]	@ (8000d80 <HAL_RCC_OscConfig+0x4a8>)
 8000cda:	492b      	ldr	r1, [pc, #172]	@ (8000d88 <HAL_RCC_OscConfig+0x4b0>)
 8000cdc:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8000cde:	400b      	ands	r3, r1
 8000ce0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000ce2:	e695      	b.n	8000a10 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 8000ce4:	682b      	ldr	r3, [r5, #0]
 8000ce6:	4a29      	ldr	r2, [pc, #164]	@ (8000d8c <HAL_RCC_OscConfig+0x4b4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000ce8:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8000cea:	4013      	ands	r3, r2
 8000cec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cee:	f7ff fc6f 	bl	80005d0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000cf2:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8000cf4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000cf6:	e005      	b.n	8000d04 <HAL_RCC_OscConfig+0x42c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cf8:	f7ff fc6a 	bl	80005d0 <HAL_GetTick>
 8000cfc:	1b80      	subs	r0, r0, r6
 8000cfe:	2802      	cmp	r0, #2
 8000d00:	d900      	bls.n	8000d04 <HAL_RCC_OscConfig+0x42c>
 8000d02:	e76c      	b.n	8000bde <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d04:	682b      	ldr	r3, [r5, #0]
 8000d06:	423b      	tst	r3, r7
 8000d08:	d1f6      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d0a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000d0c:	6a23      	ldr	r3, [r4, #32]
 8000d0e:	68ea      	ldr	r2, [r5, #12]
 8000d10:	430b      	orrs	r3, r1
 8000d12:	491f      	ldr	r1, [pc, #124]	@ (8000d90 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000d14:	4e1a      	ldr	r6, [pc, #104]	@ (8000d80 <HAL_RCC_OscConfig+0x4a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d16:	400a      	ands	r2, r1
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8000d20:	4313      	orrs	r3, r2
 8000d22:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000d24:	0212      	lsls	r2, r2, #8
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8000d2a:	2380      	movs	r3, #128	@ 0x80
 8000d2c:	682a      	ldr	r2, [r5, #0]
 8000d2e:	045b      	lsls	r3, r3, #17
 8000d30:	4313      	orrs	r3, r2
 8000d32:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8000d34:	2380      	movs	r3, #128	@ 0x80
 8000d36:	68ea      	ldr	r2, [r5, #12]
 8000d38:	055b      	lsls	r3, r3, #21
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8000d3e:	f7ff fc47 	bl	80005d0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000d42:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000d44:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000d46:	04ad      	lsls	r5, r5, #18
 8000d48:	e005      	b.n	8000d56 <HAL_RCC_OscConfig+0x47e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d4a:	f7ff fc41 	bl	80005d0 <HAL_GetTick>
 8000d4e:	1b00      	subs	r0, r0, r4
 8000d50:	2802      	cmp	r0, #2
 8000d52:	d900      	bls.n	8000d56 <HAL_RCC_OscConfig+0x47e>
 8000d54:	e743      	b.n	8000bde <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000d56:	6833      	ldr	r3, [r6, #0]
 8000d58:	422b      	tst	r3, r5
 8000d5a:	d0f6      	beq.n	8000d4a <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e5ec      	b.n	800093a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d60:	2104      	movs	r1, #4
 8000d62:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <HAL_RCC_OscConfig+0x4a8>)
 8000d64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000d66:	430a      	orrs	r2, r1
 8000d68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000d6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000d6c:	3903      	subs	r1, #3
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d72:	e713      	b.n	8000b9c <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d74:	68e3      	ldr	r3, [r4, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1a6      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x3f0>
 8000d7a:	e5dd      	b.n	8000938 <HAL_RCC_OscConfig+0x60>
 8000d7c:	fffffeff 	.word	0xfffffeff
 8000d80:	40021000 	.word	0x40021000
 8000d84:	ffff80ff 	.word	0xffff80ff
 8000d88:	efffffff 	.word	0xefffffff
 8000d8c:	feffffff 	.word	0xfeffffff
 8000d90:	1fc1808c 	.word	0x1fc1808c

08000d94 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d94:	2338      	movs	r3, #56	@ 0x38
 8000d96:	4a22      	ldr	r2, [pc, #136]	@ (8000e20 <HAL_RCC_GetSysClockFreq+0x8c>)
{
 8000d98:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d9a:	6891      	ldr	r1, [r2, #8]
 8000d9c:	420b      	tst	r3, r1
 8000d9e:	d105      	bne.n	8000dac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8000da0:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8000da2:	4820      	ldr	r0, [pc, #128]	@ (8000e24 <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8000da4:	049b      	lsls	r3, r3, #18
 8000da6:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8000da8:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8000daa:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dac:	6891      	ldr	r1, [r2, #8]
 8000dae:	4019      	ands	r1, r3
 8000db0:	2908      	cmp	r1, #8
 8000db2:	d014      	beq.n	8000dde <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000db4:	6891      	ldr	r1, [r2, #8]
 8000db6:	4019      	ands	r1, r3
 8000db8:	2910      	cmp	r1, #16
 8000dba:	d012      	beq.n	8000de2 <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000dbc:	6891      	ldr	r1, [r2, #8]
 8000dbe:	4019      	ands	r1, r3
 8000dc0:	2920      	cmp	r1, #32
 8000dc2:	d024      	beq.n	8000e0e <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000dc4:	6890      	ldr	r0, [r2, #8]
 8000dc6:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8000dc8:	3818      	subs	r0, #24
 8000dca:	1e43      	subs	r3, r0, #1
 8000dcc:	4198      	sbcs	r0, r3
 8000dce:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <HAL_RCC_GetSysClockFreq+0x94>)
 8000dd0:	4240      	negs	r0, r0
 8000dd2:	4018      	ands	r0, r3
 8000dd4:	23fa      	movs	r3, #250	@ 0xfa
 8000dd6:	01db      	lsls	r3, r3, #7
 8000dd8:	469c      	mov	ip, r3
 8000dda:	4460      	add	r0, ip
 8000ddc:	e7e5      	b.n	8000daa <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8000dde:	4813      	ldr	r0, [pc, #76]	@ (8000e2c <HAL_RCC_GetSysClockFreq+0x98>)
 8000de0:	e7e3      	b.n	8000daa <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000de2:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000de4:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000de6:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000de8:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000dea:	0649      	lsls	r1, r1, #25
 8000dec:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000dee:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000df0:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000df2:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 8000df4:	079b      	lsls	r3, r3, #30
 8000df6:	d00d      	beq.n	8000e14 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000df8:	480a      	ldr	r0, [pc, #40]	@ (8000e24 <HAL_RCC_GetSysClockFreq+0x90>)
 8000dfa:	f7ff f981 	bl	8000100 <__udivsi3>
 8000dfe:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8000e00:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000e02:	68d9      	ldr	r1, [r3, #12]
 8000e04:	0f49      	lsrs	r1, r1, #29
 8000e06:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8000e08:	f7ff f97a 	bl	8000100 <__udivsi3>
 8000e0c:	e7cd      	b.n	8000daa <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8000e0e:	2080      	movs	r0, #128	@ 0x80
 8000e10:	0200      	lsls	r0, r0, #8
 8000e12:	e7ca      	b.n	8000daa <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000e14:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <HAL_RCC_GetSysClockFreq+0x98>)
 8000e16:	f7ff f973 	bl	8000100 <__udivsi3>
 8000e1a:	4360      	muls	r0, r4
        break;
 8000e1c:	e7f0      	b.n	8000e00 <HAL_RCC_GetSysClockFreq+0x6c>
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	40021000 	.word	0x40021000
 8000e24:	00f42400 	.word	0x00f42400
 8000e28:	ffff8300 	.word	0xffff8300
 8000e2c:	007a1200 	.word	0x007a1200

08000e30 <HAL_RCC_ClockConfig>:
{
 8000e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e32:	46ce      	mov	lr, r9
 8000e34:	4647      	mov	r7, r8
 8000e36:	0005      	movs	r5, r0
 8000e38:	000c      	movs	r4, r1
 8000e3a:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8000e3c:	2800      	cmp	r0, #0
 8000e3e:	d026      	beq.n	8000e8e <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e40:	2207      	movs	r2, #7
 8000e42:	4e57      	ldr	r6, [pc, #348]	@ (8000fa0 <HAL_RCC_ClockConfig+0x170>)
 8000e44:	6833      	ldr	r3, [r6, #0]
 8000e46:	4013      	ands	r3, r2
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d35e      	bcc.n	8000f0a <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e4c:	682b      	ldr	r3, [r5, #0]
 8000e4e:	079a      	lsls	r2, r3, #30
 8000e50:	d50e      	bpl.n	8000e70 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e52:	075a      	lsls	r2, r3, #29
 8000e54:	d505      	bpl.n	8000e62 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000e56:	22e0      	movs	r2, #224	@ 0xe0
 8000e58:	4952      	ldr	r1, [pc, #328]	@ (8000fa4 <HAL_RCC_ClockConfig+0x174>)
 8000e5a:	01d2      	lsls	r2, r2, #7
 8000e5c:	6888      	ldr	r0, [r1, #8]
 8000e5e:	4302      	orrs	r2, r0
 8000e60:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e62:	4950      	ldr	r1, [pc, #320]	@ (8000fa4 <HAL_RCC_ClockConfig+0x174>)
 8000e64:	4850      	ldr	r0, [pc, #320]	@ (8000fa8 <HAL_RCC_ClockConfig+0x178>)
 8000e66:	688a      	ldr	r2, [r1, #8]
 8000e68:	4002      	ands	r2, r0
 8000e6a:	68a8      	ldr	r0, [r5, #8]
 8000e6c:	4302      	orrs	r2, r0
 8000e6e:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e70:	07db      	lsls	r3, r3, #31
 8000e72:	d52b      	bpl.n	8000ecc <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e74:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e76:	4a4b      	ldr	r2, [pc, #300]	@ (8000fa4 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d100      	bne.n	8000e7e <HAL_RCC_ClockConfig+0x4e>
 8000e7c:	e07c      	b.n	8000f78 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d007      	beq.n	8000e92 <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d000      	beq.n	8000e88 <HAL_RCC_ClockConfig+0x58>
 8000e86:	e07d      	b.n	8000f84 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	0552      	lsls	r2, r2, #21
 8000e8c:	d404      	bmi.n	8000e98 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8000e8e:	2001      	movs	r0, #1
 8000e90:	e037      	b.n	8000f02 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e92:	6812      	ldr	r2, [r2, #0]
 8000e94:	0192      	lsls	r2, r2, #6
 8000e96:	d5fa      	bpl.n	8000e8e <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000e98:	2107      	movs	r1, #7
 8000e9a:	4e42      	ldr	r6, [pc, #264]	@ (8000fa4 <HAL_RCC_ClockConfig+0x174>)
 8000e9c:	68b2      	ldr	r2, [r6, #8]
 8000e9e:	438a      	bics	r2, r1
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000ea4:	f7ff fb94 	bl	80005d0 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ea8:	2338      	movs	r3, #56	@ 0x38
 8000eaa:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eac:	4b3f      	ldr	r3, [pc, #252]	@ (8000fac <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8000eae:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eb0:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000eb2:	e004      	b.n	8000ebe <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eb4:	f7ff fb8c 	bl	80005d0 <HAL_GetTick>
 8000eb8:	1bc0      	subs	r0, r0, r7
 8000eba:	4548      	cmp	r0, r9
 8000ebc:	d83b      	bhi.n	8000f36 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	68b2      	ldr	r2, [r6, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	686b      	ldr	r3, [r5, #4]
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d1f3      	bne.n	8000eb4 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000ecc:	2207      	movs	r2, #7
 8000ece:	4e34      	ldr	r6, [pc, #208]	@ (8000fa0 <HAL_RCC_ClockConfig+0x170>)
 8000ed0:	6833      	ldr	r3, [r6, #0]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	42a3      	cmp	r3, r4
 8000ed6:	d838      	bhi.n	8000f4a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ed8:	682b      	ldr	r3, [r5, #0]
 8000eda:	075b      	lsls	r3, r3, #29
 8000edc:	d42d      	bmi.n	8000f3a <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000ede:	f7ff ff59 	bl	8000d94 <HAL_RCC_GetSysClockFreq>
 8000ee2:	4b30      	ldr	r3, [pc, #192]	@ (8000fa4 <HAL_RCC_ClockConfig+0x174>)
 8000ee4:	4a32      	ldr	r2, [pc, #200]	@ (8000fb0 <HAL_RCC_ClockConfig+0x180>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	4932      	ldr	r1, [pc, #200]	@ (8000fb4 <HAL_RCC_ClockConfig+0x184>)
 8000eea:	051b      	lsls	r3, r3, #20
 8000eec:	0f1b      	lsrs	r3, r3, #28
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	589b      	ldr	r3, [r3, r2]
 8000ef2:	221f      	movs	r2, #31
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 8000ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb8 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000efa:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	f7ff fb21 	bl	8000544 <HAL_InitTick>
}
 8000f02:	bcc0      	pop	{r6, r7}
 8000f04:	46b9      	mov	r9, r7
 8000f06:	46b0      	mov	r8, r6
 8000f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f0a:	6833      	ldr	r3, [r6, #0]
 8000f0c:	4393      	bics	r3, r2
 8000f0e:	430b      	orrs	r3, r1
 8000f10:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8000f12:	f7ff fb5d 	bl	80005d0 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f16:	2307      	movs	r3, #7
 8000f18:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f1a:	4b24      	ldr	r3, [pc, #144]	@ (8000fac <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8000f1c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f1e:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f20:	4642      	mov	r2, r8
 8000f22:	6833      	ldr	r3, [r6, #0]
 8000f24:	4013      	ands	r3, r2
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d100      	bne.n	8000f2c <HAL_RCC_ClockConfig+0xfc>
 8000f2a:	e78f      	b.n	8000e4c <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f2c:	f7ff fb50 	bl	80005d0 <HAL_GetTick>
 8000f30:	1bc0      	subs	r0, r0, r7
 8000f32:	4548      	cmp	r0, r9
 8000f34:	d9f4      	bls.n	8000f20 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8000f36:	2003      	movs	r0, #3
 8000f38:	e7e3      	b.n	8000f02 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8000fa4 <HAL_RCC_ClockConfig+0x174>)
 8000f3c:	491f      	ldr	r1, [pc, #124]	@ (8000fbc <HAL_RCC_ClockConfig+0x18c>)
 8000f3e:	6893      	ldr	r3, [r2, #8]
 8000f40:	400b      	ands	r3, r1
 8000f42:	68e9      	ldr	r1, [r5, #12]
 8000f44:	430b      	orrs	r3, r1
 8000f46:	6093      	str	r3, [r2, #8]
 8000f48:	e7c9      	b.n	8000ede <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f4a:	6833      	ldr	r3, [r6, #0]
 8000f4c:	4393      	bics	r3, r2
 8000f4e:	4323      	orrs	r3, r4
 8000f50:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8000f52:	f7ff fb3d 	bl	80005d0 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f56:	2307      	movs	r3, #7
 8000f58:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8000f5c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f5e:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f60:	4642      	mov	r2, r8
 8000f62:	6833      	ldr	r3, [r6, #0]
 8000f64:	4013      	ands	r3, r2
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d0b6      	beq.n	8000ed8 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f6a:	f7ff fb31 	bl	80005d0 <HAL_GetTick>
 8000f6e:	1bc0      	subs	r0, r0, r7
 8000f70:	4548      	cmp	r0, r9
 8000f72:	d9f5      	bls.n	8000f60 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8000f74:	2003      	movs	r0, #3
 8000f76:	e7c4      	b.n	8000f02 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	0392      	lsls	r2, r2, #14
 8000f7c:	d500      	bpl.n	8000f80 <HAL_RCC_ClockConfig+0x150>
 8000f7e:	e78b      	b.n	8000e98 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8000f80:	2001      	movs	r0, #1
 8000f82:	e7be      	b.n	8000f02 <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d005      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f88:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f8a:	0792      	lsls	r2, r2, #30
 8000f8c:	d500      	bpl.n	8000f90 <HAL_RCC_ClockConfig+0x160>
 8000f8e:	e783      	b.n	8000e98 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8000f90:	2001      	movs	r0, #1
 8000f92:	e7b6      	b.n	8000f02 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f94:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8000f96:	0792      	lsls	r2, r2, #30
 8000f98:	d500      	bpl.n	8000f9c <HAL_RCC_ClockConfig+0x16c>
 8000f9a:	e77d      	b.n	8000e98 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	e7b0      	b.n	8000f02 <HAL_RCC_ClockConfig+0xd2>
 8000fa0:	40022000 	.word	0x40022000
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	fffff0ff 	.word	0xfffff0ff
 8000fac:	00001388 	.word	0x00001388
 8000fb0:	08001544 	.word	0x08001544
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	ffff8fff 	.word	0xffff8fff

08000fc0 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc2:	46c6      	mov	lr, r8
 8000fc4:	b500      	push	{lr}
 8000fc6:	000c      	movs	r4, r1
 8000fc8:	0016      	movs	r6, r2
 8000fca:	b082      	sub	sp, #8
 8000fcc:	0007      	movs	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8000fce:	f7ff faff 	bl	80005d0 <HAL_GetTick>
 8000fd2:	1936      	adds	r6, r6, r4
 8000fd4:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8000fd6:	f7ff fafb 	bl	80005d0 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000fda:	2580      	movs	r5, #128	@ 0x80
  tmp_tickstart = HAL_GetTick();
 8000fdc:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8000fde:	4b26      	ldr	r3, [pc, #152]	@ (8001078 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	015b      	lsls	r3, r3, #5
 8000fe4:	0d1b      	lsrs	r3, r3, #20
 8000fe6:	4373      	muls	r3, r6
 8000fe8:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	e001      	b.n	8000ff2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 8000fee:	1c63      	adds	r3, r4, #1
 8000ff0:	d107      	bne.n	8001002 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000ff2:	6893      	ldr	r3, [r2, #8]
 8000ff4:	421d      	tst	r5, r3
 8000ff6:	d1fa      	bne.n	8000fee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
      }
      count--;
    }
  }

  return HAL_OK;
 8000ff8:	2000      	movs	r0, #0
}
 8000ffa:	b002      	add	sp, #8
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	46b8      	mov	r8, r7
 8001000:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001002:	f7ff fae5 	bl	80005d0 <HAL_GetTick>
 8001006:	4643      	mov	r3, r8
 8001008:	1ac0      	subs	r0, r0, r3
 800100a:	42b0      	cmp	r0, r6
 800100c:	d208      	bcs.n	8001020 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
      if (count == 0U)
 800100e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001010:	1e5a      	subs	r2, r3, #1
 8001012:	4193      	sbcs	r3, r2
 8001014:	425b      	negs	r3, r3
 8001016:	401e      	ands	r6, r3
      count--;
 8001018:	9b01      	ldr	r3, [sp, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	e7e4      	b.n	8000fea <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001020:	21e0      	movs	r1, #224	@ 0xe0
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	438a      	bics	r2, r1
 8001028:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800102a:	2282      	movs	r2, #130	@ 0x82
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	0052      	lsls	r2, r2, #1
 8001030:	4291      	cmp	r1, r2
 8001032:	d013      	beq.n	800105c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001034:	2180      	movs	r1, #128	@ 0x80
 8001036:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001038:	0189      	lsls	r1, r1, #6
 800103a:	428a      	cmp	r2, r1
 800103c:	d106      	bne.n	800104c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
          SPI_RESET_CRC(hspi);
 800103e:	6819      	ldr	r1, [r3, #0]
 8001040:	480e      	ldr	r0, [pc, #56]	@ (800107c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8001042:	4001      	ands	r1, r0
 8001044:	6019      	str	r1, [r3, #0]
 8001046:	6819      	ldr	r1, [r3, #0]
 8001048:	430a      	orrs	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800104c:	235d      	movs	r3, #93	@ 0x5d
 800104e:	2201      	movs	r2, #1
 8001050:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 8001052:	2200      	movs	r2, #0
 8001054:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8001056:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8001058:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 800105a:	e7ce      	b.n	8000ffa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800105c:	2180      	movs	r1, #128	@ 0x80
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	0209      	lsls	r1, r1, #8
 8001062:	428a      	cmp	r2, r1
 8001064:	d003      	beq.n	800106e <SPI_WaitFlagStateUntilTimeout.constprop.0+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001066:	2180      	movs	r1, #128	@ 0x80
 8001068:	00c9      	lsls	r1, r1, #3
 800106a:	428a      	cmp	r2, r1
 800106c:	d1e2      	bne.n	8001034 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
          __HAL_SPI_DISABLE(hspi);
 800106e:	2140      	movs	r1, #64	@ 0x40
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	438a      	bics	r2, r1
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	e7dd      	b.n	8001034 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
 8001078:	20000000 	.word	0x20000000
 800107c:	ffffdfff 	.word	0xffffdfff

08001080 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001082:	46de      	mov	lr, fp
 8001084:	4657      	mov	r7, sl
 8001086:	464e      	mov	r6, r9
 8001088:	4645      	mov	r5, r8
 800108a:	b5e0      	push	{r5, r6, r7, lr}
 800108c:	b083      	sub	sp, #12
 800108e:	001e      	movs	r6, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001090:	466b      	mov	r3, sp
 8001092:	1cdf      	adds	r7, r3, #3
 8001094:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001096:	0015      	movs	r5, r2
 8001098:	4681      	mov	r9, r0
 800109a:	000c      	movs	r4, r1
  __IO uint8_t  tmpreg8 = 0;
 800109c:	703b      	strb	r3, [r7, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800109e:	f7ff fa97 	bl	80005d0 <HAL_GetTick>
 80010a2:	1976      	adds	r6, r6, r5
 80010a4:	1a33      	subs	r3, r6, r0
 80010a6:	4698      	mov	r8, r3
  tmp_tickstart = HAL_GetTick();
 80010a8:	f7ff fa92 	bl	80005d0 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80010ac:	464b      	mov	r3, r9
 80010ae:	681b      	ldr	r3, [r3, #0]
  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);

  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80010b0:	26c0      	movs	r6, #192	@ 0xc0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80010b2:	469a      	mov	sl, r3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80010b4:	4b34      	ldr	r3, [pc, #208]	@ (8001188 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
  tmp_tickstart = HAL_GetTick();
 80010b6:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80010b8:	681b      	ldr	r3, [r3, #0]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80010ba:	00f6      	lsls	r6, r6, #3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80010bc:	009a      	lsls	r2, r3, #2
 80010be:	18d2      	adds	r2, r2, r3
 80010c0:	00d3      	lsls	r3, r2, #3
 80010c2:	1a9b      	subs	r3, r3, r2
 80010c4:	4642      	mov	r2, r8
 80010c6:	0d1b      	lsrs	r3, r3, #20
 80010c8:	4353      	muls	r3, r2
  while ((hspi->Instance->SR & Fifo) != State)
 80010ca:	4652      	mov	r2, sl
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80010cc:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 80010ce:	e001      	b.n	80010d4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 80010d0:	1c6b      	adds	r3, r5, #1
 80010d2:	d10b      	bne.n	80010ec <SPI_WaitFifoStateUntilTimeout.constprop.0+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 80010d4:	6893      	ldr	r3, [r2, #8]
 80010d6:	4223      	tst	r3, r4
 80010d8:	d01d      	beq.n	8001116 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x96>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80010da:	42b4      	cmp	r4, r6
 80010dc:	d1f8      	bne.n	80010d0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x50>
      tmpreg8 = *ptmpreg8;
 80010de:	4653      	mov	r3, sl
 80010e0:	7b1b      	ldrb	r3, [r3, #12]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	703b      	strb	r3, [r7, #0]
      UNUSED(tmpreg8);
 80010e6:	783b      	ldrb	r3, [r7, #0]
    if (Timeout != HAL_MAX_DELAY)
 80010e8:	1c6b      	adds	r3, r5, #1
 80010ea:	d0f3      	beq.n	80010d4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80010ec:	f7ff fa70 	bl	80005d0 <HAL_GetTick>
 80010f0:	465b      	mov	r3, fp
 80010f2:	1ac0      	subs	r0, r0, r3
 80010f4:	4540      	cmp	r0, r8
 80010f6:	d216      	bcs.n	8001126 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80010f8:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 80010fa:	1e5a      	subs	r2, r3, #1
 80010fc:	4193      	sbcs	r3, r2
 80010fe:	4642      	mov	r2, r8
 8001100:	425b      	negs	r3, r3
 8001102:	401a      	ands	r2, r3
      }
      count--;
 8001104:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001106:	4690      	mov	r8, r2
      count--;
 8001108:	3b01      	subs	r3, #1
 800110a:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800110c:	464b      	mov	r3, r9
 800110e:	681a      	ldr	r2, [r3, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8001110:	6893      	ldr	r3, [r2, #8]
 8001112:	4223      	tst	r3, r4
 8001114:	d1e1      	bne.n	80010da <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
    }
  }

  return HAL_OK;
 8001116:	2000      	movs	r0, #0
}
 8001118:	b003      	add	sp, #12
 800111a:	bcf0      	pop	{r4, r5, r6, r7}
 800111c:	46bb      	mov	fp, r7
 800111e:	46b2      	mov	sl, r6
 8001120:	46a9      	mov	r9, r5
 8001122:	46a0      	mov	r8, r4
 8001124:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001126:	464b      	mov	r3, r9
 8001128:	21e0      	movs	r1, #224	@ 0xe0
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001130:	4649      	mov	r1, r9
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001132:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001134:	2282      	movs	r2, #130	@ 0x82
 8001136:	6849      	ldr	r1, [r1, #4]
 8001138:	0052      	lsls	r2, r2, #1
 800113a:	4291      	cmp	r1, r2
 800113c:	d015      	beq.n	800116a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800113e:	464a      	mov	r2, r9
 8001140:	2180      	movs	r1, #128	@ 0x80
 8001142:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001144:	0189      	lsls	r1, r1, #6
 8001146:	428a      	cmp	r2, r1
 8001148:	d106      	bne.n	8001158 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
          SPI_RESET_CRC(hspi);
 800114a:	6819      	ldr	r1, [r3, #0]
 800114c:	480f      	ldr	r0, [pc, #60]	@ (800118c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x10c>)
 800114e:	4001      	ands	r1, r0
 8001150:	6019      	str	r1, [r3, #0]
 8001152:	6819      	ldr	r1, [r3, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001158:	235d      	movs	r3, #93	@ 0x5d
 800115a:	2201      	movs	r2, #1
 800115c:	4649      	mov	r1, r9
 800115e:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 8001160:	2200      	movs	r2, #0
 8001162:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8001164:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8001166:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8001168:	e7d6      	b.n	8001118 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800116a:	464a      	mov	r2, r9
 800116c:	2180      	movs	r1, #128	@ 0x80
 800116e:	6892      	ldr	r2, [r2, #8]
 8001170:	0209      	lsls	r1, r1, #8
 8001172:	428a      	cmp	r2, r1
 8001174:	d003      	beq.n	800117e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	00c9      	lsls	r1, r1, #3
 800117a:	428a      	cmp	r2, r1
 800117c:	d1df      	bne.n	800113e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          __HAL_SPI_DISABLE(hspi);
 800117e:	2140      	movs	r1, #64	@ 0x40
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	438a      	bics	r2, r1
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	e7da      	b.n	800113e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
 8001188:	20000000 	.word	0x20000000
 800118c:	ffffdfff 	.word	0xffffdfff

08001190 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001190:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001192:	0013      	movs	r3, r2
{
 8001194:	000d      	movs	r5, r1
 8001196:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001198:	000a      	movs	r2, r1
 800119a:	21c0      	movs	r1, #192	@ 0xc0
 800119c:	0149      	lsls	r1, r1, #5
{
 800119e:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80011a0:	f7ff ff6e 	bl	8001080 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80011a4:	2800      	cmp	r0, #0
 80011a6:	d10f      	bne.n	80011c8 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80011a8:	0032      	movs	r2, r6
 80011aa:	0029      	movs	r1, r5
 80011ac:	0020      	movs	r0, r4
 80011ae:	f7ff ff07 	bl	8000fc0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	d108      	bne.n	80011c8 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80011b6:	21c0      	movs	r1, #192	@ 0xc0
 80011b8:	0033      	movs	r3, r6
 80011ba:	002a      	movs	r2, r5
 80011bc:	0020      	movs	r0, r4
 80011be:	00c9      	lsls	r1, r1, #3
 80011c0:	f7ff ff5e 	bl	8001080 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d004      	beq.n	80011d2 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80011c8:	2220      	movs	r2, #32
    return HAL_TIMEOUT;
 80011ca:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80011cc:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80011ce:	4313      	orrs	r3, r2
 80011d0:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80011d2:	bd70      	pop	{r4, r5, r6, pc}

080011d4 <HAL_SPI_Init>:
{
 80011d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d6:	46de      	mov	lr, fp
 80011d8:	4657      	mov	r7, sl
 80011da:	464e      	mov	r6, r9
 80011dc:	4645      	mov	r5, r8
 80011de:	0004      	movs	r4, r0
 80011e0:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 80011e2:	2800      	cmp	r0, #0
 80011e4:	d100      	bne.n	80011e8 <HAL_SPI_Init+0x14>
 80011e6:	e093      	b.n	8001310 <HAL_SPI_Init+0x13c>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80011e8:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 80011ea:	2d00      	cmp	r5, #0
 80011ec:	d069      	beq.n	80012c2 <HAL_SPI_Init+0xee>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80011f2:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80011f8:	335d      	adds	r3, #93	@ 0x5d
 80011fa:	5ce3      	ldrb	r3, [r4, r3]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d06c      	beq.n	80012dc <HAL_SPI_Init+0x108>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001202:	235d      	movs	r3, #93	@ 0x5d
 8001204:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 8001206:	2140      	movs	r1, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8001208:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 800120a:	6822      	ldr	r2, [r4, #0]
 800120c:	6813      	ldr	r3, [r2, #0]
 800120e:	438b      	bics	r3, r1
 8001210:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001212:	23e0      	movs	r3, #224	@ 0xe0
 8001214:	68e1      	ldr	r1, [r4, #12]
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4299      	cmp	r1, r3
 800121a:	d866      	bhi.n	80012ea <HAL_SPI_Init+0x116>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800121c:	d000      	beq.n	8001220 <HAL_SPI_Init+0x4c>
 800121e:	e070      	b.n	8001302 <HAL_SPI_Init+0x12e>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001224:	019b      	lsls	r3, r3, #6
 8001226:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001228:	2380      	movs	r3, #128	@ 0x80
 800122a:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800122c:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800122e:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001230:	2682      	movs	r6, #130	@ 0x82
 8001232:	2784      	movs	r7, #132	@ 0x84
 8001234:	6863      	ldr	r3, [r4, #4]
 8001236:	0076      	lsls	r6, r6, #1
 8001238:	4033      	ands	r3, r6
 800123a:	68a6      	ldr	r6, [r4, #8]
 800123c:	023f      	lsls	r7, r7, #8
 800123e:	403e      	ands	r6, r7
 8001240:	2702      	movs	r7, #2
 8001242:	4333      	orrs	r3, r6
 8001244:	6926      	ldr	r6, [r4, #16]
 8001246:	69a0      	ldr	r0, [r4, #24]
 8001248:	403e      	ands	r6, r7
 800124a:	4333      	orrs	r3, r6
 800124c:	2601      	movs	r6, #1
 800124e:	6967      	ldr	r7, [r4, #20]
 8001250:	46b2      	mov	sl, r6
 8001252:	4037      	ands	r7, r6
 8001254:	433b      	orrs	r3, r7
 8001256:	2780      	movs	r7, #128	@ 0x80
 8001258:	00bf      	lsls	r7, r7, #2
 800125a:	4007      	ands	r7, r0
 800125c:	433b      	orrs	r3, r7
 800125e:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001260:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001262:	46b8      	mov	r8, r7
 8001264:	2738      	movs	r7, #56	@ 0x38
 8001266:	46b9      	mov	r9, r7
 8001268:	4647      	mov	r7, r8
 800126a:	464e      	mov	r6, r9
 800126c:	4037      	ands	r7, r6
 800126e:	6a26      	ldr	r6, [r4, #32]
 8001270:	433b      	orrs	r3, r7
 8001272:	46b0      	mov	r8, r6
 8001274:	2680      	movs	r6, #128	@ 0x80
 8001276:	4647      	mov	r7, r8
 8001278:	4037      	ands	r7, r6
 800127a:	4666      	mov	r6, ip
 800127c:	433b      	orrs	r3, r7
 800127e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001280:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001282:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001284:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001286:	4033      	ands	r3, r6
 8001288:	26f0      	movs	r6, #240	@ 0xf0
 800128a:	0136      	lsls	r6, r6, #4
 800128c:	4031      	ands	r1, r6
 800128e:	4319      	orrs	r1, r3
 8001290:	2304      	movs	r3, #4
 8001292:	4003      	ands	r3, r0
 8001294:	4319      	orrs	r1, r3
 8001296:	2310      	movs	r3, #16
 8001298:	402b      	ands	r3, r5
 800129a:	4319      	orrs	r1, r3
 800129c:	465b      	mov	r3, fp
 800129e:	4319      	orrs	r1, r3
 80012a0:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80012a2:	69d3      	ldr	r3, [r2, #28]
 80012a4:	491d      	ldr	r1, [pc, #116]	@ (800131c <HAL_SPI_Init+0x148>)
  return HAL_OK;
 80012a6:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80012a8:	400b      	ands	r3, r1
 80012aa:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012ac:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80012ae:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012b0:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80012b2:	335d      	adds	r3, #93	@ 0x5d
 80012b4:	54e2      	strb	r2, [r4, r3]
}
 80012b6:	bcf0      	pop	{r4, r5, r6, r7}
 80012b8:	46bb      	mov	fp, r7
 80012ba:	46b2      	mov	sl, r6
 80012bc:	46a9      	mov	r9, r5
 80012be:	46a0      	mov	r8, r4
 80012c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80012c2:	2382      	movs	r3, #130	@ 0x82
 80012c4:	6842      	ldr	r2, [r0, #4]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d093      	beq.n	80011f4 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012cc:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012ce:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d0:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80012d2:	335d      	adds	r3, #93	@ 0x5d
 80012d4:	5ce3      	ldrb	r3, [r4, r3]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d192      	bne.n	8001202 <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 80012dc:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80012de:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80012e0:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 80012e2:	f7ff f8c9 	bl	8000478 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80012e6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80012e8:	e78b      	b.n	8001202 <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80012ea:	23f0      	movs	r3, #240	@ 0xf0
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	4299      	cmp	r1, r3
 80012f0:	d110      	bne.n	8001314 <HAL_SPI_Init+0x140>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80012f2:	2380      	movs	r3, #128	@ 0x80
 80012f4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80012f6:	019b      	lsls	r3, r3, #6
 80012f8:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80012fa:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80012fc:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80012fe:	469b      	mov	fp, r3
 8001300:	e796      	b.n	8001230 <HAL_SPI_Init+0x5c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001302:	2380      	movs	r3, #128	@ 0x80
 8001304:	015b      	lsls	r3, r3, #5
 8001306:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	469c      	mov	ip, r3
 800130c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800130e:	e78f      	b.n	8001230 <HAL_SPI_Init+0x5c>
    return HAL_ERROR;
 8001310:	2001      	movs	r0, #1
 8001312:	e7d0      	b.n	80012b6 <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001314:	2300      	movs	r3, #0
 8001316:	469b      	mov	fp, r3
 8001318:	e7f6      	b.n	8001308 <HAL_SPI_Init+0x134>
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	fffff7ff 	.word	0xfffff7ff

08001320 <HAL_SPI_Transmit>:
{
 8001320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001322:	46ce      	mov	lr, r9
 8001324:	4647      	mov	r7, r8
 8001326:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8001328:	235c      	movs	r3, #92	@ 0x5c
{
 800132a:	b580      	push	{r7, lr}
 800132c:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 800132e:	5cc2      	ldrb	r2, [r0, r3]
{
 8001330:	0004      	movs	r4, r0
 8001332:	4688      	mov	r8, r1
 8001334:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8001336:	2a01      	cmp	r2, #1
 8001338:	d064      	beq.n	8001404 <HAL_SPI_Transmit+0xe4>
 800133a:	2201      	movs	r2, #1
 800133c:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800133e:	f7ff f947 	bl	80005d0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001342:	225d      	movs	r2, #93	@ 0x5d
 8001344:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 8001346:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001348:	b2df      	uxtb	r7, r3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d009      	beq.n	8001362 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 800134e:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 8001350:	235c      	movs	r3, #92	@ 0x5c
 8001352:	2200      	movs	r2, #0
 8001354:	54e2      	strb	r2, [r4, r3]
}
 8001356:	0038      	movs	r0, r7
 8001358:	b003      	add	sp, #12
 800135a:	bcc0      	pop	{r6, r7}
 800135c:	46b9      	mov	r9, r7
 800135e:	46b0      	mov	r8, r6
 8001360:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 8001362:	4643      	mov	r3, r8
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f3      	beq.n	8001350 <HAL_SPI_Transmit+0x30>
 8001368:	464b      	mov	r3, r9
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_SPI_Transmit+0x30>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800136e:	2303      	movs	r3, #3
 8001370:	54a3      	strb	r3, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001372:	4642      	mov	r2, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001374:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001376:	63a2      	str	r2, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001378:	464a      	mov	r2, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800137a:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->TxXferSize  = Size;
 800137c:	87a2      	strh	r2, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800137e:	87e2      	strh	r2, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = 0U;
 8001380:	2244      	movs	r2, #68	@ 0x44
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001382:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001384:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 8001386:	3202      	adds	r2, #2
 8001388:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 800138a:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800138c:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800138e:	2380      	movs	r3, #128	@ 0x80
 8001390:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8001392:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	429a      	cmp	r2, r3
 8001398:	d05b      	beq.n	8001452 <HAL_SPI_Transmit+0x132>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800139a:	2340      	movs	r3, #64	@ 0x40
 800139c:	6802      	ldr	r2, [r0, #0]
 800139e:	4213      	tst	r3, r2
 80013a0:	d102      	bne.n	80013a8 <HAL_SPI_Transmit+0x88>
    __HAL_SPI_ENABLE(hspi);
 80013a2:	6802      	ldr	r2, [r0, #0]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013a8:	23e0      	movs	r3, #224	@ 0xe0
 80013aa:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80013ac:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d929      	bls.n	8001408 <HAL_SPI_Transmit+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80013b4:	2900      	cmp	r1, #0
 80013b6:	d061      	beq.n	800147c <HAL_SPI_Transmit+0x15c>
 80013b8:	464b      	mov	r3, r9
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d05e      	beq.n	800147c <HAL_SPI_Transmit+0x15c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80013be:	2202      	movs	r2, #2
    while (hspi->TxXferCount > 0U)
 80013c0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80013c2:	4690      	mov	r8, r2
    while (hspi->TxXferCount > 0U)
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10d      	bne.n	80013e4 <HAL_SPI_Transmit+0xc4>
 80013c8:	e063      	b.n	8001492 <HAL_SPI_Transmit+0x172>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80013cc:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80013ce:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013d0:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 80013d2:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80013d4:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80013d6:	3901      	subs	r1, #1
 80013d8:	b289      	uxth	r1, r1
 80013da:	87e1      	strh	r1, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80013dc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d057      	beq.n	8001492 <HAL_SPI_Transmit+0x172>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80013e2:	6820      	ldr	r0, [r4, #0]
 80013e4:	4642      	mov	r2, r8
 80013e6:	6883      	ldr	r3, [r0, #8]
 80013e8:	421a      	tst	r2, r3
 80013ea:	d1ee      	bne.n	80013ca <HAL_SPI_Transmit+0xaa>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80013ec:	f7ff f8f0 	bl	80005d0 <HAL_GetTick>
 80013f0:	1b80      	subs	r0, r0, r6
 80013f2:	42a8      	cmp	r0, r5
 80013f4:	d3f2      	bcc.n	80013dc <HAL_SPI_Transmit+0xbc>
 80013f6:	1c6b      	adds	r3, r5, #1
 80013f8:	d0f0      	beq.n	80013dc <HAL_SPI_Transmit+0xbc>
          hspi->State = HAL_SPI_STATE_READY;
 80013fa:	235d      	movs	r3, #93	@ 0x5d
 80013fc:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 80013fe:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 8001400:	54e2      	strb	r2, [r4, r3]
          goto error;
 8001402:	e7a5      	b.n	8001350 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8001404:	2702      	movs	r7, #2
 8001406:	e7a6      	b.n	8001356 <HAL_SPI_Transmit+0x36>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001408:	2900      	cmp	r1, #0
 800140a:	d02c      	beq.n	8001466 <HAL_SPI_Transmit+0x146>
 800140c:	464b      	mov	r3, r9
 800140e:	2b01      	cmp	r3, #1
 8001410:	d029      	beq.n	8001466 <HAL_SPI_Transmit+0x146>
    while (hspi->TxXferCount > 0U)
 8001412:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001414:	2b00      	cmp	r3, #0
 8001416:	d03c      	beq.n	8001492 <HAL_SPI_Transmit+0x172>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001418:	2302      	movs	r3, #2
 800141a:	4698      	mov	r8, r3
 800141c:	e00c      	b.n	8001438 <HAL_SPI_Transmit+0x118>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800141e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001420:	7812      	ldrb	r2, [r2, #0]
 8001422:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001424:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001426:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001428:	3901      	subs	r1, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800142a:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 800142c:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800142e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001430:	87e1      	strh	r1, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8001432:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001434:	2b00      	cmp	r3, #0
 8001436:	d02c      	beq.n	8001492 <HAL_SPI_Transmit+0x172>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001438:	4641      	mov	r1, r8
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	4211      	tst	r1, r2
 8001440:	d1ed      	bne.n	800141e <HAL_SPI_Transmit+0xfe>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001442:	f7ff f8c5 	bl	80005d0 <HAL_GetTick>
 8001446:	1b80      	subs	r0, r0, r6
 8001448:	42a8      	cmp	r0, r5
 800144a:	d3f2      	bcc.n	8001432 <HAL_SPI_Transmit+0x112>
 800144c:	1c6b      	adds	r3, r5, #1
 800144e:	d0f0      	beq.n	8001432 <HAL_SPI_Transmit+0x112>
 8001450:	e7d3      	b.n	80013fa <HAL_SPI_Transmit+0xda>
    __HAL_SPI_DISABLE(hspi);
 8001452:	2240      	movs	r2, #64	@ 0x40
 8001454:	6803      	ldr	r3, [r0, #0]
 8001456:	4393      	bics	r3, r2
 8001458:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 800145a:	2380      	movs	r3, #128	@ 0x80
 800145c:	6802      	ldr	r2, [r0, #0]
 800145e:	01db      	lsls	r3, r3, #7
 8001460:	4313      	orrs	r3, r2
 8001462:	6003      	str	r3, [r0, #0]
 8001464:	e799      	b.n	800139a <HAL_SPI_Transmit+0x7a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001466:	4643      	mov	r3, r8
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	7303      	strb	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800146c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800146e:	3301      	adds	r3, #1
 8001470:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8001472:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001474:	3b01      	subs	r3, #1
 8001476:	b29b      	uxth	r3, r3
 8001478:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800147a:	e7ca      	b.n	8001412 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800147c:	4643      	mov	r3, r8
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001482:	4643      	mov	r3, r8
 8001484:	3302      	adds	r3, #2
 8001486:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8001488:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800148a:	3b01      	subs	r3, #1
 800148c:	b29b      	uxth	r3, r3
 800148e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001490:	e795      	b.n	80013be <HAL_SPI_Transmit+0x9e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001492:	0032      	movs	r2, r6
 8001494:	0029      	movs	r1, r5
 8001496:	0020      	movs	r0, r4
 8001498:	f7ff fe7a 	bl	8001190 <SPI_EndRxTxTransaction>
 800149c:	2800      	cmp	r0, #0
 800149e:	d001      	beq.n	80014a4 <HAL_SPI_Transmit+0x184>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80014a0:	2320      	movs	r3, #32
 80014a2:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80014a4:	68a3      	ldr	r3, [r4, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d106      	bne.n	80014b8 <HAL_SPI_Transmit+0x198>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	6823      	ldr	r3, [r4, #0]
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	9201      	str	r2, [sp, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80014b8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d000      	beq.n	80014c0 <HAL_SPI_Transmit+0x1a0>
 80014be:	e747      	b.n	8001350 <HAL_SPI_Transmit+0x30>
    hspi->State = HAL_SPI_STATE_READY;
 80014c0:	2201      	movs	r2, #1
 80014c2:	335d      	adds	r3, #93	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 80014c4:	2700      	movs	r7, #0
    hspi->State = HAL_SPI_STATE_READY;
 80014c6:	54e2      	strb	r2, [r4, r3]
 80014c8:	e742      	b.n	8001350 <HAL_SPI_Transmit+0x30>
 80014ca:	46c0      	nop			@ (mov r8, r8)

080014cc <memset>:
 80014cc:	0003      	movs	r3, r0
 80014ce:	1882      	adds	r2, r0, r2
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d100      	bne.n	80014d6 <memset+0xa>
 80014d4:	4770      	bx	lr
 80014d6:	7019      	strb	r1, [r3, #0]
 80014d8:	3301      	adds	r3, #1
 80014da:	e7f9      	b.n	80014d0 <memset+0x4>

080014dc <__libc_init_array>:
 80014dc:	b570      	push	{r4, r5, r6, lr}
 80014de:	2600      	movs	r6, #0
 80014e0:	4c0c      	ldr	r4, [pc, #48]	@ (8001514 <__libc_init_array+0x38>)
 80014e2:	4d0d      	ldr	r5, [pc, #52]	@ (8001518 <__libc_init_array+0x3c>)
 80014e4:	1b64      	subs	r4, r4, r5
 80014e6:	10a4      	asrs	r4, r4, #2
 80014e8:	42a6      	cmp	r6, r4
 80014ea:	d109      	bne.n	8001500 <__libc_init_array+0x24>
 80014ec:	2600      	movs	r6, #0
 80014ee:	f000 f819 	bl	8001524 <_init>
 80014f2:	4c0a      	ldr	r4, [pc, #40]	@ (800151c <__libc_init_array+0x40>)
 80014f4:	4d0a      	ldr	r5, [pc, #40]	@ (8001520 <__libc_init_array+0x44>)
 80014f6:	1b64      	subs	r4, r4, r5
 80014f8:	10a4      	asrs	r4, r4, #2
 80014fa:	42a6      	cmp	r6, r4
 80014fc:	d105      	bne.n	800150a <__libc_init_array+0x2e>
 80014fe:	bd70      	pop	{r4, r5, r6, pc}
 8001500:	00b3      	lsls	r3, r6, #2
 8001502:	58eb      	ldr	r3, [r5, r3]
 8001504:	4798      	blx	r3
 8001506:	3601      	adds	r6, #1
 8001508:	e7ee      	b.n	80014e8 <__libc_init_array+0xc>
 800150a:	00b3      	lsls	r3, r6, #2
 800150c:	58eb      	ldr	r3, [r5, r3]
 800150e:	4798      	blx	r3
 8001510:	3601      	adds	r6, #1
 8001512:	e7f2      	b.n	80014fa <__libc_init_array+0x1e>
 8001514:	08001584 	.word	0x08001584
 8001518:	08001584 	.word	0x08001584
 800151c:	08001588 	.word	0x08001588
 8001520:	08001584 	.word	0x08001584

08001524 <_init>:
 8001524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800152a:	bc08      	pop	{r3}
 800152c:	469e      	mov	lr, r3
 800152e:	4770      	bx	lr

08001530 <_fini>:
 8001530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001536:	bc08      	pop	{r3}
 8001538:	469e      	mov	lr, r3
 800153a:	4770      	bx	lr
